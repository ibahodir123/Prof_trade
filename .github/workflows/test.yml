name: üß™ Test Bot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10]
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: üß™ Test imports
      run: |
        echo "üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤..."
        python -c "import pandas, numpy, sklearn, ccxt, telegram, tensorflow; print('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã')"
        
    - name: üß™ Test model creation
      run: |
        echo "üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏..."
        python -c "
        import tensorflow as tf
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
        model = tf.keras.Sequential([
            tf.keras.layers.LSTM(32, return_sequences=True, input_shape=(12, 5)),
            tf.keras.layers.Dense(5, activation='softmax')
        ])
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        test_data = np.random.random((1, 12, 5))
        prediction = model.predict(test_data, verbose=0)
        print(f'‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç. –†–∞–∑–º–µ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {prediction.shape}')
        "
        
    - name: üß™ Test configuration
      run: |
        echo "‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        python -c "
        import json
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open('bot_config.example.json', 'r') as f:
            config = json.load(f)
        
        required_keys = ['telegram_token', 'chat_id', 'binance_api', 'ml_settings']
        for key in required_keys:
            assert key in config, f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {key}'
        
        print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')
        "
        
    - name: üß™ Test data structures
      run: |
        echo "üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö..."
        python -c "
        import pandas as pd
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            'close': np.random.randn(100).cumsum() + 100,
            'volume': np.random.exponential(1000, 100),
            'high': np.random.randn(100).cumsum() + 102,
            'low': np.random.randn(100).cumsum() + 98,
            'rsi': np.random.uniform(20, 80, 100)
        }
        
        df = pd.DataFrame(data)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['rsi'] = 100 - (100 / (1 + df['close'].rolling(14).apply(lambda x: x[x > 0].sum() / abs(x[x < 0]).sum() if len(x[x < 0]) > 0 else 1)))
        
        print(f'‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤')
        "
        
    - name: üìä Test results
      run: |
        echo "üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
        echo "‚úÖ Python ${{ matrix.python-version }} - —Å–æ–≤–º–µ—Å—Ç–∏–º"
        echo "‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
        echo "‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è"
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        echo "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—é—Ç"
