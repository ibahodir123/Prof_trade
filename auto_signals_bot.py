#!/usr/bin/env python3
"""
–û—Ç–¥–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
"""
import asyncio
import logging
import json
import ccxt
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import tensorflow as tf
from tensorflow.keras.models import load_model
from ema_pattern_analyzer import EMAPatternAnalyzer
from ema_trend_trainer import EMATrendTrainer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('auto_signals.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AutoSignalsBot:
    def __init__(self):
        self.config = self.load_config()
        self.binance = None
        self.available_pairs = []
        self.scheduler = AsyncIOScheduler()
        self.min_detector = None
        self.max_detector = None
        self.scaler = None
        self.feature_names = None
        self.shooting_star_model = None
        self.shooting_star_scaler = None
        self.ema_analyzer = None
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            with open('bot_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
            return config
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return None
    
    def initialize_binance(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance API"""
        try:
            self.binance = ccxt.binance({
                'apiKey': self.config['binance_api']['api_key'],
                'secret': self.config['binance_api']['secret_key'],
                'sandbox': False,
                'enableRateLimit': True,
            })
            logger.info("‚úÖ Binance API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binance API: {e}")
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
            self.min_detector = joblib.load('models/minimum_detector.pkl')
            self.max_detector = joblib.load('models/maximum_detector.pkl')
            self.scaler = joblib.load('models/scaler.pkl')
            self.feature_names = joblib.load('models/feature_names.pkl')
            
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")
            return False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            self.shooting_star_model = load_model('simple_shooting_star_model.h5')
            self.shooting_star_scaler = joblib.load('simple_shooting_star_scaler.pkl')
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {e}")
            self.shooting_star_model = None
            self.shooting_star_scaler = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            self.ema_analyzer = EMAPatternAnalyzer()
            logger.info("‚úÖ EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            self.ema_analyzer = None
        
        return True
    
    async def get_available_pairs(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            if not self.binance:
                self.initialize_binance()
            
            markets = self.binance.load_markets()
            usdt_pairs = []
            
            for symbol, market in markets.items():
                if market['quote'] == 'USDT' and market['active']:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24—á
                    try:
                        ticker = self.binance.fetch_ticker(symbol)
                        volume_24h = ticker['quoteVolume']
                        
                        if volume_24h and volume_24h >= self.config['trading_settings']['min_volume_24h']:
                            usdt_pairs.append(symbol)
                    except:
                        continue
            
            self.available_pairs = usdt_pairs
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(usdt_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä")
            return usdt_pairs
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return []
    
    def calculate_dynamic_percentages(self, signal_strength, signal_type):
        """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        if signal_strength > 0.9:
            tp_percent = 8.0
            sl_percent = 4.0
        elif signal_strength > 0.8:
            tp_percent = 6.0
            sl_percent = 3.0
        elif signal_strength > 0.7:
            tp_percent = 5.0
            sl_percent = 2.5
        elif signal_strength > 0.6:
            tp_percent = 4.0
            sl_percent = 2.0
        else:
            tp_percent = 3.0
            sl_percent = 1.5
        
        return tp_percent, sl_percent
    
    async def analyze_coin_signal(self, symbol):
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        try:
            clean_symbol = symbol.replace(':USDT', '') if ':USDT' in symbol else symbol
            
            if not self.binance:
                self.initialize_binance()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            ohlcv = self.binance.fetch_ohlcv(symbol, '1h', limit=100)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            if len(df) < 50:
                return None
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.prepare_features(df)
            
            if features is None or len(features) == 0:
                return None
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_scaled = self.scaler.transform(features.reshape(1, -1))
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            min_prob = self.min_detector.predict_proba(features_scaled)[0][1]
            max_prob = self.max_detector.predict_proba(features_scaled)[0][1]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
            diff = max_prob - min_prob
            signal = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
            confidence = 0.0
            
            if diff > 0.02:      # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 2%
                if max_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    signal = "üî¥ SHORT"
                    confidence = max_prob
            elif diff < -0.02:   # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ -2%
                if min_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                    signal = "üü¢ LONG"
                    confidence = min_prob
            else:
                signal = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 2%
            
            if signal != "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                ticker = self.binance.fetch_ticker(symbol)
                current_price = ticker['last']
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º TP –∏ SL
                tp_percent, sl_percent = self.calculate_dynamic_percentages(confidence, signal)
                
                if "LONG" in signal:
                    tp_price = current_price * (1 + tp_percent / 100)
                    sl_price = current_price * (1 - sl_percent / 100)
                else:  # SHORT
                    tp_price = current_price * (1 - tp_percent / 100)
                    sl_price = current_price * (1 + sl_percent / 100)
                
                return {
                    'symbol': clean_symbol,
                    'signal': signal,
                    'confidence': confidence,
                    'current_price': current_price,
                    'tp_price': tp_price,
                    'sl_price': sl_price,
                    'tp_percent': tp_percent,
                    'sl_percent': sl_percent
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def prepare_features(self, df):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            df['rsi'] = self.calculate_rsi(df['close'])
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            df['price_change'] = df['close'].pct_change()
            df['volume_change'] = df['volume'].pct_change()
            df['high_low_ratio'] = df['high'] / df['low']
            df['close_open_ratio'] = df['close'] / df['open']
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
            df['sma_10'] = df['close'].rolling(10).mean()
            df['sma_20'] = df['close'].rolling(20).mean()
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['price_change'].rolling(20).std()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏
            features = []
            for col in self.feature_names:
                if col in df.columns:
                    features.append(df[col].iloc[-1])
                else:
                    features.append(0.0)
            
            return np.array(features)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None
    
    def calculate_rsi(self, prices, period=14):
        """–†–∞—Å—á–µ—Ç RSI"""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi
    
    async def send_telegram_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        try:
            import httpx
            
            url = f"https://api.telegram.org/bot{self.config['telegram_token']}/sendMessage"
            data = {
                'chat_id': self.config['chat_id'],
                'text': message,
                'parse_mode': 'HTML'
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(url, data=data)
                if response.status_code == 200:
                    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status_code}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def send_auto_signals(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
            if not self.available_pairs:
                await self.get_available_pairs()
            
            coins_to_check = self.available_pairs
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(coins_to_check)} –º–æ–Ω–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤")
            
            all_signals = []
            analyzed_count = 0
            max_analysis_time = 300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            
            start_time = datetime.now()
            
            for coin in coins_to_check:
                if (datetime.now() - start_time).seconds > max_analysis_time:
                    logger.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ ({max_analysis_time} —Å–µ–∫)")
                    break
                
                try:
                    signal = await self.analyze_coin_signal(coin)
                    if signal:
                        all_signals.append(signal)
                    analyzed_count += 1
                    
                    if analyzed_count % 50 == 0:
                        logger.info(f"üìà –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count}/{len(coins_to_check)} –º–æ–Ω–µ—Ç")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {coin}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            long_signals = [s for s in all_signals if "LONG" in s['signal']]
            short_signals = [s for s in all_signals if "SHORT" in s['signal']]
            
            long_signals.sort(key=lambda x: x['confidence'], reverse=True)
            short_signals.sort(key=lambda x: x['confidence'], reverse=True)
            
            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            top_long = long_signals[:5]
            top_short = short_signals[:5]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"ü§ñ <b>–ê–í–¢–û–°–ò–ì–ù–ê–õ–´</b> ({datetime.now().strftime('%H:%M')})\n"
            message += f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_count} –º–æ–Ω–µ—Ç\n"
            message += f"üü¢ LONG: {len(long_signals)} | üî¥ SHORT: {len(short_signals)}\n\n"
            
            if top_long:
                message += "üü¢ <b>–¢–û–ü LONG –°–ò–ì–ù–ê–õ–´:</b>\n"
                for i, signal in enumerate(top_long, 1):
                    message += f"{i}. {signal['symbol']} - {signal['confidence']:.1%}\n"
                    message += f"   üí∞ –¶–µ–Ω–∞: ${signal['current_price']:.8f}\n"
                    message += f"   üéØ TP: ${signal['tp_price']:.8f} (+{signal['tp_percent']:.1f}%)\n"
                    message += f"   üõ°Ô∏è SL: ${signal['sl_price']:.8f} (-{signal['sl_percent']:.1f}%)\n\n"
            
            if top_short:
                message += "üî¥ <b>–¢–û–ü SHORT –°–ò–ì–ù–ê–õ–´:</b>\n"
                for i, signal in enumerate(top_short, 1):
                    message += f"{i}. {signal['symbol']} - {signal['confidence']:.1%}\n"
                    message += f"   üí∞ –¶–µ–Ω–∞: ${signal['current_price']:.8f}\n"
                    message += f"   üéØ TP: ${signal['tp_price']:.8f} (-{signal['tp_percent']:.1f}%)\n"
                    message += f"   üõ°Ô∏è SL: ${signal['sl_price']:.8f} (+{signal['sl_percent']:.1f}%)\n\n"
            
            if not top_long and not top_short:
                message += "‚ö™ <b>–ù–µ—Ç —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>\n"
                message += "–†—ã–Ω–æ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.\n"
                message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_telegram_message(message)
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(top_long)} LONG, {len(top_short)} SHORT")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            self.scheduler.add_job(
                self.send_auto_signals,
                trigger=IntervalTrigger(minutes=30),
                id='auto_signals',
                replace_existing=True
            )
            
            self.scheduler.start()
            logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ AutoSignals Bot")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.initialize_binance()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–µ–π
            if not self.load_models():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                return
            
            await self.get_available_pairs()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            self.start_scheduler()
            
            logger.info("‚úÖ AutoSignals Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)
            await self.send_auto_signals()
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while True:
                await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoSignals Bot")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = AutoSignalsBot()
    await bot.run()

if __name__ == "__main__":
    asyncio.run(main())

