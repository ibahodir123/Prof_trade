#!/usr/bin/env python3
"""
üéØ –ë–≠–ö–¢–ï–°–¢–ï–† –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò –ë–û–¢–ê
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
–ü–µ—Ä–∏–æ–¥: 01.01.2025 - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import os
import logging
from typing import Dict, List, Tuple, Any
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
from advanced_ema_analyzer import AdvancedEMAAnalyzer
from advanced_ml_trainer import AdvancedMLTrainer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('backtest_results.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ProfitabilityBacktester:
    def __init__(self):
        self.start_date = datetime(2025, 1, 1)
        self.end_date = datetime.now()
        self.initial_balance = 1000.0  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª $1000
        self.current_balance = self.initial_balance
        self.trades = []
        self.positions = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞
        self.ema_analyzer = AdvancedEMAAnalyzer()
        self.ml_trainer = AdvancedMLTrainer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        try:
            self.ml_trainer.load_models()
            logger.info("‚úÖ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏: {e}")
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.position_size_percent = 0.1  # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        self.max_positions = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        
    def get_historical_data(self, symbol: str, timeframe='1h') -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        try:
            exchange = ccxt.binance()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            since = int(self.start_date.timestamp() * 1000)
            
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å {self.start_date.strftime('%Y-%m-%d')}...")
            
            all_ohlcv = []
            current_since = since
            
            while current_since < int(self.end_date.timestamp() * 1000):
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=current_since, limit=1000)
                    if not ohlcv:
                        break
                        
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1  # –°–ª–µ–¥—É—é—â–∞—è —Å–≤–µ—á–∞
                    
                    # –ü–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
                    break
            
            if not all_ohlcv:
                logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return pd.DataFrame()
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return pd.DataFrame()
    
    def analyze_signal(self, symbol: str, df: pd.DataFrame, current_idx: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–≤–µ—á–µ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ)"""
        try:
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–∏–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
            historical_data = df.iloc[:current_idx + 1].copy()
            
            if len(historical_data) < 100:  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π –¥–ª—è EMA
                return {'signal': 'WAIT', 'confidence': 0}
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
            ohlcv_data = []
            for idx, row in historical_data.iterrows():
                ohlcv_data.append([
                    int(idx.timestamp() * 1000),  # timestamp
                    float(row['open']),
                    float(row['high']),
                    float(row['low']),
                    float(row['close']),
                    float(row['volume'])
                ])
            
            # –ê–Ω–∞–ª–∏–∑ —Å EMA + ML (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ)
            analysis = self.ema_analyzer.analyze_coin(symbol, ohlcv_data, self.ml_trainer)
            
            return {
                'signal': analysis.get('signal', 'WAIT'),
                'confidence': analysis.get('confidence', 0),
                'ml_entry_prob': analysis.get('ml_entry_prob', 0),
                'ml_exit_prob': analysis.get('ml_exit_prob', 0),
                'price': float(historical_data.iloc[-1]['close'])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return {'signal': 'WAIT', 'confidence': 0}
    
    def calculate_position_size(self, price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        position_value = self.current_balance * self.position_size_percent
        return position_value / price
    
    def open_position(self, symbol: str, signal: str, price: float, confidence: float, timestamp: datetime):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if len(self.positions) >= self.max_positions:
            return False
            
        if symbol in self.positions:
            return False  # –£–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –ø–æ —ç—Ç–æ–º—É —Å–∏–º–≤–æ–ª—É
            
        size = self.calculate_position_size(price)
        
        # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (–∫–∞–∫ –≤ –±–æ—Ç–µ)
        if confidence >= 80:
            profit_pct = 0.05  # +5%
            loss_pct = 0.025   # -2.5%
        elif confidence >= 60:
            profit_pct = 0.04  # +4%
            loss_pct = 0.02    # -2%
        elif confidence >= 40:
            profit_pct = 0.03  # +3%
            loss_pct = 0.015   # -1.5%
        else:
            profit_pct = 0.02  # +2%
            loss_pct = 0.01    # -1%
        
        if signal == 'LONG':
            take_profit = price * (1 + profit_pct)
            stop_loss = price * (1 - loss_pct)
        else:  # SHORT
            take_profit = price * (1 - profit_pct)
            stop_loss = price * (1 + loss_pct)
        
        position = {
            'symbol': symbol,
            'side': signal,
            'entry_price': price,
            'size': size,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'timestamp': timestamp,
            'confidence': confidence
        }
        
        self.positions[symbol] = position
        logger.info(f"üîì –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {signal} {symbol} @ ${price:.4f} (TP: ${take_profit:.4f}, SL: ${stop_loss:.4f})")
        return True
    
    def check_position_exit(self, symbol: str, current_price: float, timestamp: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.positions:
            return False
            
        position = self.positions[symbol]
        entry_price = position['entry_price']
        take_profit = position['take_profit']
        stop_loss = position['stop_loss']
        side = position['side']
        
        should_close = False
        exit_reason = ""
        
        if side == 'LONG':
            if current_price >= take_profit:
                should_close = True
                exit_reason = "Take Profit"
            elif current_price <= stop_loss:
                should_close = True
                exit_reason = "Stop Loss"
        else:  # SHORT
            if current_price <= take_profit:
                should_close = True
                exit_reason = "Take Profit"
            elif current_price >= stop_loss:
                should_close = True
                exit_reason = "Stop Loss"
        
        if should_close:
            self.close_position(symbol, current_price, timestamp, exit_reason)
            return True
            
        return False
    
    def close_position(self, symbol: str, exit_price: float, timestamp: datetime, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        if symbol not in self.positions:
            return
            
        position = self.positions[symbol]
        entry_price = position['entry_price']
        size = position['size']
        side = position['side']
        
        # –†–∞—Å—á–µ—Ç PnL
        if side == 'LONG':
            pnl = (exit_price - entry_price) * size
        else:  # SHORT
            pnl = (entry_price - exit_price) * size
        
        pnl_percent = (pnl / (entry_price * size)) * 100
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        self.current_balance += pnl
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
        trade = {
            'symbol': symbol,
            'side': side,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'size': size,
            'pnl': pnl,
            'pnl_percent': pnl_percent,
            'entry_time': position['timestamp'],
            'exit_time': timestamp,
            'duration': timestamp - position['timestamp'],
            'exit_reason': reason,
            'confidence': position['confidence']
        }
        
        self.trades.append(trade)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del self.positions[symbol]
        
        logger.info(f"üîí –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {side} {symbol} @ ${exit_price:.4f} | PnL: ${pnl:.2f} ({pnl_percent:+.2f}%) | {reason}")
    
    def run_backtest(self, symbols: List[str]):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        logger.info(f"üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.start_date.strftime('%Y-%m-%d')} - {self.end_date.strftime('%Y-%m-%d')}")
        logger.info(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.initial_balance}")
        logger.info(f"ü™ô –¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä—ã: {', '.join(symbols)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        historical_data = {}
        for symbol in symbols:
            df = self.get_historical_data(symbol)
            if not df.empty:
                historical_data[symbol] = df
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é {symbol} - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        if not historical_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
        all_timestamps = set()
        for df in historical_data.values():
            all_timestamps.update(df.index)
        
        timestamps = sorted(list(all_timestamps))
        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(timestamps)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        for i, timestamp in enumerate(timestamps):
            if i % 1000 == 0:
                progress = (i / len(timestamps)) * 100
                logger.info(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –ë–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ —ç—Ç–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ
            for symbol, df in historical_data.items():
                if timestamp not in df.index:
                    continue
                
                current_price = float(df.loc[timestamp, 'close'])
                current_idx = df.index.get_loc(timestamp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                self.check_position_exit(symbol, current_price, timestamp)
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏)
                if symbol not in self.positions and len(self.positions) < self.max_positions:
                    signal_data = self.analyze_signal(symbol, df, current_idx)
                    
                    signal = signal_data.get('signal', 'WAIT')
                    confidence = signal_data.get('confidence', 0)
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ —Å–∏–≥–Ω–∞–ª —Å–∏–ª—å–Ω—ã–π
                    if signal in ['LONG', 'SHORT'] and confidence >= 40:
                        self.open_position(symbol, signal, current_price, confidence, timestamp)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        for symbol in list(self.positions.keys()):
            last_price = float(historical_data[symbol].iloc[-1]['close'])
            self.close_position(symbol, last_price, timestamps[-1], "End of backtest")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
        logger.info("="*60)
        
        if not self.trades:
            logger.info("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ!")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t['pnl'] > 0])
        losing_trades = len([t for t in self.trades if t['pnl'] < 0])
        
        win_rate = (winning_trades / total_trades) * 100
        
        total_pnl = sum(t['pnl'] for t in self.trades)
        total_return = ((self.current_balance - self.initial_balance) / self.initial_balance) * 100
        
        avg_win = np.mean([t['pnl'] for t in self.trades if t['pnl'] > 0]) if winning_trades > 0 else 0
        avg_loss = np.mean([t['pnl'] for t in self.trades if t['pnl'] < 0]) if losing_trades > 0 else 0
        
        profit_factor = abs(avg_win * winning_trades / (avg_loss * losing_trades)) if losing_trades > 0 and avg_loss < 0 else float('inf')
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        balance_history = [self.initial_balance]
        for trade in self.trades:
            balance_history.append(balance_history[-1] + trade['pnl'])
        
        peak = balance_history[0]
        max_drawdown = 0
        for balance in balance_history:
            if balance > peak:
                peak = balance
            drawdown = (peak - balance) / peak * 100
            if drawdown > max_drawdown:
                max_drawdown = drawdown
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.initial_balance:.2f}")
        logger.info(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.current_balance:.2f}")
        logger.info(f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_pnl:.2f} ({total_return:+.2f}%)")
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        logger.info(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)")
        logger.info(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades} ({100-win_rate:.1f}%)")
        logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_win:.2f}")
        logger.info(f"üìä –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${avg_loss:.2f}")
        logger.info(f"üéØ Profit Factor: {profit_factor:.2f}")
        logger.info(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        logger.info("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ü–ê–†–ê–ú:")
        symbol_stats = {}
        for trade in self.trades:
            symbol = trade['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'trades': 0, 'pnl': 0, 'wins': 0}
            symbol_stats[symbol]['trades'] += 1
            symbol_stats[symbol]['pnl'] += trade['pnl']
            if trade['pnl'] > 0:
                symbol_stats[symbol]['wins'] += 1
        
        for symbol, stats in symbol_stats.items():
            win_rate_symbol = (stats['wins'] / stats['trades']) * 100
            logger.info(f"{symbol}: {stats['trades']} —Å–¥–µ–ª–æ–∫, ${stats['pnl']:.2f}, WR: {win_rate_symbol:.1f}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.save_detailed_report()
        
        logger.info("="*60)
        
    def save_detailed_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            # CSV —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å–¥–µ–ª–æ–∫
            df_trades = pd.DataFrame(self.trades)
            df_trades.to_csv('backtest_trades.csv', index=False)
            
            # JSON —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            report = {
                'period': {
                    'start': self.start_date.isoformat(),
                    'end': self.end_date.isoformat()
                },
                'capital': {
                    'initial': self.initial_balance,
                    'final': self.current_balance,
                    'total_return_pct': ((self.current_balance - self.initial_balance) / self.initial_balance) * 100
                },
                'trades': {
                    'total': len(self.trades),
                    'winning': len([t for t in self.trades if t['pnl'] > 0]),
                    'losing': len([t for t in self.trades if t['pnl'] < 0])
                },
                'generated_at': datetime.now().isoformat()
            }
            
            with open('backtest_summary.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
                
            logger.info("üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: backtest_trades.csv, backtest_summary.json")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ï–†–ê –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
    
    # –¢–æ–ø —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_symbols = [
        'BTC/USDT',
        'ETH/USDT', 
        'ADA/USDT',
        'SOL/USDT',
        'XRP/USDT',
        'BNB/USDT',
        'DOGE/USDT',
        'AVAX/USDT',
        'DOT/USDT',
        'LINK/USDT'
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
    backtester = ProfitabilityBacktester()
    backtester.run_backtest(test_symbols)

if __name__ == "__main__":
    main()

