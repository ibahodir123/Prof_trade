#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ –ë–≠–ö–¢–ï–°–¢–ï–† –î–õ–Ø 2025 –ì–û–î–ê
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import pickle
import json
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

class Backtester2025:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self.minimum_model = None
        self.maximum_model = None
        self.minimum_scaler = None
        self.maximum_scaler = None
        self.minimum_features = None
        self.maximum_features = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        self.backtest_results = {
            'trades': [],
            'statistics': {},
            'symbols_stats': {}
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.initial_balance = 10000  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å $10,000
        self.trade_amount = 1000      # –°—É–º–º–∞ –Ω–∞ —Å–¥–µ–ª–∫—É $1,000
        self.commission = 0.001       # –ö–æ–º–∏—Å—Å–∏—è 0.1%
        
        print("üß™ –ë–≠–ö–¢–ï–°–¢–ï–† –î–õ–Ø 2025 –ì–û–î–ê")
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 60)
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            with open('historical_models/minimum_model.pkl', 'rb') as f:
                self.minimum_model = pickle.load(f)
            
            with open('historical_models/maximum_model.pkl', 'rb') as f:
                self.maximum_model = pickle.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤—â–∏–∫–∏
            with open('historical_models/minimum_scaler.pkl', 'rb') as f:
                self.minimum_scaler = pickle.load(f)
            
            with open('historical_models/maximum_scaler.pkl', 'rb') as f:
                self.maximum_scaler = pickle.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            with open('historical_models/minimum_features.pkl', 'rb') as f:
                self.minimum_features = pickle.load(f)
            
            with open('historical_models/maximum_features.pkl', 'rb') as f:
                self.maximum_features = pickle.load(f)
            
            print("   ‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except FileNotFoundError as e:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            return False
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def get_2025_data(self, symbol: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é {symbol} –∑–∞ 2025 –≥–æ–¥...")
            exchange = ccxt.binance()
            
            start_date = datetime(2025, 1, 1)
            end_date = datetime.now()
            
            since = int(start_date.timestamp() * 1000)
            end_ts = int(end_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            print(f"   ‚úÖ {len(df)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return df
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return pd.DataFrame()
    
    def prepare_minimum_features(self, df: pd.DataFrame, idx: int) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞"""
        try:
            if idx < 50 or idx >= len(df) - 6:
                return None
            
            current = df.iloc[idx]
            prev = df.iloc[idx - 1]
            prev_2 = df.iloc[idx - 2]
            
            features = {
                'price_velocity': (current['close'] - prev['close']) / prev['close'],
                'ema20_velocity': (current['ema_20'] - prev['ema_20']) / prev['ema_20'],
                'ema50_velocity': (current['ema_50'] - prev['ema_50']) / prev['ema_50'],
                'ema100_velocity': (current['ema_100'] - prev['ema_100']) / prev['ema_100'],
                'price_acceleration': ((current['close'] - prev['close']) / prev['close']) - 
                                   ((prev['close'] - prev_2['close']) / prev_2['close']),
                'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                'ema20_angle': ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) * 100,
                'ema50_angle': ((current['ema_50'] - prev['ema_50']) / prev['ema_50']) * 100,
                'ema100_angle': ((current['ema_100'] - prev['ema_100']) / prev['ema_100']) * 100,
                'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean(),
                'volume_ratio': current['volume'] / df['volume'].iloc[idx-20:idx].mean() if df['volume'].iloc[idx-20:idx].mean() > 0 else 1,
                'distance_change_ema20': (current['close'] - current['ema_20']) / current['ema_20'] - 
                                       (prev['close'] - prev['ema_20']) / prev['ema_20'],
                'distance_change_ema50': (current['close'] - current['ema_50']) / current['ema_50'] - 
                                       (prev['close'] - prev['ema_50']) / prev['ema_50'],
                'velocity_ratio_price_ema20': (current['close'] - prev['close']) / prev['close'] / 
                                            ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) if (current['ema_20'] - prev['ema_20']) / prev['ema_20'] != 0 else 0,
                'velocity_ratio_ema20_ema50': ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) / 
                                            ((current['ema_50'] - prev['ema_50']) / prev['ema_50']) if (current['ema_50'] - prev['ema_50']) / prev['ema_50'] != 0 else 0,
                'ema20_to_ema50': (current['ema_20'] - current['ema_50']) / current['ema_50'],
                'ema50_to_ema100': (current['ema_50'] - current['ema_100']) / current['ema_100'],
                'ema20_to_ema100': (current['ema_20'] - current['ema_100']) / current['ema_100']
            }
            
            return features
            
        except Exception:
            return None
    
    def prepare_maximum_features(self, df: pd.DataFrame, idx: int) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞"""
        try:
            if idx < 50 or idx >= len(df) - 6:
                return None
            
            current = df.iloc[idx]
            prev = df.iloc[idx - 1]
            prev_2 = df.iloc[idx - 2]
            
            price_velocity = (current['close'] - prev['close']) / prev['close']
            ema20_velocity = (current['ema_20'] - prev['ema_20']) / prev['ema_20']
            ema50_velocity = (current['ema_50'] - prev['ema_50']) / prev['ema_50']
            ema100_velocity = (current['ema_100'] - prev['ema_100']) / prev['ema_100']
            
            features = {
                'price_velocity': price_velocity,
                'ema20_velocity': ema20_velocity,
                'ema50_velocity': ema50_velocity,
                'ema100_velocity': ema100_velocity,
                'price_acceleration': price_velocity - ((prev['close'] - prev_2['close']) / prev_2['close']),
                'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                'ema20_angle': ema20_velocity * 100,
                'ema50_angle': ema50_velocity * 100,
                'ema100_angle': ema100_velocity * 100,
                'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean(),
                'volume_ratio': current['volume'] / df['volume'].iloc[idx-20:idx].mean() if df['volume'].iloc[idx-20:idx].mean() > 0 else 1,
                'distance_change_ema20': (current['close'] - current['ema_20']) / current['ema_20'] - 
                                       (prev['close'] - prev['ema_20']) / prev['ema_20'],
                'distance_change_ema50': (current['close'] - current['ema_50']) / current['ema_50'] - 
                                       (prev['close'] - prev['ema_50']) / prev['ema_50'],
                'velocity_ratio_price_ema20': price_velocity / ema20_velocity if ema20_velocity != 0 else 0,
                'velocity_ratio_ema20_ema50': ema20_velocity / ema50_velocity if ema50_velocity != 0 else 0,
                'velocity_ratio_ema50_ema100': ema50_velocity / ema100_velocity if ema100_velocity != 0 else 0,
                'ema20_to_ema50': (current['ema_20'] - current['ema_50']) / current['ema_50'],
                'ema50_to_ema100': (current['ema_50'] - current['ema_100']) / current['ema_100'],
                'ema20_to_ema100': (current['ema_20'] - current['ema_100']) / current['ema_100'],
                'ema20_slope': (current['ema_20'] - df.iloc[idx-5]['ema_20']) / 5,
                'ema50_slope': (current['ema_50'] - df.iloc[idx-5]['ema_50']) / 5,
                'ema100_slope': (current['ema_100'] - df.iloc[idx-5]['ema_100']) / 5,
                'ema20_ema50_ratio': current['ema_20'] / current['ema_50'],
                'ema50_ema100_ratio': current['ema_50'] / current['ema_100'],
                'ema20_ema100_ratio': current['ema_20'] / current['ema_100']
            }
            
            return features
            
        except Exception:
            return None
    
    def predict_minimum(self, features_dict):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞"""
        try:
            features_list = [features_dict.get(name, 0) for name in self.minimum_features]
            features_array = np.array(features_list).reshape(1, -1)
            
            features_scaled = self.minimum_scaler.transform(features_array)
            prediction = self.minimum_model.predict(features_scaled)[0]
            probability = self.minimum_model.predict_proba(features_scaled)[0]
            
            return {
                'prediction': prediction,
                'confidence': max(probability),
                'is_good_entry': prediction == 1
            }
        except Exception:
            return None
    
    def predict_maximum(self, features_dict):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞"""
        try:
            features_list = [features_dict.get(name, 0) for name in self.maximum_features]
            features_array = np.array(features_list).reshape(1, -1)
            
            features_scaled = self.maximum_scaler.transform(features_array)
            prediction = self.maximum_model.predict(features_scaled)[0]
            probability = self.maximum_model.predict_proba(features_scaled)[0]
            
            return {
                'prediction': prediction,
                'confidence': max(probability),
                'is_good_exit': prediction == 1
            }
        except Exception:
            return None
    
    def find_local_extremes(self, df: pd.DataFrame) -> tuple:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        minimums = []
        maximums = []
        
        for i in range(50, len(df) - 10):
            current_low = df.iloc[i]['low']
            current_high = df.iloc[i]['high']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            is_minimum = True
            for j in range(max(0, i-5), min(len(df), i+6)):
                if j != i and df.iloc[j]['low'] <= current_low:
                    is_minimum = False
                    break
            
            if is_minimum:
                minimums.append({
                    'idx': i,
                    'time': df.index[i],
                    'price': current_low
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            is_maximum = True
            for j in range(max(0, i-5), min(len(df), i+6)):
                if j != i and df.iloc[j]['high'] >= current_high:
                    is_maximum = False
                    break
            
            if is_maximum:
                maximums.append({
                    'idx': i,
                    'time': df.index[i],
                    'price': current_high
                })
        
        return minimums, maximums
    
    def simulate_trading(self, df: pd.DataFrame, symbol: str):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print(f"üéØ –°–∏–º—É–ª–∏—Ä—É—é —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}...")
        
        minimums, maximums = self.find_local_extremes(df)
        
        trades = []
        current_position = None
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ—á–∫–∞–º –¥–∞–Ω–Ω—ã—Ö
        for i in range(100, len(df) - 10):
            current_time = df.index[i]
            current_price = df.iloc[i]['close']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∏–º—É–º –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ
            is_minimum = any(abs(m['idx'] - i) <= 2 for m in minimums)
            
            if is_minimum and current_position is None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞
                features = self.prepare_minimum_features(df, i)
                if features:
                    prediction = self.predict_minimum(features)
                    if prediction and prediction['is_good_entry'] and prediction['confidence'] > 0.6:
                        # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é
                        current_position = {
                            'entry_time': current_time,
                            'entry_price': current_price,
                            'entry_idx': i,
                            'confidence': prediction['confidence']
                        }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–∫—Å–∏–º—É–º –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ
            is_maximum = any(abs(m['idx'] - i) <= 2 for m in maximums)
            
            if is_maximum and current_position is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞
                features = self.prepare_maximum_features(df, i)
                if features:
                    prediction = self.predict_maximum(features)
                    if prediction and prediction['is_good_exit'] and prediction['confidence'] > 0.6:
                        # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                        profit_percent = ((current_price - current_position['entry_price']) / current_position['entry_price']) * 100
                        duration_hours = (current_time - current_position['entry_time']).total_seconds() / 3600
                        
                        trade = {
                            'symbol': symbol,
                            'entry_time': current_position['entry_time'],
                            'exit_time': current_time,
                            'entry_price': current_position['entry_price'],
                            'exit_price': current_price,
                            'profit_percent': profit_percent,
                            'duration_hours': duration_hours,
                            'entry_confidence': current_position['confidence'],
                            'exit_confidence': prediction['confidence'],
                            'is_profitable': profit_percent > 0
                        }
                        
                        trades.append(trade)
                        current_position = None
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ 72 —á–∞—Å–∞
            if current_position and (current_time - current_position['entry_time']).total_seconds() / 3600 > 72:
                profit_percent = ((current_price - current_position['entry_price']) / current_position['entry_price']) * 100
                duration_hours = (current_time - current_position['entry_time']).total_seconds() / 3600
                
                trade = {
                    'symbol': symbol,
                    'entry_time': current_position['entry_time'],
                    'exit_time': current_time,
                    'entry_price': current_position['entry_price'],
                    'exit_price': current_price,
                    'profit_percent': profit_percent,
                    'duration_hours': duration_hours,
                    'entry_confidence': current_position['confidence'],
                    'exit_confidence': 0.5,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
                    'is_profitable': profit_percent > 0,
                    'forced_exit': True
                }
                
                trades.append(trade)
                current_position = None
        
        print(f"   ‚úÖ {len(trades)} —Å–¥–µ–ª–æ–∫")
        return trades
    
    def calculate_statistics(self, trades: list, symbol: str):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not trades:
            return {}
        
        profits = [t['profit_percent'] for t in trades]
        durations = [t['duration_hours'] for t in trades]
        profitable_trades = [t for t in trades if t['is_profitable']]
        
        stats = {
            'total_trades': len(trades),
            'profitable_trades': len(profitable_trades),
            'win_rate': len(profitable_trades) / len(trades) * 100,
            'average_profit': np.mean(profits),
            'median_profit': np.median(profits),
            'max_profit': max(profits),
            'min_profit': min(profits),
            'average_duration': np.mean(durations),
            'total_profit': sum(profits),
            'profitable_trades_avg': np.mean([t['profit_percent'] for t in profitable_trades]) if profitable_trades else 0,
            'losing_trades_avg': np.mean([t['profit_percent'] for t in trades if not t['is_profitable']]) if any(not t['is_profitable'] for t in trades) else 0
        }
        
        return stats
    
    def run_backtest(self):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê 2025 –ì–û–î–ê")
        print("=" * 60)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if not self.load_models():
            return
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        all_trades = []
        
        for i, symbol in enumerate(self.symbols):
            print(f"\n[{i+1}/{len(self.symbols)}] {symbol}")
            
            df = self.get_2025_data(symbol)
            if df.empty:
                print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
            
            trades = self.simulate_trading(df, symbol)
            all_trades.extend(trades)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª—É
            stats = self.calculate_statistics(trades, symbol)
            self.backtest_results['symbols_stats'][symbol] = stats
            
            if stats:
                print(f"   üìä –°–¥–µ–ª–æ–∫: {stats['total_trades']}")
                print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['profitable_trades']} ({stats['win_rate']:.1f}%)")
                print(f"   üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats['average_profit']:.2f}%")
                print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['average_duration']:.1f} —á–∞—Å–æ–≤")
            
            time.sleep(1)
        
        # 3. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if all_trades:
            overall_stats = self.calculate_statistics(all_trades, 'ALL')
            self.backtest_results['statistics'] = overall_stats
            self.backtest_results['trades'] = all_trades
            
            print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {overall_stats['total_trades']}")
            print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {overall_stats['profitable_trades']} ({overall_stats['win_rate']:.1f}%)")
            print(f"   üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {overall_stats['average_profit']:.2f}%")
            print(f"   üìä –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {overall_stats['total_profit']:.2f}%")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {overall_stats['average_duration']:.1f} —á–∞—Å–æ–≤")
            print(f"   üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {overall_stats['max_profit']:.2f}%")
            print(f"   üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: {overall_stats['min_profit']:.2f}%")
        
        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()
        
        print(f"\n‚úÖ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = f'backtest_2025_results_{timestamp}.json'
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(self.backtest_results, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        self.create_report(timestamp)
    
    def create_report(self, timestamp):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        report_content = f"""# üß™ –û–¢–ß–ï–¢ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê 2025 –ì–û–î–ê

## üìä –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

**–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}
**–°–∏–º–≤–æ–ª—ã:** {', '.join(self.symbols)}
**–ú–æ–¥–µ–ª–∏:** –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ (–æ–±—É—á–µ–Ω—ã –Ω–∞ 2017-2024)

## üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê

"""
        
        if self.backtest_results['statistics']:
            stats = self.backtest_results['statistics']
            report_content += f"""### üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- **–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:** {stats['total_trades']}
- **–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:** {stats['profitable_trades']} ({stats['win_rate']:.1f}%)
- **–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:** {stats['average_profit']:.2f}%
- **–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å:** {stats['total_profit']:.2f}%
- **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {stats['average_duration']:.1f} —á–∞—Å–æ–≤
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:** {stats['max_profit']:.2f}%
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫:** {stats['min_profit']:.2f}%

"""
        
        report_content += f"""## üìä –ü–û –°–ò–ú–í–û–õ–ê–ú

"""
        
        for symbol, stats in self.backtest_results['symbols_stats'].items():
            if stats:
                report_content += f"""### {symbol}:
- **–°–¥–µ–ª–æ–∫:** {stats['total_trades']}
- **–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö:** {stats['profitable_trades']} ({stats['win_rate']:.1f}%)
- **–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å:** {stats['average_profit']:.2f}%
- **–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {stats['average_duration']:.1f} —á–∞—Å–æ–≤

"""
        
        report_content += f"""## üéâ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï

–ú–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞:
- ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- üìä –†–µ–∞–ª—å–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
- üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}*
"""
        
        report_file = f'backtest_2025_report_{timestamp}.md'
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"üìã –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

if __name__ == "__main__":
    backtester = Backtester2025()
    backtester.run_backtest()
