#!/usr/bin/env python3
"""
–ë–ê–ó–û–í–´–ô –ü–û–ò–°–ö–û–í–ò–ö –ü–ê–¢–¢–ï–†–ù–û–í
–ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥: –Ω–∞—Ö–æ–¥–∏–º –í–°–ï –¥–≤–∏–∂–µ–Ω–∏—è min‚Üímax –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 9 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import numpy as np
import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional
import ccxt
import json
from datetime import datetime

logger = logging.getLogger(__name__)

class BasicPatternFinder:
    """–ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤–∏–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–≤–∏–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.movements_data = []  # –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
        self.min_movement = 0.01  # –ú–∏–Ω–∏–º—É–º 1% –¥–ª—è –∑–Ω–∞—á–∏–º–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        
    def find_all_movements(self, symbols: List[str]) -> bool:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–≤–∏–∂–µ–Ω–∏–π min‚Üímax –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            print(f"üîç –ò—â—É –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è min‚Üímax –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            for symbol in symbols:
                print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                df = self._get_historical_data(symbol)
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º 9 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                df = self._prepare_features(df)
                if df is None:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
                    continue
                
                print(f"üìà –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                
                # –ò—â–µ–º –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è
                movements = self._find_movements_in_data(df, symbol)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(movements)} –¥–≤–∏–∂–µ–Ω–∏–π –≤ {symbol}")
                
                self.movements_data.extend(movements)
            
            total_movements = len(self.movements_data)
            print(f"\nüéØ –ò–¢–û–ì–û –Ω–∞–π–¥–µ–Ω–æ {total_movements} –¥–≤–∏–∂–µ–Ω–∏–π min‚Üímax")
            
            return total_movements > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π: {e}")
            return False

    def _find_movements_in_data(self, df: pd.DataFrame, symbol: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–≤–∏–∂–µ–Ω–∏–π min‚Üímax –≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            movements = []
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º: –∏—â–µ–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ min –∏ max
            prices = df['close'].values
            lookback = 6  # 6 —á–∞—Å–æ–≤ lookback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
            local_mins = []
            local_maxs = []
            
            for i in range(lookback, len(prices) - lookback):
                current_price = prices[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                is_min = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i and prices[j] < current_price:
                        is_min = False
                        break
                
                if is_min:
                    local_mins.append({'idx': i, 'price': current_price})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                is_max = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i and prices[j] > current_price:
                        is_max = False
                        break
                
                if is_max:
                    local_maxs.append({'idx': i, 'price': current_price})
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏—è min‚Üímax
            for min_point in local_mins:
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞
                for max_point in local_maxs:
                    if max_point['idx'] > min_point['idx']:
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
                        movement_percent = (max_point['price'] - min_point['price']) / min_point['price']
                        
                        if movement_percent >= self.min_movement:
                            
                            # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
                            movement = self._create_movement(
                                df, min_point['idx'], max_point['idx'], symbol, movement_percent
                            )
                            
                            if movement:
                                movements.append(movement)
                        
                        break  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞
            
            return movements
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []

    def _create_movement(self, df: pd.DataFrame, min_idx: int, max_idx: int, 
                        symbol: str, movement_percent: float) -> Optional[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å 9 –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
        try:
            min_row = df.iloc[min_idx]
            max_row = df.iloc[max_idx]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ç–æ—á–∫–∏ –º–∏–Ω–∏–º—É–º–∞ (–≤—Ö–æ–¥ LONG)
            min_features = self._extract_9_features(min_row)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ç–æ—á–∫–∏ –º–∞–∫—Å–∏–º—É–º–∞ (–≤—ã—Ö–æ–¥ LONG)
            max_features = self._extract_9_features(max_row)
            
            if min_features is None or max_features is None:
                return None
            
            movement = {
                'symbol': symbol,
                'min_timestamp': str(min_row.name),
                'max_timestamp': str(max_row.name),
                'min_price': min_row['close'],
                'max_price': max_row['close'],
                'movement_percent': movement_percent * 100,  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                'duration_hours': max_idx - min_idx,
                
                # 9 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ç–æ—á–∫–µ –º–∏–Ω–∏–º—É–º–∞ (—Å–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞ LONG)
                'min_features': {
                    'velocities': min_features['velocities'],
                    'accelerations': min_features['accelerations'],
                    'velocity_ratios': min_features['velocity_ratios'],
                    'distances': min_features['distances'],
                    'distance_changes': min_features['distance_changes'],
                    'angles': min_features['angles'],
                    'angle_changes': min_features['angle_changes'],
                    'ema_relationships': min_features['ema_relationships'],
                    'synchronizations': min_features['synchronizations']
                },
                
                # 9 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ —Ç–æ—á–∫–µ –º–∞–∫—Å–∏–º—É–º–∞ (—Å–∏–≥–Ω–∞–ª –≤—ã—Ö–æ–¥–∞ LONG)
                'max_features': {
                    'velocities': max_features['velocities'],
                    'accelerations': max_features['accelerations'],
                    'velocity_ratios': max_features['velocity_ratios'],
                    'distances': max_features['distances'],
                    'distance_changes': max_features['distance_changes'],
                    'angles': max_features['angles'],
                    'angle_changes': max_features['angle_changes'],
                    'ema_relationships': max_features['ema_relationships'],
                    'synchronizations': max_features['synchronizations']
                }
            }
            
            return movement
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è: {e}")
            return None

    def _extract_9_features(self, row) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            features = {
                # 1. Velocities (4 –∑–Ω–∞—á–µ–Ω–∏—è)
                'velocities': {
                    'price': float(row['price_velocity']),
                    'ema20': float(row['ema20_velocity']),
                    'ema50': float(row['ema50_velocity']),
                    'ema100': float(row['ema100_velocity'])
                },
                
                # 2. Accelerations (4 –∑–Ω–∞—á–µ–Ω–∏—è)
                'accelerations': {
                    'price': float(row['price_acceleration']),
                    'ema20': float(row['ema20_acceleration']),
                    'ema50': float(row['ema50_acceleration']),
                    'ema100': float(row['ema100_acceleration'])
                },
                
                # 3. Velocity ratios (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'velocity_ratios': {
                    'price_ema20': float(row['price_to_ema20_velocity_ratio']),
                    'price_ema50': float(row['price_to_ema50_velocity_ratio']),
                    'price_ema100': float(row['price_to_ema100_velocity_ratio'])
                },
                
                # 4. Distances (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'distances': {
                    'price_ema20': float(row['price_to_ema20_distance']),
                    'price_ema50': float(row['price_to_ema50_distance']),
                    'price_ema100': float(row['price_to_ema100_distance'])
                },
                
                # 5. Distance changes (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'distance_changes': {
                    'price_ema20': float(row['price_to_ema20_distance_change']),
                    'price_ema50': float(row['price_to_ema50_distance_change']),
                    'price_ema100': float(row['price_to_ema100_distance_change'])
                },
                
                # 6. Angles (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'angles': {
                    'ema20': float(row['ema20_angle']),
                    'ema50': float(row['ema50_angle']),
                    'ema100': float(row['ema100_angle'])
                },
                
                # 7. Angle changes (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'angle_changes': {
                    'ema20': float(row['ema20_angle_change']),
                    'ema50': float(row['ema50_angle_change']),
                    'ema100': float(row['ema100_angle_change'])
                },
                
                # 8. EMA relationships (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'ema_relationships': {
                    'ema20_ema50': float(row['ema20_to_ema50']),
                    'ema20_ema100': float(row['ema20_to_ema100']),
                    'ema50_ema100': float(row['ema50_to_ema100'])
                },
                
                # 9. Synchronizations (3 –∑–Ω–∞—á–µ–Ω–∏—è)
                'synchronizations': {
                    'price_ema20': float(row['price_ema20_sync']),
                    'price_ema50': float(row['price_ema50_sync']),
                    'price_ema100': float(row['price_ema100_sync'])
                }
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 0
            for group_name, group_data in features.items():
                for key, value in group_data.items():
                    if np.isnan(value) or np.isinf(value):
                        features[group_name][key] = 0.0
            
            return features
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None

    def save_movements(self, filename: str = "movements_database.json") -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.movements_data, f, ensure_ascii=False, indent=2)
            
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.movements_data)} –¥–≤–∏–∂–µ–Ω–∏–π –≤ {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º"""
        try:
            if not self.movements_data:
                return {}
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_movements = len(self.movements_data)
            movements_by_symbol = {}
            
            profits = []
            durations = []
            
            for movement in self.movements_data:
                symbol = movement['symbol']
                if symbol not in movements_by_symbol:
                    movements_by_symbol[symbol] = 0
                movements_by_symbol[symbol] += 1
                
                profits.append(movement['movement_percent'])
                durations.append(movement['duration_hours'])
            
            stats = {
                'total_movements': total_movements,
                'by_symbol': movements_by_symbol,
                'avg_profit_percent': np.mean(profits),
                'median_profit_percent': np.median(profits),
                'max_profit_percent': np.max(profits),
                'min_profit_percent': np.min(profits),
                'avg_duration_hours': np.mean(durations),
                'median_duration_hours': np.median(durations)
            }
            
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def _get_historical_data(self, symbol: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å 01.01.2025"""
        try:
            exchange = ccxt.binance({'enableRateLimit': True})
            
            # –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: 01.01.2025
            start_date = datetime(2025, 1, 1, 0, 0, 0)
            since = int(start_date.timestamp() * 1000)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
            all_ohlcv = []
            current_since = since
            max_per_request = 1000
            
            while True:
                ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=max_per_request)
                if not ohlcv or len(ohlcv) == 0:
                    break
                
                all_ohlcv.extend(ohlcv)
                current_since = ohlcv[-1][0] + 3600000
                
                if current_since >= exchange.milliseconds():
                    break
                
                if len(all_ohlcv) > 20000:
                    break
            
            if not all_ohlcv:
                return None
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

    def _prepare_features(self, df: pd.DataFrame) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö 27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            df['price_velocity'] = df['close'].pct_change()
            df['ema20_velocity'] = df['ema_20'].pct_change()
            df['ema50_velocity'] = df['ema_50'].pct_change()
            df['ema100_velocity'] = df['ema_100'].pct_change()
            
            # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
            df['price_acceleration'] = df['price_velocity'].pct_change()
            df['ema20_acceleration'] = df['ema20_velocity'].pct_change()
            df['ema50_acceleration'] = df['ema50_velocity'].pct_change()
            df['ema100_acceleration'] = df['ema100_velocity'].pct_change()
            
            # 3. Velocity ratios
            df['price_to_ema20_velocity_ratio'] = df['price_velocity'] / (df['ema20_velocity'] + 1e-8)
            df['price_to_ema50_velocity_ratio'] = df['price_velocity'] / (df['ema50_velocity'] + 1e-8)
            df['price_to_ema100_velocity_ratio'] = df['price_velocity'] / (df['ema100_velocity'] + 1e-8)
            
            # 4. Distance to EMAs
            df['price_to_ema20_distance'] = (df['close'] - df['ema_20']) / df['close']
            df['price_to_ema50_distance'] = (df['close'] - df['ema_50']) / df['close']
            df['price_to_ema100_distance'] = (df['close'] - df['ema_100']) / df['close']
            
            # 5. Distance change
            df['price_to_ema20_distance_change'] = df['price_to_ema20_distance'].diff()
            df['price_to_ema50_distance_change'] = df['price_to_ema50_distance'].diff()
            df['price_to_ema100_distance_change'] = df['price_to_ema100_distance'].diff()
            
            # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
            df['ema20_angle'] = np.arctan(df['ema20_velocity']) * 180 / np.pi
            df['ema50_angle'] = np.arctan(df['ema50_velocity']) * 180 / np.pi
            df['ema100_angle'] = np.arctan(df['ema100_velocity']) * 180 / np.pi
            
            # 7. Angle change
            df['ema20_angle_change'] = df['ema20_angle'].diff()
            df['ema50_angle_change'] = df['ema50_angle'].diff()
            df['ema100_angle_change'] = df['ema100_angle'].diff()
            
            # 8. EMA relationships
            df['ema20_to_ema50'] = df['ema_20'] / (df['ema_50'] + 1e-8)
            df['ema20_to_ema100'] = df['ema_20'] / (df['ema_100'] + 1e-8)
            df['ema50_to_ema100'] = df['ema_50'] / (df['ema_100'] + 1e-8)
            
            # 9. Price-EMA synchronization
            window_size = 20
            df['price_ema20_sync'] = df['close'].rolling(window_size).corr(df['ema_20'])
            df['price_ema50_sync'] = df['close'].rolling(window_size).corr(df['ema_50'])
            df['price_ema100_sync'] = df['close'].rolling(window_size).corr(df['ema_100'])
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.dropna()
            df = df.replace([np.inf, -np.inf], 0)
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
    finder = BasicPatternFinder()
    
    print("üéØ –ë–ê–ó–û–í–´–ô –ü–û–ò–°–ö–û–í–ò–ö –î–í–ò–ñ–ï–ù–ò–ô MIN‚ÜíMAX")
    print("====================================")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']
    
    # –ò—â–µ–º –≤—Å–µ –¥–≤–∏–∂–µ–Ω–∏—è
    print("üîç –®–ê–ì 1: –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –¥–≤–∏–∂–µ–Ω–∏–π...")
    if finder.find_all_movements(symbols):
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –®–ê–ì 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π...")
        stats = finder.get_statistics()
        
        print(f"üìà –í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π: {stats['total_movements']}")
        print(f"üìä –ü–æ —Å–∏–º–≤–æ–ª–∞–º: {stats['by_symbol']}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {stats['avg_profit_percent']:.2f}%")
        print(f"üìè –ú–µ–¥–∏–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['median_profit_percent']:.2f}%")
        print(f"üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['max_profit_percent']:.2f}%")
        print(f"‚è∞ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['avg_duration_hours']:.1f} —á–∞—Å–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüíæ –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        finder.save_movements("movements_database.json")
        
        print("\n‚úÖ –ì–û–¢–û–í–û! –ë–∞–∑–∞ –¥–≤–∏–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞.")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ 9 –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è")
