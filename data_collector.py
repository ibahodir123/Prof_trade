#!/usr/bin/env python3
"""
–°–±–æ—Ä—â–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å 1 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞
"""
import ccxt
import pandas as pd
import numpy as np
import asyncio
import aiohttp
import time
from datetime import datetime, timedelta
import json
import os
from typing import List, Dict, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data_collection.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HistoricalDataCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
    
    def __init__(self):
        self.exchange = ccxt.binance({
            'options': {'adjustForTimeDifference': True}
        })
        self.start_date = datetime(2025, 1, 1)
        self.end_date = datetime.now()
        self.timeframe = '1h'  # 1 —á–∞—Å
        self.limit = 1000  # –ú–∞–∫—Å–∏–º—É–º —Å–≤–µ—á–µ–π –∑–∞ –∑–∞–ø—Ä–æ—Å
        
    def get_all_usdt_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ USDT –ø–∞—Ä—ã"""
        try:
            markets = self.exchange.load_markets()
            usdt_pairs = []
            
            for symbol, market in markets.items():
                if (market['quote'] == 'USDT' and 
                    market['active'] and 
                    market['type'] == 'spot' and
                    not market['info'].get('isSpotTradingAllowed', True) == False):
                    usdt_pairs.append(symbol)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(usdt_pairs)} USDT –ø–∞—Ä")
            return sorted(usdt_pairs)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {e}")
            return []
    
    def get_historical_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
            since = int(start_date.timestamp() * 1000)
            until = int(end_date.timestamp() * 1000)
            
            all_data = []
            current_since = since
            
            while current_since < until:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
                    ohlcv = self.exchange.fetch_ohlcv(
                        symbol, 
                        self.timeframe, 
                        since=current_since, 
                        limit=self.limit
                    )
                    
                    if not ohlcv:
                        break
                        
                    all_data.extend(ohlcv)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
                    current_since = ohlcv[-1][0] + 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                    time.sleep(0.1)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} —Å {current_since}: {e}")
                    break
            
            if not all_data:
                return pd.DataFrame()
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
            df = df[(df.index >= start_date) & (df.index <= end_date)]
            
            logger.info(f"‚úÖ {symbol}: –ø–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π —Å {df.index[0]} –ø–æ {df.index[-1]}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        if df.empty:
            return df
            
        try:
            # EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))
            
            # Bollinger Bands
            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
            df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
            
            # MACD
            exp1 = df['close'].ewm(span=12).mean()
            exp2 = df['close'].ewm(span=26).mean()
            df['macd'] = exp1 - exp2
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # Volume indicators
            df['volume_ma'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_ma']
            
            # Price momentum
            df['price_change_1h'] = df['close'].pct_change(1)
            df['price_change_4h'] = df['close'].pct_change(4)
            df['price_change_24h'] = df['close'].pct_change(24)
            
            # Volatility
            df['volatility'] = df['close'].rolling(window=24).std()
            
            return df.dropna()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def identify_shooting_stars(self, df: pd.DataFrame, lookforward_hours: int = 24) -> pd.DataFrame:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç '—Å—Ç—Ä–µ–ª—è—é—â–∏–µ' –º–æ–Ω–µ—Ç—ã - —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–ª–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤ –±—É–¥—É—â–µ–º"""
        if df.empty or len(df) < lookforward_hours:
            return df
            
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è "—Å—Ç—Ä–µ–ª—è—é—â–∏—Ö" –º–æ–Ω–µ—Ç
            price_threshold = 0.15  # 15% —Ä–æ—Å—Ç
            volume_threshold = 2.0  # 2x –æ–±—ä–µ–º
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            df['future_price_max'] = df['close'].rolling(window=lookforward_hours, min_periods=1).max()
            df['future_price_change'] = (df['future_price_max'] / df['close'] - 1) * 100
            
            df['future_volume_max'] = df['volume'].rolling(window=lookforward_hours, min_periods=1).max()
            df['future_volume_avg'] = df['volume'].rolling(window=lookforward_hours, min_periods=1).mean()
            df['future_volume_ratio'] = df['future_volume_max'] / df['future_volume_avg']
            
            # –ë–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: —Å—Ç—Ä–µ–ª—è—é—â–∞—è –º–æ–Ω–µ—Ç–∞ –∏–ª–∏ –Ω–µ—Ç
            df['is_shooting_star'] = (
                (df['future_price_change'] >= price_threshold) & 
                (df['future_volume_ratio'] >= volume_threshold)
            ).astype(int)
            
            # –ú—É–ª—å—Ç–∏–∫–ª–∞—Å—Å–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–∏–ª–µ —Ä–æ—Å—Ç–∞
            df['growth_category'] = 0  # –ë–µ–∑ —Ä–æ—Å—Ç–∞
            df.loc[df['future_price_change'] >= 5, 'growth_category'] = 1    # –ú–∞–ª—ã–π —Ä–æ—Å—Ç (5-15%)
            df.loc[df['future_price_change'] >= 15, 'growth_category'] = 2   # –°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç (15-30%)
            df.loc[df['future_price_change'] >= 30, 'growth_category'] = 3   # –ë–æ–ª—å—à–æ–π —Ä–æ—Å—Ç (30-50%)
            df.loc[df['future_price_change'] >= 50, 'growth_category'] = 4   # –û–≥—Ä–æ–º–Ω—ã–π —Ä–æ—Å—Ç (50%+)
            
            logger.info(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {df['is_shooting_star'].sum()}")
            logger.info(f"üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–æ—Å—Ç–∞: {df['growth_category'].value_counts().to_dict()}")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {e}")
            return df
    
    def collect_all_data(self, max_pairs: int = None) -> Dict[str, pd.DataFrame]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        pairs = self.get_all_usdt_pairs()
        if max_pairs:
            pairs = pairs[:max_pairs]
        
        all_data = {}
        successful = 0
        failed = 0
        
        for i, pair in enumerate(pairs):
            try:
                logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {pair} ({i+1}/{len(pairs)})")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                df = self.get_historical_data(pair, self.start_date, self.end_date)
                
                if not df.empty:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    df = self.calculate_technical_indicators(df)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã
                    df = self.identify_shooting_stars(df)
                    
                    if not df.empty:
                        all_data[pair] = df
                        successful += 1
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if successful % 10 == 0:
                            self.save_data(all_data, f"data_batch_{successful}.json")
                    else:
                        failed += 1
                else:
                    failed += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {pair}: {e}")
                failed += 1
                continue
        
        logger.info(f"‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –Ω–µ—É–¥–∞—á–Ω–æ")
        return all_data
    
    def save_data(self, data: Dict[str, pd.DataFrame], filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        if not filename:
            filename = f"historical_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON
            json_data = {}
            for symbol, df in data.items():
                json_data[symbol] = {
                    'data': df.to_dict('records'),
                    'index': df.index.strftime('%Y-%m-%d %H:%M:%S').tolist(),
                    'columns': df.columns.tolist()
                }
            
            with open(filename, 'w') as f:
                json.dump(json_data, f, indent=2)
            
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def load_data(self, filename: str) -> Dict[str, pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r') as f:
                json_data = json.load(f)
            
            data = {}
            for symbol, symbol_data in json_data.items():
                df = pd.DataFrame(symbol_data['data'])
                df.index = pd.to_datetime(symbol_data['index'])
                data[symbol] = df
            
            logger.info(f"üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {filename}: {len(data)} –º–æ–Ω–µ—Ç")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    collector = HistoricalDataCollector()
    
    print("üéØ –°–ë–û–† –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò")
    print("=" * 60)
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {collector.start_date.strftime('%Y-%m-%d')} - {collector.end_date.strftime('%Y-%m-%d')}")
    print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º: {collector.timeframe}")
    print("=" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    data = collector.collect_all_data(max_pairs=50)  # –ù–∞—á–Ω–µ–º —Å 50 –º–æ–Ω–µ—Ç
    
    if data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        collector.save_data(data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = sum(len(df) for df in data.values())
        shooting_stars = sum(df['is_shooting_star'].sum() for df in data.values() if 'is_shooting_star' in df.columns)
        
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–û–†–ê:")
        print(f"   - –ú–æ–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data)}")
        print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}")
        print(f"   - –°—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {shooting_stars:,}")
        print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö: {(shooting_stars/total_records*100):.2f}%")
        
        return data
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None

if __name__ == "__main__":
    data = main()


