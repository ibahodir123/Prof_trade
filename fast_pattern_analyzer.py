#!/usr/bin/env python3
"""
–ê–ù–ê–õ–ò–ó–ê–¢–û–† –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô
–ò—â–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ 809 –¥–≤–∏–∂–µ–Ω–∏—è—Ö min‚Üímax
"""

import json
import numpy as np
from typing import Dict, List

class FastPatternAnalyzer:
    def __init__(self):
        self.movements = []
        
    def load_data(self):
        """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open('movements_database.json', 'r') as f:
                self.movements = json.load(f)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.movements)} –¥–≤–∏–∂–µ–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def analyze_fast(self):
        """–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print("\nüîç –ë–´–°–¢–†–´–ô –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í")
        print("=" * 30)
        
        # –ì—Ä—É–ø–ø—ã –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        small = [m for m in self.movements if m['movement_percent'] < 3]
        medium = [m for m in self.movements if 3 <= m['movement_percent'] < 7]
        large = [m for m in self.movements if m['movement_percent'] >= 7]
        
        print(f"üí∞ –ú–∞–ª—ã–µ (1-3%): {len(small)}")
        print(f"üìà –°—Ä–µ–¥–Ω–∏–µ (3-7%): {len(medium)}")
        print(f"üöÄ –ö—Ä—É–ø–Ω—ã–µ (7%+): {len(large)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã (—Å–∞–º–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ–π)
        if medium:
            self._analyze_group(medium, "–°–†–ï–î–ù–ò–ï")
        
        # –ê–Ω–∞–ª–∏–∑ –∫—Ä—É–ø–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
        if large:
            self._analyze_group(large, "–ö–†–£–ü–ù–´–ï")
    
    def _analyze_group(self, group, name):
        """–ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã –¥–≤–∏–∂–µ–Ω–∏–π"""
        print(f"\nüéØ –ì–†–£–ü–ü–ê {name} ({len(group)} –¥–≤–∏–∂–µ–Ω–∏–π):")
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ MIN —Ç–æ—á–µ–∫
        velocities = []
        angles_20 = []
        angles_50 = []
        sync = []
        
        for m in group:
            min_f = m['min_features']
            
            # –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
            if 'velocities' in min_f and 'price' in min_f['velocities']:
                velocities.append(min_f['velocities']['price'])
            
            # –£–≥–ª—ã EMA
            if 'angles' in min_f:
                if 'ema20' in min_f['angles']:
                    angles_20.append(min_f['angles']['ema20'])
                if 'ema50' in min_f['angles']:
                    angles_50.append(min_f['angles']['ema50'])
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
            if 'synchronizations' in min_f and 'price_ema20' in min_f['synchronizations']:
                sync.append(min_f['synchronizations']['price_ema20'])
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if velocities:
            avg_vel = np.mean(velocities)
            std_vel = np.std(velocities)
            print(f"  ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã: {avg_vel:.6f} ¬± {std_vel:.6f}")
        
        if angles_20:
            avg_a20 = np.mean(angles_20)
            std_a20 = np.std(angles_20)
            print(f"  üìê –£–≥–æ–ª EMA20: {avg_a20:.1f}¬∞ ¬± {std_a20:.1f}¬∞")
        
        if angles_50:
            avg_a50 = np.mean(angles_50)
            std_a50 = np.std(angles_50)
            print(f"  üìê –£–≥–æ–ª EMA50: {avg_a50:.1f}¬∞ ¬± {std_a50:.1f}¬∞")
        
        if sync:
            avg_sync = np.mean(sync)
            std_sync = np.std(sync)
            print(f"  üîó –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {avg_sync:.3f} ¬± {std_sync:.3f}")
    
    def create_rules(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª"""
        print("\nüéØ –¢–û–†–ì–û–í–´–ï –ü–†–ê–í–ò–õ–ê:")
        print("-" * 25)
        
        # –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω
        medium = [m for m in self.movements if 3 <= m['movement_percent'] < 7]
        
        if not medium:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        velocities = []
        angles_20 = []
        sync = []
        
        for m in medium:
            min_f = m['min_features']
            
            if 'velocities' in min_f and 'price' in min_f['velocities']:
                velocities.append(min_f['velocities']['price'])
            
            if 'angles' in min_f and 'ema20' in min_f['angles']:
                angles_20.append(min_f['angles']['ema20'])
            
            if 'synchronizations' in min_f and 'price_ema20' in min_f['synchronizations']:
                sync.append(min_f['synchronizations']['price_ema20'])
        
        print("üìà –°–ò–ì–ù–ê–õ–´ –í–•–û–î–ê (–¥–ª—è 3-7% –ø—Ä–∏–±—ã–ª–∏):")
        
        if velocities:
            avg = np.mean(velocities)
            std = np.std(velocities)
            print(f"   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã: {avg:.6f} ¬± {std:.6f}")
        
        if angles_20:
            avg = np.mean(angles_20)
            std = np.std(angles_20)
            print(f"   ‚Ä¢ –£–≥–æ–ª EMA20: {avg:.1f}¬∞ ¬± {std:.1f}¬∞")
        
        if sync:
            avg = np.mean(sync)
            std = np.std(sync)
            print(f"   ‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {avg:.3f} ¬± {std:.3f}")

if __name__ == "__main__":
    analyzer = FastPatternAnalyzer()
    
    if analyzer.load_data():
        analyzer.analyze_fast()
        analyzer.create_rules()
        print("\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
