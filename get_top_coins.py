#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-50 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö USDT –ø–∞—Ä —Å Binance
–ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞
"""

import ccxt
import pandas as pd
from datetime import datetime

def get_top_usdt_pairs(count=50):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø USDT –ø–∞—Ä—ã –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤"""
    try:
        print(f"üîç –ü–æ–ª—É—á–∞—é —Ç–æ–ø-{count} USDT –ø–∞—Ä —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance –±–µ–∑ API –∫–ª—é—á–µ–π (–ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'rateLimit': 1200,
            'enableRateLimit': True,
        })
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä—ã–Ω–∫–∏
        markets = exchange.load_markets()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ä—ã (–æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤)
        tickers = exchange.fetch_tickers()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã —Å –æ–±—ä–µ–º–æ–º > 0
        usdt_pairs = []
        for symbol, ticker in tickers.items():
            if (symbol.endswith('/USDT') and 
                ticker['quoteVolume'] is not None and 
                ticker['quoteVolume'] > 0):
                
                usdt_pairs.append({
                    'symbol': symbol,
                    'volume_24h': ticker['quoteVolume'],
                    'price': ticker['last'],
                    'change_24h': ticker['percentage']
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        usdt_pairs.sort(key=lambda x: x['volume_24h'], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø N –ø–∞—Ä
        top_pairs = usdt_pairs[:count]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(top_pairs)} –∞–∫—Ç–∏–≤–Ω—ã—Ö USDT –ø–∞—Ä")
        print("\nüìä –¢–æ–ø-10 –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤:")
        for i, pair in enumerate(top_pairs[:10], 1):
            volume_m = pair['volume_24h'] / 1_000_000
            print(f"{i:2d}. {pair['symbol']:<12} - ${volume_m:,.0f}M ({pair['change_24h']:+.1f}%)")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        symbols = [pair['symbol'] for pair in top_pairs]
        
        with open('top_coins_list.txt', 'w') as f:
            f.write(f"# –¢–æ–ø-{count} USDT –ø–∞—Ä –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤ –Ω–∞ Binance\n")
            f.write(f"# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            for symbol in symbols:
                f.write(f"{symbol}\n")
        
        print(f"\nüíæ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ top_coins_list.txt")
        
        return symbols
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-50 –º–æ–Ω–µ—Ç
    top_coins = get_top_usdt_pairs(50)
    
    if top_coins:
        print(f"\nüöÄ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(top_coins)} –º–æ–Ω–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python retrain_models.py")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç")