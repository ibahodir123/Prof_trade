#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç: —Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å (–æ–±—É—á–µ–Ω–Ω—É—é –Ω–∞ 2020-2024) –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import pickle
import json
from typing import Dict, List, Any
import warnings
warnings.filterwarnings('ignore')

class HistoricalBacktest:
    def __init__(self):
        self.test_start = datetime(2025, 1, 1)
        self.test_end = datetime.now()
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        
        self.initial_balance = 1000.0
        self.current_balance = self.initial_balance
        self.position_size_percent = 0.1
        self.max_positions = 3
        
        self.trades = []
        self.positions = {}
        
        self.model = None
        self.feature_names = None
        
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            print("üß† –ó–∞–≥—Ä—É–∂–∞—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å...")
            
            with open('historical_model_2020_2024.pkl', 'rb') as f:
                self.model = pickle.load(f)
            
            with open('historical_feature_names.pkl', 'rb') as f:
                self.feature_names = pickle.load(f)
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(self.feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def get_test_data(self, symbol: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} –∑–∞ 2025 –≥–æ–¥...")
            exchange = ccxt.binance()
            since = int(self.test_start.timestamp() * 1000)
            end_ts = int(self.test_end.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    def prepare_ml_features(self, df: pd.DataFrame, symbol: str) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 27 ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (—Ç–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ trainer)"""
        try:
            if len(df) < 100:
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            latest = df.iloc[-1]
            prev = df.iloc[-2]
            
            # 1. Velocity –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            price_velocity = (latest['close'] - prev['close']) / prev['close']
            ema20_velocity = (latest['ema_20'] - prev['ema_20']) / prev['ema_20']
            ema50_velocity = (latest['ema_50'] - prev['ema_50']) / prev['ema_50']
            
            # 2. Acceleration –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)  
            price_accel = price_velocity - ((prev['close'] - df.iloc[-3]['close']) / df.iloc[-3]['close'])
            ema20_accel = ema20_velocity - ((prev['ema_20'] - df.iloc[-3]['ema_20']) / df.iloc[-3]['ema_20'])
            ema50_accel = ema50_velocity - ((prev['ema_50'] - df.iloc[-3]['ema_50']) / df.iloc[-3]['ema_50'])
            
            # 3. Velocity Ratios –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            velocity_ratio_20_50 = ema20_velocity / ema50_velocity if ema50_velocity != 0 else 0
            velocity_ratio_price_20 = price_velocity / ema20_velocity if ema20_velocity != 0 else 0
            velocity_ratio_price_50 = price_velocity / ema50_velocity if ema50_velocity != 0 else 0
            
            # 4. Distance to EMAs –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            distance_to_ema20 = (latest['close'] - latest['ema_20']) / latest['ema_20']
            distance_to_ema50 = (latest['close'] - latest['ema_50']) / latest['ema_50']
            distance_to_ema100 = (latest['close'] - latest['ema_100']) / latest['ema_100']
            
            # 5. Distance Changes –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            prev_dist_20 = (prev['close'] - prev['ema_20']) / prev['ema_20']
            prev_dist_50 = (prev['close'] - prev['ema_50']) / prev['ema_50']
            prev_dist_100 = (prev['close'] - prev['ema_100']) / prev['ema_100']
            
            distance_change_20 = distance_to_ema20 - prev_dist_20
            distance_change_50 = distance_to_ema50 - prev_dist_50
            distance_change_100 = distance_to_ema100 - prev_dist_100
            
            # 6. EMA Angles –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            ema20_angle = (latest['ema_20'] - df.iloc[-10]['ema_20']) / df.iloc[-10]['ema_20']
            ema50_angle = (latest['ema_50'] - df.iloc[-10]['ema_50']) / df.iloc[-10]['ema_50']
            ema100_angle = (latest['ema_100'] - df.iloc[-10]['ema_100']) / df.iloc[-10]['ema_100']
            
            # 7. Angle Changes –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            prev_ema20_angle = (prev['ema_20'] - df.iloc[-11]['ema_20']) / df.iloc[-11]['ema_20']
            prev_ema50_angle = (prev['ema_50'] - df.iloc[-11]['ema_50']) / df.iloc[-11]['ema_50']
            prev_ema100_angle = (prev['ema_100'] - df.iloc[-11]['ema_100']) / df.iloc[-11]['ema_100']
            
            ema20_angle_change = ema20_angle - prev_ema20_angle
            ema50_angle_change = ema50_angle - prev_ema50_angle
            ema100_angle_change = ema100_angle - prev_ema100_angle
            
            # 8. EMA Relationships –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            ema20_vs_50 = (latest['ema_20'] - latest['ema_50']) / latest['ema_50']
            ema50_vs_100 = (latest['ema_50'] - latest['ema_100']) / latest['ema_100']
            ema20_vs_100 = (latest['ema_20'] - latest['ema_100']) / latest['ema_100']
            
            # 9. Synchronization –≥—Ä—É–ø–ø–∞ (6 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
            price_ema20_sync = 1 if (price_velocity > 0) == (ema20_velocity > 0) else 0
            price_ema50_sync = 1 if (price_velocity > 0) == (ema50_velocity > 0) else 0
            ema20_ema50_sync = 1 if (ema20_velocity > 0) == (ema50_velocity > 0) else 0
            all_up_sync = 1 if all([price_velocity > 0, ema20_velocity > 0, ema50_velocity > 0]) else 0
            all_down_sync = 1 if all([price_velocity < 0, ema20_velocity < 0, ema50_velocity < 0]) else 0
            mixed_signals = 1 if len(set([price_velocity > 0, ema20_velocity > 0, ema50_velocity > 0])) > 1 else 0
            
            features = {
                # Velocity –≥—Ä—É–ø–ø–∞
                'price_velocity': price_velocity,
                'ema20_velocity': ema20_velocity,
                'ema50_velocity': ema50_velocity,
                
                # Acceleration –≥—Ä—É–ø–ø–∞
                'price_acceleration': price_accel,
                'ema20_acceleration': ema20_accel,
                'ema50_acceleration': ema50_accel,
                
                # Velocity Ratios –≥—Ä—É–ø–ø–∞
                'velocity_ratio_20_50': velocity_ratio_20_50,
                'velocity_ratio_price_20': velocity_ratio_price_20,
                'velocity_ratio_price_50': velocity_ratio_price_50,
                
                # Distance to EMAs –≥—Ä—É–ø–ø–∞
                'distance_to_ema20': distance_to_ema20,
                'distance_to_ema50': distance_to_ema50,
                'distance_to_ema100': distance_to_ema100,
                
                # Distance Changes –≥—Ä—É–ø–ø–∞
                'distance_change_20': distance_change_20,
                'distance_change_50': distance_change_50,
                'distance_change_100': distance_change_100,
                
                # EMA Angles –≥—Ä—É–ø–ø–∞
                'ema20_angle': ema20_angle,
                'ema50_angle': ema50_angle,
                'ema100_angle': ema100_angle,
                
                # Angle Changes –≥—Ä—É–ø–ø–∞
                'ema20_angle_change': ema20_angle_change,
                'ema50_angle_change': ema50_angle_change,
                'ema100_angle_change': ema100_angle_change,
                
                # EMA Relationships –≥—Ä—É–ø–ø–∞
                'ema20_vs_50': ema20_vs_50,
                'ema50_vs_100': ema50_vs_100,
                'ema20_vs_100': ema20_vs_100,
                
                # Synchronization –≥—Ä—É–ø–ø–∞
                'price_ema20_sync': price_ema20_sync,
                'price_ema50_sync': price_ema50_sync,
                'ema20_ema50_sync': ema20_ema50_sync,
                'all_up_sync': all_up_sync,
                'all_down_sync': all_down_sync,
                'mixed_signals': mixed_signals
            }
            
            return features
            
        except Exception as e:
            return None
    
    def predict_with_model(self, features: dict) -> Dict[str, Any]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ–∫—Ç–æ—Ä
            feature_vector = []
            for name in self.feature_names:
                if name in features:
                    value = features[name]
                    if np.isnan(value) or np.isinf(value):
                        value = 0.0
                    feature_vector.append(value)
                else:
                    feature_vector.append(0.0)
            
            feature_vector = np.array(feature_vector).reshape(1, -1)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.model.predict(feature_vector)[0]
            probabilities = self.model.predict_proba(feature_vector)[0]
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
            class_names = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)']
            
            result = {
                'prediction': class_names[prediction],
                'probabilities': {
                    'small': probabilities[0],
                    'medium': probabilities[1], 
                    'large': probabilities[2]
                }
            }
            
            return result
            
        except Exception as e:
            return None
    
    def analyze_signal_for_backtest(self, symbol: str, df: pd.DataFrame, current_idx: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            historical_data = df.iloc[:current_idx + 1].copy()
            if len(historical_data) < 100:
                return {'signal': 'WAIT', 'confidence': 0}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.prepare_ml_features(historical_data, symbol)
            if not features:
                return {'signal': 'WAIT', 'confidence': 0}
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.predict_with_model(features)
            if not prediction:
                return {'signal': 'WAIT', 'confidence': 0}
            
            probabilities = prediction['probabilities']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = 'WAIT'
            confidence = 0
            
            medium_prob = probabilities['medium']
            large_prob = probabilities['large']
            
            # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
            if medium_prob > 0.4 or large_prob > 0.3:
                signal = 'LONG'
                confidence = int((medium_prob + large_prob) * 100)
            
            return {
                'signal': signal,
                'confidence': confidence,
                'price': float(historical_data.iloc[-1]['close']),
                'prediction': prediction['prediction'],
                'probabilities': probabilities
            }
            
        except Exception as e:
            return {'signal': 'WAIT', 'confidence': 0}
    
    def run_backtest(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        print("\\nüß™ –ó–ê–ü–£–°–ö –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ê")
        print("üìÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å (2020-2024) –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞")
        print("=" * 60)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        signals_stats = {
            'total_signals': 0,
            'long_signals': 0,
            'wait_signals': 0,
            'trades_opened': 0
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        historical_data = {}
        for symbol in self.symbols:
            df = self.get_test_data(symbol)
            if not df.empty:
                historical_data[symbol] = df
            time.sleep(1)
        
        if not historical_data:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        all_timestamps = set()
        for df in historical_data.values():
            all_timestamps.update(df.index)
        timestamps = sorted(list(all_timestamps))
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(timestamps)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫...")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
        progress_counter = 0
        for i, timestamp in enumerate(timestamps):
            progress_counter += 1
            
            if progress_counter % 500 == 0:
                progress = (i / len(timestamps)) * 100
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –°–¥–µ–ª–æ–∫: {len(self.trades)} | –ë–∞–ª–∞–Ω—Å: ${self.current_balance:.2f}")
            
            for symbol, df in historical_data.items():
                if timestamp not in df.index:
                    continue
                
                current_price = float(df.loc[timestamp, 'close'])
                current_idx = df.index.get_loc(timestamp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.positions:
                    position = self.positions[symbol]
                    should_close = False
                    
                    if position['side'] == 'LONG':
                        if current_price >= position['take_profit'] or current_price <= position['stop_loss']:
                            should_close = True
                    
                    if should_close:
                        # –†–∞—Å—á–µ—Ç PnL
                        pnl = (current_price - position['entry_price']) * position['size']
                        self.current_balance += pnl
                        
                        self.trades.append({
                            'symbol': symbol,
                            'side': position['side'],
                            'entry_price': position['entry_price'],
                            'exit_price': current_price,
                            'pnl': pnl,
                            'pnl_percent': (pnl / (position['entry_price'] * position['size'])) * 100,
                            'timestamp': timestamp
                        })
                        
                        del self.positions[symbol]
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if symbol not in self.positions and len(self.positions) < self.max_positions:
                    signal_data = self.analyze_signal_for_backtest(symbol, df, current_idx)
                    signals_stats['total_signals'] += 1
                    
                    if signal_data['signal'] == 'LONG':
                        signals_stats['long_signals'] += 1
                    else:
                        signals_stats['wait_signals'] += 1
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    if signal_data['signal'] == 'LONG' and signal_data['confidence'] >= 50:
                        position_value = self.current_balance * self.position_size_percent
                        size = position_value / current_price
                        
                        # TP/SL —É—Ä–æ–≤–Ω–∏
                        if signal_data['confidence'] >= 70:
                            profit_pct, loss_pct = 0.05, 0.02  # 5% –ø—Ä–∏–±—ã–ª—å, 2% —É–±—ã—Ç–æ–∫
                        else:
                            profit_pct, loss_pct = 0.04, 0.015  # 4% –ø—Ä–∏–±—ã–ª—å, 1.5% —É–±—ã—Ç–æ–∫
                        
                        take_profit = current_price * (1 + profit_pct)
                        stop_loss = current_price * (1 - loss_pct)
                        
                        self.positions[symbol] = {
                            'side': 'LONG',
                            'entry_price': current_price,
                            'size': size,
                            'take_profit': take_profit,
                            'stop_loss': stop_loss,
                            'timestamp': timestamp
                        }
                        signals_stats['trades_opened'] += 1
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        for symbol in list(self.positions.keys()):
            last_price = float(historical_data[symbol].iloc[-1]['close'])
            position = self.positions[symbol]
            
            pnl = (last_price - position['entry_price']) * position['size']
            self.current_balance += pnl
            
            self.trades.append({
                'symbol': symbol,
                'side': position['side'],
                'entry_price': position['entry_price'],
                'exit_price': last_price,
                'pnl': pnl,
                'pnl_percent': (pnl / (position['entry_price'] * position['size'])) * 100,
                'timestamp': timestamps[-1]
            })
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–ì–ù–ê–õ–û–í:")
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_stats['total_signals']}")
        print(f"   LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_stats['long_signals']}")
        print(f"   WAIT —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_stats['wait_signals']}")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {signals_stats['trades_opened']}")
        
        # –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not self.trades:
            return {
                'error': '–°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ',
                'signals_stats': signals_stats
            }
        
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t['pnl'] > 0])
        win_rate = (winning_trades / total_trades) * 100
        total_return = ((self.current_balance - self.initial_balance) / self.initial_balance) * 100
        
        return {
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'win_rate': win_rate,
            'initial_balance': self.initial_balance,
            'final_balance': self.current_balance,
            'total_return': total_return,
            'total_pnl': self.current_balance - self.initial_balance,
            'trades': self.trades,
            'signals_stats': signals_stats
        }

    def print_results(self, results: Dict[str, Any]):
        """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if 'error' in results:
            print(f"\\n‚ùå {results['error']}")
            if 'signals_stats' in results:
                stats = results['signals_stats']
                print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
                print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_signals']}")
                print(f"   LONG: {stats['long_signals']}")
                print(f"   –û—Ç–∫—Ä—ã—Ç–æ –ø–æ–∑–∏—Ü–∏–π: {stats['trades_opened']}")
            return
        
        print(f"\\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ê")
        print("=" * 50)
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.test_start.date()} - {self.test_end.date()}")
        print(f"üß† –ú–æ–¥–µ–ª—å: –û–±—É—á–µ–Ω–∞ –Ω–∞ 2020-2024, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 2025")
        print()
        print(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${results['initial_balance']:,.2f}")
        print(f"üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${results['final_balance']:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return']:+.2f}%")
        print(f"üí∏ P&L: ${results['total_pnl']:+,.2f}")
        print()
        print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['total_trades']}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {results['winning_trades']} ({results['win_rate']:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {results['total_trades'] - results['winning_trades']} ({100-results['win_rate']:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º
        if results['trades']:
            symbol_stats = {}
            for trade in results['trades']:
                symbol = trade['symbol']
                if symbol not in symbol_stats:
                    symbol_stats[symbol] = {'trades': 0, 'pnl': 0, 'wins': 0}
                symbol_stats[symbol]['trades'] += 1
                symbol_stats[symbol]['pnl'] += trade['pnl']
                if trade['pnl'] > 0:
                    symbol_stats[symbol]['wins'] += 1
            
            print(f"\\nüèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–Ω–µ—Ç–∞–º:")
            for symbol, stats in sorted(symbol_stats.items(), key=lambda x: x[1]['pnl'], reverse=True):
                wr = (stats['wins'] / stats['trades']) * 100 if stats['trades'] > 0 else 0
                print(f"   {symbol}: {stats['trades']} —Å–¥–µ–ª–æ–∫, ${stats['pnl']:+.2f}, WR: {wr:.1f}%")

if __name__ == "__main__":
    backtest = HistoricalBacktest()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if not backtest.load_model():
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ historical_ml_trainer.py –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    results = backtest.run_backtest()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    backtest.print_results(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('historical_backtest_results.json', 'w', encoding='utf-8') as f:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è JSON
        results_for_json = results.copy()
        if 'trades' in results_for_json:
            for trade in results_for_json['trades']:
                if 'timestamp' in trade:
                    trade['timestamp'] = trade['timestamp'].isoformat()
        json.dump(results_for_json, f, ensure_ascii=False, indent=2)
    
    print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'historical_backtest_results.json'")




