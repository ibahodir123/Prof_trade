#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ML Trainer –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
–û–±—É—á–µ–Ω–∏–µ: 2020-2024 –≥–æ–¥—ã
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 2025 –≥–æ–¥
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import pickle
import json
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import warnings
warnings.filterwarnings('ignore')

class HistoricalMLTrainer:
    def __init__(self):
        self.train_start = datetime(2020, 1, 1)
        self.train_end = datetime(2024, 12, 31)
        self.test_start = datetime(2025, 1, 1)
        self.test_end = datetime.now()
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        self.movements_database = []
        
    def get_historical_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å {start_date.date()} –ø–æ {end_date.date()}")
            exchange = ccxt.binance()
            since = int(start_date.timestamp() * 1000)
            end_ts = int(end_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    # –ù–µ –ø—Ä–µ–≤—ã—à–∞–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)  # –ü–∞—É–∑–∞ –¥–ª—è API
                    
                    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_ohlcv)} —Å–≤–µ—á–µ–π...")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    def prepare_ml_features(self, df: pd.DataFrame, symbol: str) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 27 ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            if len(df) < 100:
                return None
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            latest = df.iloc[-1]
            prev = df.iloc[-2]
            
            # 1. Velocity –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            price_velocity = (latest['close'] - prev['close']) / prev['close']
            ema20_velocity = (latest['ema_20'] - prev['ema_20']) / prev['ema_20']
            ema50_velocity = (latest['ema_50'] - prev['ema_50']) / prev['ema_50']
            
            # 2. Acceleration –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)  
            price_accel = price_velocity - ((prev['close'] - df.iloc[-3]['close']) / df.iloc[-3]['close'])
            ema20_accel = ema20_velocity - ((prev['ema_20'] - df.iloc[-3]['ema_20']) / df.iloc[-3]['ema_20'])
            ema50_accel = ema50_velocity - ((prev['ema_50'] - df.iloc[-3]['ema_50']) / df.iloc[-3]['ema_50'])
            
            # 3. Velocity Ratios –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            velocity_ratio_20_50 = ema20_velocity / ema50_velocity if ema50_velocity != 0 else 0
            velocity_ratio_price_20 = price_velocity / ema20_velocity if ema20_velocity != 0 else 0
            velocity_ratio_price_50 = price_velocity / ema50_velocity if ema50_velocity != 0 else 0
            
            # 4. Distance to EMAs –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            distance_to_ema20 = (latest['close'] - latest['ema_20']) / latest['ema_20']
            distance_to_ema50 = (latest['close'] - latest['ema_50']) / latest['ema_50']
            distance_to_ema100 = (latest['close'] - latest['ema_100']) / latest['ema_100']
            
            # 5. Distance Changes –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            prev_dist_20 = (prev['close'] - prev['ema_20']) / prev['ema_20']
            prev_dist_50 = (prev['close'] - prev['ema_50']) / prev['ema_50']
            prev_dist_100 = (prev['close'] - prev['ema_100']) / prev['ema_100']
            
            distance_change_20 = distance_to_ema20 - prev_dist_20
            distance_change_50 = distance_to_ema50 - prev_dist_50
            distance_change_100 = distance_to_ema100 - prev_dist_100
            
            # 6. EMA Angles –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            ema20_angle = (latest['ema_20'] - df.iloc[-10]['ema_20']) / df.iloc[-10]['ema_20']
            ema50_angle = (latest['ema_50'] - df.iloc[-10]['ema_50']) / df.iloc[-10]['ema_50']
            ema100_angle = (latest['ema_100'] - df.iloc[-10]['ema_100']) / df.iloc[-10]['ema_100']
            
            # 7. Angle Changes –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            prev_ema20_angle = (prev['ema_20'] - df.iloc[-11]['ema_20']) / df.iloc[-11]['ema_20']
            prev_ema50_angle = (prev['ema_50'] - df.iloc[-11]['ema_50']) / df.iloc[-11]['ema_50']
            prev_ema100_angle = (prev['ema_100'] - df.iloc[-11]['ema_100']) / df.iloc[-11]['ema_100']
            
            ema20_angle_change = ema20_angle - prev_ema20_angle
            ema50_angle_change = ema50_angle - prev_ema50_angle
            ema100_angle_change = ema100_angle - prev_ema100_angle
            
            # 8. EMA Relationships –≥—Ä—É–ø–ø–∞ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            ema20_vs_50 = (latest['ema_20'] - latest['ema_50']) / latest['ema_50']
            ema50_vs_100 = (latest['ema_50'] - latest['ema_100']) / latest['ema_100']
            ema20_vs_100 = (latest['ema_20'] - latest['ema_100']) / latest['ema_100']
            
            # 9. Synchronization –≥—Ä—É–ø–ø–∞ (6 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
            price_ema20_sync = 1 if (price_velocity > 0) == (ema20_velocity > 0) else 0
            price_ema50_sync = 1 if (price_velocity > 0) == (ema50_velocity > 0) else 0
            ema20_ema50_sync = 1 if (ema20_velocity > 0) == (ema50_velocity > 0) else 0
            all_up_sync = 1 if all([price_velocity > 0, ema20_velocity > 0, ema50_velocity > 0]) else 0
            all_down_sync = 1 if all([price_velocity < 0, ema20_velocity < 0, ema50_velocity < 0]) else 0
            mixed_signals = 1 if len(set([price_velocity > 0, ema20_velocity > 0, ema50_velocity > 0])) > 1 else 0
            
            features = {
                # Velocity –≥—Ä—É–ø–ø–∞
                'price_velocity': price_velocity,
                'ema20_velocity': ema20_velocity,
                'ema50_velocity': ema50_velocity,
                
                # Acceleration –≥—Ä—É–ø–ø–∞
                'price_acceleration': price_accel,
                'ema20_acceleration': ema20_accel,
                'ema50_acceleration': ema50_accel,
                
                # Velocity Ratios –≥—Ä—É–ø–ø–∞
                'velocity_ratio_20_50': velocity_ratio_20_50,
                'velocity_ratio_price_20': velocity_ratio_price_20,
                'velocity_ratio_price_50': velocity_ratio_price_50,
                
                # Distance to EMAs –≥—Ä—É–ø–ø–∞
                'distance_to_ema20': distance_to_ema20,
                'distance_to_ema50': distance_to_ema50,
                'distance_to_ema100': distance_to_ema100,
                
                # Distance Changes –≥—Ä—É–ø–ø–∞
                'distance_change_20': distance_change_20,
                'distance_change_50': distance_change_50,
                'distance_change_100': distance_change_100,
                
                # EMA Angles –≥—Ä—É–ø–ø–∞
                'ema20_angle': ema20_angle,
                'ema50_angle': ema50_angle,
                'ema100_angle': ema100_angle,
                
                # Angle Changes –≥—Ä—É–ø–ø–∞
                'ema20_angle_change': ema20_angle_change,
                'ema50_angle_change': ema50_angle_change,
                'ema100_angle_change': ema100_angle_change,
                
                # EMA Relationships –≥—Ä—É–ø–ø–∞
                'ema20_vs_50': ema20_vs_50,
                'ema50_vs_100': ema50_vs_100,
                'ema20_vs_100': ema20_vs_100,
                
                # Synchronization –≥—Ä—É–ø–ø–∞
                'price_ema20_sync': price_ema20_sync,
                'price_ema50_sync': price_ema50_sync,
                'ema20_ema50_sync': ema20_ema50_sync,
                'all_up_sync': all_up_sync,
                'all_down_sync': all_down_sync,
                'mixed_signals': mixed_signals
            }
            
            return features
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None
    
    def find_movements_in_data(self, df: pd.DataFrame, symbol: str):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö min->max –¥–≤–∏–∂–µ–Ω–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üîç –ò—â—É –¥–≤–∏–∂–µ–Ω–∏—è –≤ {symbol}...")
        
        movements_found = 0
        
        for i in range(100, len(df) - 24):  # –û—Å—Ç–∞–≤–ª—è–µ–º 24 —á–∞—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—â–µ–≥–æ
            try:
                current_price = df.iloc[i]['close']
                
                # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                lookback = 6
                is_local_min = True
                
                for j in range(max(0, i-lookback), min(len(df), i+lookback+1)):
                    if j != i and df.iloc[j]['low'] <= current_price:
                        is_local_min = False
                        break
                
                if not is_local_min:
                    continue
                
                # –ò—â–µ–º –º–∞–∫—Å–∏–º—É–º –≤ –±—É–¥—É—â–µ–º (—Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞)
                max_price = current_price
                max_idx = i
                
                for j in range(i+1, min(len(df), i+25)):
                    if df.iloc[j]['high'] > max_price:
                        max_price = df.iloc[j]['high']
                        max_idx = j
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è
                movement_percent = ((max_price - current_price) / current_price) * 100
                
                if movement_percent >= 1.0:  # –ú–∏–Ω–∏–º—É–º 1% –¥–≤–∏–∂–µ–Ω–∏–µ
                    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ —Ç–æ—á–∫–µ –≤—Ö–æ–¥–∞ (–º–∏–Ω–∏–º—É–º)
                    entry_slice = df.iloc[:i+1]
                    features = self.prepare_ml_features(entry_slice, symbol)
                    
                    if features:
                        movement = {
                            'symbol': symbol,
                            'entry_time': df.index[i],
                            'exit_time': df.index[max_idx],
                            'entry_price': current_price,
                            'exit_price': max_price,
                            'movement_percent': movement_percent,
                            'duration_hours': max_idx - i,
                            'features': features
                        }
                        
                        self.movements_database.append(movement)
                        movements_found += 1
                        
                        if movements_found % 50 == 0:
                            print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–π: {movements_found}")
                            
            except Exception as e:
                continue
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {movements_found} –¥–≤–∏–∂–µ–Ω–∏–π –≤ {symbol}")
    
    def collect_training_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (2020-2024)"""
        print("üìö –°–ë–û–† –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø (2020-2024)")
        print("=" * 50)
        
        self.movements_database = []
        
        for symbol in self.symbols:
            df = self.get_historical_data(symbol, self.train_start, self.train_end)
            if not df.empty:
                self.find_movements_in_data(df, symbol)
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open('historical_movements_2020_2024.json', 'w', encoding='utf-8') as f:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            movements_for_json = []
            for movement in self.movements_database:
                movement_copy = movement.copy()
                movement_copy['entry_time'] = movement['entry_time'].isoformat()
                movement_copy['exit_time'] = movement['exit_time'].isoformat()
                movements_for_json.append(movement_copy)
            
            json.dump(movements_for_json, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–†–ï–ù–ò–†–û–í–û–ß–ù–´–• –î–ê–ù–ù–´–•:")
        print(f"   –í—Å–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏–π: {len(self.movements_database)}")
        
        if self.movements_database:
            profits = [m['movement_percent'] for m in self.movements_database]
            print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {np.mean(profits):.2f}%")
            print(f"   –ú–µ–¥–∏–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {np.median(profits):.2f}%")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {np.max(profits):.2f}%")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º
            small = len([p for p in profits if 1 <= p < 3])
            medium = len([p for p in profits if 3 <= p < 7])
            large = len([p for p in profits if p >= 7])
            
            print(f"   –ú–∞–ª—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è (1-3%): {small}")
            print(f"   –°—Ä–µ–¥–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (3-7%): {medium}")
            print(f"   –ö—Ä—É–ø–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è (7%+): {large}")
    
    def train_model(self):
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
        print("\nüß† –û–ë–£–ß–ï–ù–ò–ï ML –ú–û–î–ï–õ–ò")
        print("=" * 30)
        
        if not self.movements_database:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        X = []
        y = []
        
        feature_names = list(self.movements_database[0]['features'].keys())
        
        for movement in self.movements_database:
            features_list = [movement['features'][name] for name in feature_names]
            X.append(features_list)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤
            profit = movement['movement_percent']
            if profit < 3:
                label = 0  # –ú–∞–ª–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            elif profit < 7:
                label = 1  # –°—Ä–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            else:
                label = 2  # –ö—Ä—É–ø–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            
            y.append(label)
        
        X = np.array(X)
        y = np.array(y)
        
        print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤, {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/validation
        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = RandomForestClassifier(n_estimators=200, random_state=42, max_depth=15)
        model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏
        train_pred = model.predict(X_train)
        val_pred = model.predict(X_val)
        
        train_acc = accuracy_score(y_train, train_pred)
        val_acc = accuracy_score(y_val, val_pred)
        
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏: {train_acc:.3f}")
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {val_acc:.3f}")
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importances = model.feature_importances_
        feature_importance = list(zip(feature_names, importances))
        feature_importance.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nüèÜ –¢–û–ü-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        for name, importance in feature_importance[:10]:
            print(f"   {name}: {importance:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        with open('historical_model_2020_2024.pkl', 'wb') as f:
            pickle.dump(model, f)
        
        with open('historical_feature_names.pkl', 'wb') as f:
            pickle.dump(feature_names, f)
        
        print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'historical_model_2020_2024.pkl'")
        print(f"üíæ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ 'historical_feature_names.pkl'")
        
        return model, feature_names

if __name__ == "__main__":
    print("üöÄ –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô ML TRAINER")
    print("üìÖ –û–±—É—á–µ–Ω–∏–µ: 2020-2024 –≥–æ–¥—ã")
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 2025 –≥–æ–¥")
    print("=" * 40)
    
    trainer = HistoricalMLTrainer()
    
    print("1Ô∏è‚É£ –°–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    trainer.collect_training_data()
    
    print("\n2Ô∏è‚É£ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
    trainer.train_model()
    
    print("\n‚úÖ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å historical_backtest.py")







