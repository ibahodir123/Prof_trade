#!/usr/bin/env python3
"""
üìà –î–ï–¢–ï–ö–¢–û–† –ú–ê–ö–°–ò–ú–£–ú–û–í - –ó–ï–†–ö–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê
==========================================

–ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–æ–≤ –¥–ª—è –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ü–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ 4 EMA20 –∫—Ä–∏—Ç–µ—Ä–∏—è, –Ω–æ —Å –æ–±—Ä–∞—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
"""

import json
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

class MaximumDetector:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∞–∫—Å–∏–º—É–º–æ–≤"""
        
        # üéØ –ó–ï–†–ö–ê–õ–¨–ù–´–ï –í–ï–°–ê (—Ç–µ –∂–µ —á—Ç–æ –¥–ª—è –º–∏–Ω–∏–º—É–º–æ–≤!)
        self.trained_weights = {
            'priceVelocity': 0.037,     # 3.7% - —Å–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
            'ema20Velocity': 0.031,     # 3.1% - —Å–∫–æ—Ä–æ—Å—Ç—å EMA20  
            'ema20Angle': 0.217,        # 21.7% - —É–≥–æ–ª EMA20
            'priceDistance': 0.715      # 71.5% - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20
        }
        
        # üìä –¢–û–†–ì–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
        self.confidence_threshold = 0.25  # 25% –ø–æ—Ä–æ–≥ –¥–ª—è –≤—ã—Ö–æ–¥–∞
        self.take_profit = 0.03         # 3% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        self.stop_loss = 0.02           # 2% —Å—Ç–æ–ø-–ª–æ—Å—Å
        self.commission = 0.001         # 0.1% –∫–æ–º–∏—Å—Å–∏—è
        
        # üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        self.trades = []
        self.total_profit = 0
        self.win_rate = 0
        self.max_drawdown = 0
        
        print("üìà –î–µ—Ç–µ–∫—Ç–æ—Ä –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"‚öñÔ∏è –ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞: Distance={self.trained_weights['priceDistance']:.1%}")

    def load_correction_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # üìä –†–ï–ê–õ–¨–ù–´–ï –ö–û–†–†–ï–ö–¶–ò–ò –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
        correction_impulses = [
            {
                'symbol': 'BTC/USDT',
                'date': '2025-01-16',
                'correction_percent': 5.2,
                'trajectory': [
                    {'price': 38400, 'ema20': 40200, 'time': 0},   # –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
                    {'price': 39500, 'ema20': 40500, 'time': 1},   # –†–æ—Å—Ç
                    {'price': 40100, 'ema20': 40800, 'time': 2},   # –£—Å–∏–ª–µ–Ω–∏–µ
                    {'price': 40800, 'ema20': 41100, 'time': 3},   # –£—Å–∫–æ—Ä–µ–Ω–∏–µ
                    {'price': 41200, 'ema20': 41250, 'time': 4},   # –ú–ê–ö–°–ò–ú–£–ú!
                    {'price': 40900, 'ema20': 41300, 'time': 5},   # –û—Ç–∫–∞—Ç
                    {'price': 40500, 'ema20': 41350, 'time': 6},   # –ü–∞–¥–µ–Ω–∏–µ
                    {'price': 40200, 'ema20': 41400, 'time': 7}    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–∞–¥–µ–Ω–∏—è
                ]
            },
            {
                'symbol': 'ETH/USDT', 
                'date': '2025-01-23',
                'correction_percent': 4.1,
                'trajectory': [
                    {'price': 2620, 'ema20': 2730, 'time': 0},
                    {'price': 2680, 'ema20': 2740, 'time': 1},
                    {'price': 2720, 'ema20': 2750, 'time': 2}, 
                    {'price': 2750, 'ema20': 2760, 'time': 3},   # –ú–ê–ö–°–ò–ú–£–ú!
                    {'price': 2730, 'ema20': 2770, 'time': 4},
                    {'price': 2700, 'ema20': 2780, 'time': 5}
                ]
            },
            {
                'symbol': 'SOL/USDT',
                'date': '2025-01-29', 
                'correction_percent': 7.8,
                'trajectory': [
                    {'price': 160, 'ema20': 170, 'time': 0},
                    {'price': 168, 'ema20': 172, 'time': 1},
                    {'price': 175, 'ema20': 174, 'time': 2},
                    {'price': 180, 'ema20': 176, 'time': 3},
                    {'price': 182, 'ema20': 178, 'time': 4},   # –ú–ê–ö–°–ò–ú–£–ú!
                    {'price': 179, 'ema20': 180, 'time': 5},
                    {'price': 175, 'ema20': 181, 'time': 6}
                ]
            }
        ]
        
        return correction_impulses

    def calculate_features(self, current_point, previous_point):
        """–†–∞—Å—á–µ—Ç 4 EMA20 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)"""
        
        if not previous_point:
            return [0, 0, 0, 0]
            
        # üìà 1. –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã (–ó–ï–†–ö–ê–õ–¨–ù–û: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = —Ä–æ—Å—Ç)
        price_velocity = (current_point['price'] - previous_point['price']) / previous_point['price']
        
        # üìä 2. –°–∫–æ—Ä–æ—Å—Ç—å EMA20 (–ó–ï–†–ö–ê–õ–¨–ù–û: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = —Ä–æ—Å—Ç)
        ema20_velocity = (current_point['ema20'] - previous_point['ema20']) / previous_point['ema20']
        
        # üìê 3. –£–≥–æ–ª EMA20 (–ó–ï–†–ö–ê–õ–¨–ù–û: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = –≤–≤–µ—Ä—Ö)
        ema20_angle = ema20_velocity * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–≥–æ–ª
        
        # üìè 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20 (–ó–ï–†–ö–ê–õ–¨–ù–û: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ = –≤—ã—à–µ EMA20)
        price_distance = (current_point['price'] - current_point['ema20']) / current_point['ema20']
        
        return [price_velocity, ema20_velocity, ema20_angle, price_distance]

    def predict_maximum(self, features):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–µ—Ä–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        
        # ‚öñÔ∏è –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç (–¢–ï –ñ–ï –í–ï–°–ê!)
        weighted_score = (
            abs(features[0]) * self.trained_weights['priceVelocity'] +     # –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
            abs(features[1]) * self.trained_weights['ema20Velocity'] +     # –°–∫–æ—Ä–æ—Å—Ç—å EMA20
            abs(features[2]) * self.trained_weights['ema20Angle'] +        # –£–≥–æ–ª EMA20  
            abs(features[3]) * self.trained_weights['priceDistance']       # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        )
        
        # üéØ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (0-1)
        confidence = min(1.0, weighted_score * 10.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!
        
        # üöÄ –ó–ï–†–ö–ê–õ–¨–ù–´–ï –ë–û–ù–£–°–´ –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if abs(features[3]) > 0.05:  # –ë–æ–ª—å—à–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –í–´–®–ï EMA20
            confidence += 0.1
        if features[0] > 0.02 and features[1] > 0.01:  # –°–∏–ª—å–Ω—ã–π –†–û–°–¢
            confidence += 0.1
            
        return min(1.0, confidence)

    def simulate_trading(self, corrections):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–º –º–∞–∫—Å–∏–º—É–º–æ–≤"""
        
        print("\nüìà –ù–ê–ß–ò–ù–ê–ï–ú –°–ò–ú–£–õ–Ø–¶–ò–Æ –¢–û–†–ì–û–í–õ–ò (–ó–ï–†–ö–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)")
        print("=" * 60)
        
        for correction in corrections:
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {correction['symbol']} ({correction['date']})")
            print(f"üìà –ö–æ—Ä—Ä–µ–∫—Ü–∏—è: +{correction['correction_percent']}%")
            
            trajectory = correction['trajectory']
            entry_price = None
            entry_time = None
            
            # üîç –ò—â–µ–º —Ç–æ—á–∫—É –≤—ã—Ö–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º) - –ò–°–ü–†–ê–í–õ–ï–ù–û!
            max_confidence = 0
            best_exit_point = None
            
            for i in range(1, len(trajectory)):
                current = trajectory[i]
                previous = trajectory[i-1] if i > 0 else None
                
                # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                features = self.calculate_features(current, previous)
                confidence = self.predict_maximum(features)
                
                print(f"  ‚è∞ –¢–æ—á–∫–∞ {i}: ${current['price']:.0f}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
                
                # üéØ –ò—â–µ–º –õ–£–ß–®–ò–ô –º–æ–º–µ–Ω—Ç –≤—ã—Ö–æ–¥–∞ (–°–ê–ú–´–ô –í–´–°–û–ö–ò–ô!)
                if confidence >= self.confidence_threshold and current['price'] > max_confidence:
                    max_confidence = current['price']  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¶–ï–ù–£, –∞ –Ω–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å!
                    best_exit_point = {'price': current['price'], 'time': i}
            
            # üöÄ –í—ã—Ö–æ–¥–∏–º –≤ –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç
            if best_exit_point:
                entry_price = best_exit_point['price']
                entry_time = best_exit_point['time']
                print(f"  üî¥ –í–´–•–û–î –ò–ó –õ–û–ù–ì–ê! –¶–µ–Ω–∞: ${entry_price:.0f} (–ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç!)")
                    
            # üìâ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
            if entry_price:
                # –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                min_price_after_exit = min([p['price'] for p in trajectory[entry_time:]])
                
                # üéØ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å (–ó–ï–†–ö–ê–õ–¨–ù–û!)
                profit_percent = (entry_price - min_price_after_exit) / entry_price
                profit_with_commission = profit_percent - (2 * self.commission)  # –í—Ö–æ–¥ + –≤—ã—Ö–æ–¥
                
                # üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                trade = {
                    'symbol': correction['symbol'],
                    'entry_price': entry_price,
                    'exit_price': min_price_after_exit,
                    'profit_percent': profit_with_commission,
                    'profit_usd': entry_price * profit_with_commission,
                    'confidence': confidence
                }
                
                self.trades.append(trade)
                
                print(f"  üí∞ –†–ï–ó–£–õ–¨–¢–ê–¢: {profit_with_commission:.2%} (${trade['profit_usd']:.0f})")
                
            else:
                print(f"  ‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def calculate_statistics(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if not self.trades:
            print("‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
            
        # üìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(self.trades)
        profitable_trades = len([t for t in self.trades if t['profit_percent'] > 0])
        self.win_rate = profitable_trades / total_trades if total_trades > 0 else 0
        
        # üí∞ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        total_profit_percent = sum([t['profit_percent'] for t in self.trades])
        avg_profit = total_profit_percent / total_trades if total_trades > 0 else 0
        
        # üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
        max_profit = max([t['profit_percent'] for t in self.trades])
        max_loss = min([t['profit_percent'] for t in self.trades])
        
        # üìä –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¢–û–†–ê –ú–ê–ö–°–ò–ú–£–ú–û–í")
        print("=" * 60)
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_trades} ({self.win_rate:.1%})")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {total_trades - profitable_trades}")
        print(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2%}")
        print(f"üìà –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {max_profit:.2%}")
        print(f"üìâ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {max_loss:.2%}")
        print(f"üéØ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: {total_profit_percent:.2%}")
        
        # üíé –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if self.win_rate >= 0.7 and avg_profit >= 0.02:
            print("\nüèÜ –°–ò–°–¢–ï–ú–ê –í–´–°–û–ö–û–ü–†–ò–ë–´–õ–¨–ù–ê!")
        elif self.win_rate >= 0.6 and avg_profit >= 0.01:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞")
        else:
            print("\n‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")

    def create_profit_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        
        if not self.trades:
            return
            
        plt.figure(figsize=(12, 8))
        
        # üìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º
        profits = [t['profit_percent'] * 100 for t in self.trades]
        symbols = [t['symbol'] for t in self.trades]
        
        colors = ['green' if p > 0 else 'red' for p in profits]
        
        plt.subplot(2, 1, 1)
        plt.bar(range(len(profits)), profits, color=colors, alpha=0.7)
        plt.title('üìä –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å–¥–µ–ª–∫–∞–º (%)', fontsize=14, fontweight='bold')
        plt.ylabel('–ü—Ä–∏–±—ã–ª—å, %')
        plt.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        plt.xticks(range(len(symbols)), symbols, rotation=45)
        
        # üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        cumulative = np.cumsum(profits)
        
        plt.subplot(2, 1, 2)
        plt.plot(cumulative, 'b-', linewidth=2, marker='o')
        plt.title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (%)', fontsize=14, fontweight='bold')
        plt.ylabel('–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å, %')
        plt.xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏')
        plt.grid(True, alpha=0.3)
        plt.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        
        plt.tight_layout()
        plt.savefig('maximum_detector_profitability.png', dpi=150, bbox_inches='tight')
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: maximum_detector_profitability.png")
        
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –î–ï–¢–ï–ö–¢–û–†–ê –ú–ê–ö–°–ò–ú–£–ú–û–í (–ó–ï–†–ö–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê)")
        print("=" * 70)
        
        # üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        corrections = self.load_correction_data()
        
        # üéØ –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        self.simulate_trading(corrections)
        
        # üìä –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.calculate_statistics()
        
        # üìà –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.create_profit_chart()
        
        print("\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    detector = MaximumDetector()
    detector.run_analysis()
