#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
"""
import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import os
import ccxt
import pandas as pd
import numpy as np
import joblib
from datetime import datetime, timedelta
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle, FancyBboxPatch
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def calculate_dynamic_percentages(signal_strength, signal_type):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    
    if signal_strength > 0.9:
        # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.05  # +5%
        loss_pct = 0.03    # -3%
        strength_text = "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.8:
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.035 # +3.5%
        loss_pct = 0.025  # -2.5%
        strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
    else:
        # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.025 # +2.5%
        loss_pct = 0.02   # -2%
        strength_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    
    return profit_pct, loss_pct, strength_text

def create_ml_features(df):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    import pandas as pd
    import numpy as np
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
    df_features = df.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º EMA –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if 'ema_20' not in df_features.columns:
        df_features['ema_20'] = df_features['close'].ewm(span=20).mean()
    if 'ema_50' not in df_features.columns:
        df_features['ema_50'] = df_features['close'].ewm(span=50).mean()
    if 'ema_100' not in df_features.columns:
        df_features['ema_100'] = df_features['close'].ewm(span=100).mean()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    df_features['price_ema20_ratio'] = df_features['close'] / df_features['ema_20']
    df_features['price_ema50_ratio'] = df_features['close'] / df_features['ema_50']
    df_features['price_ema100_ratio'] = df_features['close'] / df_features['ema_100']
    
    df_features['ema20_ema50_ratio'] = df_features['ema_20'] / df_features['ema_50']
    df_features['ema20_ema100_ratio'] = df_features['ema_20'] / df_features['ema_100']
    df_features['ema50_ema100_ratio'] = df_features['ema_50'] / df_features['ema_100']
    
    # –°–∫–æ—Ä–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    df_features['price_velocity'] = df_features['close'].pct_change()
    df_features['ema20_velocity'] = df_features['ema_20'].pct_change()
    df_features['ema50_velocity'] = df_features['ema_50'].pct_change()
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ EMA
    df_features['distance_to_ema20'] = (df_features['close'] - df_features['ema_20']) / df_features['ema_20']
    df_features['distance_to_ema50'] = (df_features['close'] - df_features['ema_50']) / df_features['ema_50']
    df_features['distance_to_ema100'] = (df_features['close'] - df_features['ema_100']) / df_features['ema_100']
    
    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    df_features['volatility'] = df_features['close'].rolling(20).std()
    
    # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –æ–±—ä–µ–º–æ–º
    df_features['volume_price_corr'] = df_features['volume'].rolling(20).corr(df_features['close'])
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
    df_features = df_features.bfill().ffill()
    
    return df_features

def get_popular_coins():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    return [
        "BTC/USDT", "ETH/USDT", "BNB/USDT", "XRP/USDT", "ADA/USDT",
        "SOL/USDT", "DOGE/USDT", "DOT/USDT", "AVAX/USDT", "MATIC/USDT",
        "LINK/USDT", "UNI/USDT", "LTC/USDT", "ATOM/USDT", "FIL/USDT",
        "TRX/USDT", "ETC/USDT", "XLM/USDT", "BCH/USDT", "ALGO/USDT"
    ]

def analyze_coin_signal(symbol, exchange):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        ohlcv = exchange.fetch_ohlcv(symbol, '1h', limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(symbol)
        current_price = ticker['last']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏
        try:
            minimum_detector = joblib.load('models/minimum_detector.pkl')
            maximum_detector = joblib.load('models/maximum_detector.pkl')
            scaler = joblib.load('models/scaler.pkl')
            feature_names = joblib.load('models/feature_names.pkl')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
            df_features = create_ml_features(df)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if len(df_features) > 0:
                features = df_features.iloc[-1:][feature_names].values
                features_scaled = scaler.transform(features)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                min_prob = minimum_detector.predict_proba(features_scaled)[0][1]
                max_prob = maximum_detector.predict_proba(features_scaled)[0][1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                if min_prob > 0.7:
                    signal_type = "üü¢ –õ–û–ù–ì"
                    entry_price = current_price
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(min_prob, "LONG")
                    
                    take_profit = current_price * (1 + profit_pct)
                    stop_loss = current_price * (1 - loss_pct)
                    probability = min_prob * 100
                    signal_strength = min_prob
                    
                elif max_prob > 0.7:
                    signal_type = "üî¥ –®–û–†–¢"
                    entry_price = current_price
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(max_prob, "SHORT")
                    
                    take_profit = current_price * (1 - profit_pct)  # –î–ª—è —à–æ—Ä—Ç–∞
                    stop_loss = current_price * (1 + loss_pct)     # –î–ª—è —à–æ—Ä—Ç–∞
                    probability = max_prob * 100
                    signal_strength = max_prob
                    
                else:
                    return None  # –ù–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                
            else:
                return None
                
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            latest_close = df['close'].iloc[-1]
            ema_20_latest = df['ema_20'].iloc[-1]
            ema_50_latest = df['ema_50'].iloc[-1]
            
            if latest_close > ema_20_latest > ema_50_latest:
                signal_type = "üü¢ –õ–û–ù–ì"
                entry_price = current_price
                take_profit = current_price * 1.035  # +3.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                stop_loss = current_price * 0.975    # -2.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                probability = 75.0
                signal_strength = 0.75
                strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
            elif latest_close < ema_20_latest < ema_50_latest:
                signal_type = "üî¥ –®–û–†–¢"
                entry_price = current_price
                take_profit = current_price * 0.965  # -3.5% –¥–ª—è —à–æ—Ä—Ç–∞
                stop_loss = current_price * 1.025    # +2.5% –¥–ª—è —à–æ—Ä—Ç–∞
                probability = 75.0
                signal_strength = 0.75
                strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
            else:
                return None  # –ù–µ—Ç —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                
            ml_status = "–°–∏–º—É–ª—è—Ü–∏—è"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        price_change_pct = ((take_profit - entry_price) / entry_price) * 100
        
        return {
            'symbol': symbol,
            'signal_type': signal_type,
            'current_price': current_price,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'probability': probability,
            'signal_strength': signal_strength,
            'strength_text': strength_text,
            'price_change_pct': price_change_pct,
            'ml_status': ml_status,
            'chart_data': df  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def create_trading_chart(symbol, df, signal_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView —Å —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView
        plt.style.use('dark_background')
        fig = plt.figure(figsize=(14, 10))
        fig.patch.set_facecolor('#131722')  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω TradingView
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        gs = fig.add_gridspec(3, 4, height_ratios=[1, 4, 1], width_ratios=[1, 1, 1, 1])
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax_main = fig.add_subplot(gs[1, :])
        ax_main.set_facecolor('#131722')
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–≤–µ—á–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_data = df.tail(60)
        
        # –°—Ç—Ä–æ–∏–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        for i, (timestamp, row) in enumerate(chart_data.iterrows()):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∫–∞–∫ –≤ TradingView
            if row['close'] >= row['open']:
                color = '#26a69a'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
                alpha = 0.8
            else:
                color = '#ef5350'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
                alpha = 0.8
            
            # –¢–µ–Ω–∏ —Å–≤–µ—á–µ–π
            ax_main.plot([i, i], [row['low'], row['high']], color=color, linewidth=1, alpha=alpha)
            # –¢–µ–ª–∞ —Å–≤–µ—á–µ–π
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            ax_main.bar(i, body_height, bottom=body_bottom, width=0.8, color=color, alpha=alpha)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA –ª–∏–Ω–∏–∏ –≤ —Å—Ç–∏–ª–µ TradingView
        ax_main.plot(range(len(chart_data)), chart_data['ema_20'], color='#ffeb3b', linewidth=2, label='EMA 20', alpha=0.9)
        ax_main.plot(range(len(chart_data)), chart_data['ema_50'], color='#ff9800', linewidth=2, label='EMA 50', alpha=0.9)
        ax_main.plot(range(len(chart_data)), chart_data['ema_100'], color='#9c27b0', linewidth=2, label='EMA 100', alpha=0.9)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        current_price = signal_data['current_price']
        entry_price = signal_data['entry_price']
        take_profit = signal_data['take_profit']
        stop_loss = signal_data['stop_loss']
        signal_type = signal_data['signal_type']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if "–õ–û–ù–ì" in signal_type:
            buy_color = '#26a69a'
            sell_color = '#ef5350'
            profit_zone_color = '#26a69a'
            loss_zone_color = '#ef5350'
        else:
            buy_color = '#ef5350'
            sell_color = '#26a69a'
            profit_zone_color = '#ef5350'
            loss_zone_color = '#26a69a'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –∫–∞–∫ –Ω–∞ TradingView
        chart_length = len(chart_data)
        
        # –ó–æ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ (–∑–µ–ª–µ–Ω–∞—è/–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –≤—ã—à–µ/–Ω–∏–∂–µ —Ü–µ–Ω—ã)
        if "–õ–û–ù–ì" in signal_type:
            # –î–ª—è –ª–æ–Ω–≥–∞: –∑–µ–ª–µ–Ω–∞—è –∑–æ–Ω–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            profit_zone = Rectangle((chart_length - 10, current_price), 10, take_profit - current_price, 
                                  facecolor=profit_zone_color, alpha=0.2, edgecolor=profit_zone_color, linewidth=2)
        else:
            # –î–ª—è —à–æ—Ä—Ç–∞: –∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            profit_zone = Rectangle((chart_length - 10, take_profit), 10, current_price - take_profit, 
                                  facecolor=profit_zone_color, alpha=0.2, edgecolor=profit_zone_color, linewidth=2)
        ax_main.add_patch(profit_zone)
        
        # –ó–æ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞)
        if "–õ–û–ù–ì" in signal_type:
            # –î–ª—è –ª–æ–Ω–≥–∞: –∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            loss_zone = Rectangle((chart_length - 10, stop_loss), 10, current_price - stop_loss, 
                                facecolor=loss_zone_color, alpha=0.2, edgecolor=loss_zone_color, linewidth=2)
        else:
            # –î–ª—è —à–æ—Ä—Ç–∞: –∫—Ä–∞—Å–Ω–∞—è –∑–æ–Ω–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            loss_zone = Rectangle((chart_length - 10, current_price), 10, stop_loss - current_price, 
                                facecolor=loss_zone_color, alpha=0.2, edgecolor=loss_zone_color, linewidth=2)
        ax_main.add_patch(loss_zone)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –∫–∞–∫ –Ω–∞ TradingView
        ax_main.axhline(y=entry_price, color='#2196f3', linestyle='--', alpha=0.8, linewidth=2, label=f'–í—Ö–æ–¥: ${entry_price:.4f}')
        ax_main.axhline(y=take_profit, color=profit_zone_color, linestyle='--', alpha=0.8, linewidth=2, label=f'–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}')
        ax_main.axhline(y=stop_loss, color=loss_zone_color, linestyle='--', alpha=0.8, linewidth=2, label=f'–°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        current_pos = chart_length - 1
        ax_main.scatter([current_pos], [current_price], color='white', s=150, zorder=10, edgecolors='black', linewidth=2)
        ax_main.scatter([current_pos], [entry_price], color='#2196f3', s=120, zorder=10, edgecolors='white', linewidth=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        ax_main.set_title(f'{symbol} - {signal_type}', fontsize=18, color='white', fontweight='bold', pad=20)
        ax_main.set_ylabel('–¶–µ–Ω–∞ (USDT)', fontsize=14, color='white')
        ax_main.legend(loc='upper left', fontsize=11, framealpha=0.8)
        ax_main.grid(True, alpha=0.2, color='#2a2e39')
        ax_main.tick_params(colors='white')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π X
        ax_main.set_xticks(range(0, len(chart_data), 10))
        ax_main.set_xticklabels([chart_data.index[i].strftime('%H:%M') for i in range(0, len(chart_data), 10)], 
                               rotation=45, color='white')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∏–ª–µ TradingView (–≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
        ax_buttons = fig.add_subplot(gs[0, :])
        ax_buttons.set_facecolor('#131722')
        ax_buttons.axis('off')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ bid/ask
        button_width = 0.15
        button_height = 0.6
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã bid/ask (—Å–ø—Ä–µ–¥ ~0.1%)
        bid_price = current_price * 0.9995  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (–Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ)
        ask_price = current_price * 1.0005  # –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ)
        
        # –ö–Ω–æ–ø–∫–∞ –ü–†–û–î–ê–¢–¨ (–∫—Ä–∞—Å–Ω–∞—è) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É bid
        sell_rect = Rectangle((0.05, 0.2), button_width, button_height, 
                            facecolor='#ef5350', edgecolor='white', linewidth=2)
        ax_buttons.add_patch(sell_rect)
        ax_buttons.text(0.05 + button_width/2, 0.5, '–ü–†–û–î–ê–¢–¨', ha='center', va='center', 
                       color='white', fontsize=14, fontweight='bold')
        ax_buttons.text(0.05 + button_width/2, 0.35, f'${bid_price:.4f}', ha='center', va='center', 
                       color='white', fontsize=12)
        
        # –ö–Ω–æ–ø–∫–∞ –ö–£–ü–ò–¢–¨ (—Å–∏–Ω—è—è) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–Ω—É ask
        buy_rect = Rectangle((0.25, 0.2), button_width, button_height, 
                           facecolor='#26a69a', edgecolor='white', linewidth=2)
        ax_buttons.add_patch(buy_rect)
        ax_buttons.text(0.25 + button_width/2, 0.5, '–ö–£–ü–ò–¢–¨', ha='center', va='center', 
                       color='white', fontsize=14, fontweight='bold')
        ax_buttons.text(0.25 + button_width/2, 0.35, f'${ask_price:.4f}', ha='center', va='center', 
                       color='white', fontsize=12)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–µ
        ax_buttons.text(0.5, 0.7, f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}', 
                       color='white', fontsize=16, fontweight='bold')
        ax_buttons.text(0.5, 0.5, f'–¢–∞–π–º—Ñ—Ä–µ–π–º: 1H', 
                       color='#9e9e9e', fontsize=12)
        ax_buttons.text(0.5, 0.3, f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {signal_data["probability"]:.1f}%', 
                       color='#4caf50', fontsize=14, fontweight='bold')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å (–≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏)
        ax_info = fig.add_subplot(gs[2, :])
        ax_info.set_facecolor('#131722')
        ax_info.axis('off')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in signal_data["strength_text"]:
            info_text = f"""
        üìâ –ê–ù–ê–õ–ò–ó:  –¶–µ–Ω–∞: ${entry_price:.4f}  |  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: -{abs(signal_data["price_change_pct"]):.2f}%
        üìä –°—Ç–∞—Ç—É—Å: {signal_data["strength_text"]}  |  ML —Å—Ç–∞—Ç—É—Å: {signal_data["ml_status"]}
        """
        else:
            info_text = f"""
        üéØ –¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:  –í—Ö–æ–¥: ${entry_price:.4f}  |  –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}  |  –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}
        üìä –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal_data["price_change_pct"]:+.2f}%  |  –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {signal_data["strength_text"]}  |  ML —Å—Ç–∞—Ç—É—Å: {signal_data["ml_status"]}
        """
        ax_info.text(0.02, 0.5, info_text, color='white', fontsize=11, 
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='#2a2e39', alpha=0.8))
        
        # –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç—ã
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='#131722', edgecolor='none')
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

def create_advanced_trading_chart(symbol, df, signal_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}")
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView
        plt.style.use('dark_background')
        fig = plt.figure(figsize=(16, 12))
        fig.patch.set_facecolor('#131722')
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (4 —Ä—è–¥–∞)
        gs = fig.add_gridspec(4, 4, height_ratios=[1, 3, 1, 1], width_ratios=[1, 1, 1, 1])
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        ax_main = fig.add_subplot(gs[1, :])
        ax_main.set_facecolor('#131722')
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 80 —Å–≤–µ—á–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        chart_data = df.tail(80)
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        for i, (timestamp, row) in enumerate(chart_data.iterrows()):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –∫–∞–∫ –≤ TradingView
            if row['close'] >= row['open']:
                color = '#26a69a'  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–æ—Å—Ç–∞
                alpha = 0.9
            else:
                color = '#ef5350'  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–µ–Ω–∏—è
                alpha = 0.9
            
            # –¢–µ–Ω–∏ —Å–≤–µ—á–µ–π (high-low)
            ax_main.plot([i, i], [row['low'], row['high']], color=color, linewidth=1.5, alpha=alpha)
            
            # –¢–µ–ª–∞ —Å–≤–µ—á–µ–π (open-close)
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            if body_height > 0:
                ax_main.bar(i, body_height, bottom=body_bottom, width=0.7, color=color, alpha=alpha)
            else:
                # –î–æ–¥–∂–∏ (open == close)
                ax_main.plot([i-0.3, i+0.3], [row['close'], row['close']], color=color, linewidth=2, alpha=alpha)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA –ª–∏–Ω–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        ax_main.plot(range(len(chart_data)), chart_data['ema_20'], color='#ffeb3b', linewidth=2.5, label='EMA 20', alpha=0.9)
        ax_main.plot(range(len(chart_data)), chart_data['ema_50'], color='#ff9800', linewidth=2.5, label='EMA 50', alpha=0.9)
        ax_main.plot(range(len(chart_data)), chart_data['ema_100'], color='#9c27b0', linewidth=2.5, label='EMA 100', alpha=0.9)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞
        current_price = signal_data['current_price']
        entry_price = signal_data['entry_price']
        take_profit = signal_data['take_profit']
        stop_loss = signal_data['stop_loss']
        signal_type = signal_data['signal_type']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
        if "–õ–û–ù–ì" in signal_type:
            profit_zone_color = '#26a69a'
            loss_zone_color = '#ef5350'
            signal_color = '#26a69a'
        else:
            profit_zone_color = '#ef5350'
            loss_zone_color = '#26a69a'
            signal_color = '#ef5350'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        chart_length = len(chart_data)
        zone_width = 15
        
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in signal_data["strength_text"]:
            # –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–∞–¥–µ–Ω–∏–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ax_main.axhline(y=entry_price, color='#ff9800', linestyle='--', alpha=0.8, linewidth=2.5, label=f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${entry_price:.4f}')
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            # –ó–æ–Ω–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
            if "–õ–û–ù–ì" in signal_type:
                profit_zone = Rectangle((chart_length - zone_width, current_price), zone_width, take_profit - current_price, 
                                      facecolor=profit_zone_color, alpha=0.15, edgecolor=profit_zone_color, linewidth=2)
            else:
                profit_zone = Rectangle((chart_length - zone_width, take_profit), zone_width, current_price - take_profit, 
                                      facecolor=profit_zone_color, alpha=0.15, edgecolor=profit_zone_color, linewidth=2)
            ax_main.add_patch(profit_zone)
            
            # –ó–æ–Ω–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if "–õ–û–ù–ì" in signal_type:
                loss_zone = Rectangle((chart_length - zone_width, stop_loss), zone_width, current_price - stop_loss, 
                                    facecolor=loss_zone_color, alpha=0.15, edgecolor=loss_zone_color, linewidth=2)
            else:
                loss_zone = Rectangle((chart_length - zone_width, current_price), zone_width, stop_loss - current_price, 
                                    facecolor=loss_zone_color, alpha=0.15, edgecolor=loss_zone_color, linewidth=2)
            ax_main.add_patch(loss_zone)
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π
            ax_main.axhline(y=entry_price, color='#2196f3', linestyle='--', alpha=0.8, linewidth=2.5, label=f'–í—Ö–æ–¥: ${entry_price:.4f}')
            ax_main.axhline(y=take_profit, color=profit_zone_color, linestyle='--', alpha=0.8, linewidth=2.5, label=f'–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}')
            ax_main.axhline(y=stop_loss, color=loss_zone_color, linestyle='--', alpha=0.8, linewidth=2.5, label=f'–°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
        current_pos = chart_length - 1
        ax_main.scatter([current_pos], [current_price], color='white', s=200, zorder=15, edgecolors='black', linewidth=3)
        ax_main.scatter([current_pos], [entry_price], color='#2196f3', s=150, zorder=15, edgecolors='white', linewidth=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        ax_main.set_title(f'{symbol} - {signal_type}', fontsize=20, color='white', fontweight='bold', pad=25)
        ax_main.set_ylabel('–¶–µ–Ω–∞ (USDT)', fontsize=16, color='white')
        ax_main.legend(loc='upper left', fontsize=12, framealpha=0.9)
        ax_main.grid(True, alpha=0.15, color='#2a2e39')
        ax_main.tick_params(colors='white', labelsize=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π X
        ax_main.set_xticks(range(0, len(chart_data), 15))
        ax_main.set_xticklabels([chart_data.index[i].strftime('%H:%M') for i in range(0, len(chart_data), 15)], 
                               rotation=45, color='white')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∏–ª–µ TradingView
        ax_buttons = fig.add_subplot(gs[0, :])
        ax_buttons.set_facecolor('#131722')
        ax_buttons.axis('off')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã bid/ask
        bid_price = current_price * 0.9995
        ask_price = current_price * 1.0005
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨
        button_width = 0.12
        button_height = 0.7
        
        # –ö–Ω–æ–ø–∫–∞ –ü–†–û–î–ê–¢–¨
        sell_rect = FancyBboxPatch((0.05, 0.15), button_width, button_height, 
                                  boxstyle="round,pad=0.02", facecolor='#ef5350', 
                                  edgecolor='white', linewidth=2)
        ax_buttons.add_patch(sell_rect)
        ax_buttons.text(0.05 + button_width/2, 0.55, '–ü–†–û–î–ê–¢–¨', ha='center', va='center', 
                       color='white', fontsize=15, fontweight='bold')
        ax_buttons.text(0.05 + button_width/2, 0.35, f'${bid_price:.4f}', ha='center', va='center', 
                       color='white', fontsize=13)
        
        # –ö–Ω–æ–ø–∫–∞ –ö–£–ü–ò–¢–¨
        buy_rect = FancyBboxPatch((0.22, 0.15), button_width, button_height, 
                                 boxstyle="round,pad=0.02", facecolor='#26a69a', 
                                 edgecolor='white', linewidth=2)
        ax_buttons.add_patch(buy_rect)
        ax_buttons.text(0.22 + button_width/2, 0.55, '–ö–£–ü–ò–¢–¨', ha='center', va='center', 
                       color='white', fontsize=15, fontweight='bold')
        ax_buttons.text(0.22 + button_width/2, 0.35, f'${ask_price:.4f}', ha='center', va='center', 
                       color='white', fontsize=13)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        ax_buttons.text(0.45, 0.75, f'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}', 
                       color='white', fontsize=18, fontweight='bold')
        ax_buttons.text(0.45, 0.55, f'–¢–∞–π–º—Ñ—Ä–µ–π–º: 1H', 
                       color='#9e9e9e', fontsize=14)
        ax_buttons.text(0.45, 0.35, f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {signal_data["probability"]:.1f}%', 
                       color='#4caf50', fontsize=16, fontweight='bold')
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å RSI
        ax_rsi = fig.add_subplot(gs[2, :])
        ax_rsi.set_facecolor('#131722')
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
        def calculate_rsi(prices, period=14):
            delta = prices.diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
            rs = gain / loss
            rsi = 100 - (100 / (1 + rs))
            return rsi
        
        rsi = calculate_rsi(chart_data['close'])
        
        # –†–∏—Å—É–µ–º RSI
        ax_rsi.plot(range(len(chart_data)), rsi, color='#ff9800', linewidth=2)
        ax_rsi.axhline(y=70, color='#ef5350', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å')
        ax_rsi.axhline(y=30, color='#26a69a', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å')
        ax_rsi.axhline(y=50, color='#9e9e9e', linestyle='-', alpha=0.5)
        
        ax_rsi.set_title('RSI (14)', fontsize=14, color='white', fontweight='bold')
        ax_rsi.set_ylabel('RSI', fontsize=12, color='white')
        ax_rsi.set_ylim(0, 100)
        ax_rsi.grid(True, alpha=0.15)
        ax_rsi.tick_params(colors='white')
        ax_rsi.legend(fontsize=10)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        ax_info = fig.add_subplot(gs[3, :])
        ax_info.set_facecolor('#131722')
        ax_info.axis('off')
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in signal_data["strength_text"]:
            info_text = f"""
        üìâ –ê–ù–ê–õ–ò–ó:  –¶–µ–Ω–∞: ${entry_price:.4f}  |  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ: -{abs(signal_data["price_change_pct"]):.2f}%
        üìä –°–¢–ê–¢–£–°:  {signal_data["strength_text"]}  |  ML: {signal_data["ml_status"]}
        üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:  EMA20: ${chart_data['ema_20'].iloc[-1]:.4f}  |  EMA50: ${chart_data['ema_50'].iloc[-1]:.4f}  |  RSI: {rsi.iloc[-1]:.1f}
        """
        else:
            info_text = f"""
        üéØ –¢–û–†–ì–û–í–´–ï –£–†–û–í–ù–ò:  –í—Ö–æ–¥: ${entry_price:.4f}  |  –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}  |  –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}
        üìä –ê–ù–ê–õ–ò–ó:  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {signal_data["price_change_pct"]:+.2f}%  |  –°–∏–ª–∞: {signal_data["strength_text"]}  |  ML: {signal_data["ml_status"]}
        üìà –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:  EMA20: ${chart_data['ema_20'].iloc[-1]:.4f}  |  EMA50: ${chart_data['ema_50'].iloc[-1]:.4f}  |  RSI: {rsi.iloc[-1]:.1f}
        """
        ax_info.text(0.02, 0.5, info_text, color='white', fontsize=12, 
                    bbox=dict(boxstyle="round,pad=0.4", facecolor='#2a2e39', alpha=0.9))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=200, bbox_inches='tight', 
                   facecolor='#131722', edgecolor='none')
        buffer.seek(0)
        plt.close()
        
        logger.info(f"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

def test_chart_creation():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
        plt.figure(figsize=(10, 6))
        plt.plot([1, 2, 3, 4], [1, 4, 2, 3])
        plt.title('–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150)
        buffer.seek(0)
        plt.close()
        
        logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ä–∞–∑–º–µ—Ä: {len(buffer.getvalue())} –±–∞–π—Ç")
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

async def send_auto_signals(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    try:
        logger.info("üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç...")
        
        exchange = ccxt.binance()
        popular_coins = get_popular_coins()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–Ω–µ—Ç—ã
        signals = []
        for coin in popular_coins:
            signal = analyze_coin_signal(coin, exchange)
            if signal:
                signals.append(signal)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        if not signals:
            logger.info("‚ùå –°–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        signals.sort(key=lambda x: x['signal_strength'], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-3 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
        top_signals = signals[:3]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üö® **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´** üö®
üïê {datetime.now().strftime('%Y-%m-%d %H:%M')}

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–Ω–µ—Ç:** {len(popular_coins)}
üéØ **–ù–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤:** {len(signals)}
üèÜ **–¢–æ–ø-{len(top_signals)} –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:**

"""
        
        for i, signal in enumerate(top_signals, 1):
            message += f"""
**{i}. {signal['symbol']}** {signal['signal_type']}
üí∞ **–¶–µ–Ω–∞:** ${signal['current_price']:,.4f}
üìà **–ü—Ä–æ–≥–Ω–æ–∑:** ${signal['take_profit']:,.4f} ({signal['price_change_pct']:+.1f}%)
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {signal['probability']:.1f}% {signal['strength_text']}

üéØ **–¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ **–í—Ö–æ–¥:** ${signal['entry_price']:,.4f}
‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${signal['take_profit']:,.4f}
‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${signal['stop_loss']:,.4f}

"""
        
        message += f"""
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {top_signals[0]['ml_status']}
‚è∞ **–°–ª–µ–¥—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç**

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã**
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(
            chat_id=context.job.data['chat_id'],
            text=message
        )
        
        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(top_signals)} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ–Ω—é"""
    global current_coin
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Trading Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status"""
    try:
        import ccxt
        exchange = ccxt.binance()
        ticker = exchange.fetch_ticker(current_coin)
        current_price = ticker['last']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        auto_status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã" if jobs else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
ü™ô –¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞: {current_coin}
üìà –¶–µ–Ω–∞ {current_coin}: ${current_price:,.4f}
üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Binance
ü§ñ ML –º–æ–¥–µ–ª—å: –ê–∫—Ç–∏–≤–Ω–∞
üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: –í–∫–ª—é—á–µ–Ω—ã
üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã: {auto_status}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ
        """
        await update.message.reply_text(status_message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def auto_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /auto_start - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        for job in jobs:
            job.schedule_removal()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_repeating(
            send_auto_signals,
            interval=1800,  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
            first=10,       # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            name="auto_signals",
            data={'chat_id': update.effective_chat.id}
        )
        
        await update.message.reply_text("""
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞–ø—É—â–µ–Ω—ã!**

üïê **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
üìä **–ê–Ω–∞–ª–∏–∑:** 20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
üèÜ **–û—Ç–ø—Ä–∞–≤–∫–∞:** —Ç–æ–ø-3 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
‚è∞ **–ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª:** —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto_stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def auto_stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /auto_stop - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        for job in jobs:
            job.schedule_removal()
        
        await update.message.reply_text("""
üõë **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auto_start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        """)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def coins_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /coins"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        popular_coins = get_popular_coins()[:10]
        
        keyboard = []
        for coin in popular_coins:
            keyboard.append([InlineKeyboardButton(coin, callback_data=f"select_{coin}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "ü™ô **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**"
        await update.message.reply_text(message, reply_markup=reply_markup)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {str(e)}")

async def signals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /signals —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏"""
    global current_coin
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã
        import ccxt
        import pandas as pd
        import numpy as np
        import joblib
        from datetime import datetime
        
        exchange = ccxt.binance()
        
        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        ohlcv = exchange.fetch_ohlcv(current_coin, '1h', limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(current_coin)
        current_price = ticker['last']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏
        try:
            minimum_detector = joblib.load('models/minimum_detector.pkl')
            maximum_detector = joblib.load('models/maximum_detector.pkl')
            scaler = joblib.load('models/scaler.pkl')
            feature_names = joblib.load('models/feature_names.pkl')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
            df_features = create_ml_features(df)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if len(df_features) > 0:
                features = df_features.iloc[-1:][feature_names].values
                features_scaled = scaler.transform(features)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                min_prob = minimum_detector.predict_proba(features_scaled)[0][1]
                max_prob = maximum_detector.predict_proba(features_scaled)[0][1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                if min_prob > 0.7:
                    signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                    entry_price = current_price
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(min_prob, "LONG")
                    
                    take_profit = current_price * (1 + profit_pct)
                    stop_loss = current_price * (1 - loss_pct)
                    probability = min_prob * 100
                    
                elif max_prob > 0.7:
                    # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–¥–µ–Ω–∏–∏
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(max_prob, "SHORT")
                    potential_fall_pct = profit_pct * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
                    
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max_prob * 100
                    strength_text = f"‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ {potential_fall_pct:.1f}%)"
                    
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max(min_prob, max_prob) * 100
                    strength_text = "‚ö™ –°–ª–∞–±—ã–π"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
            
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            latest_close = df['close'].iloc[-1]
            ema_20_latest = df['ema_20'].iloc[-1]
            ema_50_latest = df['ema_50'].iloc[-1]
            
            if latest_close > ema_20_latest > ema_50_latest:
                signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                entry_price = current_price
                take_profit = current_price * 1.035  # +3.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                stop_loss = current_price * 0.975    # -2.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                probability = 75.0
                strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
            elif latest_close < ema_20_latest < ema_50_latest:
                # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã –≤ fallback —Ç–æ–∂–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                probability = 75.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ 3.5%)"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–°–∏–º—É–ª—è—Ü–∏—è"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        price_change_pct = ((take_profit - entry_price) / entry_price) * 100
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        signal_data = {
            'symbol': current_coin,
            'signal_type': signal_type,
            'current_price': current_price,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'probability': probability,
            'strength_text': strength_text,
            'price_change_pct': price_change_pct,
            'ml_status': ml_status
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in strength_text:
            # –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–∞–¥–µ–Ω–∏–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            message = f"""
üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {current_coin}:**

üö® {signal_type}

üí∞ **–¶–µ–Ω–∞:** ${current_price:,.4f}
üìâ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:** -{abs(price_change_pct):.1f}%
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìâ –û–∂–∏–¥–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤—Ö–æ–¥–∞

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**
            """
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message = f"""
üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {current_coin}:**

üö® {signal_type}

üí∞ **–¶–µ–Ω–∞:** ${current_price:,.4f}
üìà **–ü—Ä–æ–≥–Ω–æ–∑:** ${take_profit:,.4f} ({price_change_pct:+.1f}%)
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥

üéØ **–¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.4f}
‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${take_profit:,.4f}
‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.4f}

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}

üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**
            """
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        try:
            global use_advanced_chart
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {current_coin}, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: {use_advanced_chart}")
            
            if use_advanced_chart:
                logger.info("–°–æ–∑–¥–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                chart_buffer = create_advanced_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ {current_coin} –≤ —Å—Ç–∏–ª–µ TradingView\nüéØ –° –∫–Ω–æ–ø–∫–∞–º–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ –∏ –∑–æ–Ω–∞–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"
            else:
                logger.info("–°–æ–∑–¥–∞—é –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                chart_buffer = create_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {current_coin} —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"
            
            if chart_buffer:
                logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption (–≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É)
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=chart_buffer,
                    caption=message
                )
                logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(message)
        except Exception as chart_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_error}")
            import traceback
            logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏"""
    global current_coin
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        import ccxt
        import pandas as pd
        import numpy as np
        import joblib
        from datetime import datetime
        
        exchange = ccxt.binance()
        
        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        ohlcv = exchange.fetch_ohlcv(current_coin, '1h', limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(current_coin)
        current_price = ticker['last']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏
        try:
            minimum_detector = joblib.load('models/minimum_detector.pkl')
            maximum_detector = joblib.load('models/maximum_detector.pkl')
            scaler = joblib.load('models/scaler.pkl')
            feature_names = joblib.load('models/feature_names.pkl')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
            df_features = create_ml_features(df)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if len(df_features) > 0:
                features = df_features.iloc[-1:][feature_names].values
                features_scaled = scaler.transform(features)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                min_prob = minimum_detector.predict_proba(features_scaled)[0][1]
                max_prob = maximum_detector.predict_proba(features_scaled)[0][1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                if min_prob > 0.7:
                    signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                    entry_price = current_price
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(min_prob, "LONG")
                    
                    take_profit = current_price * (1 + profit_pct)
                    stop_loss = current_price * (1 - loss_pct)
                    probability = min_prob * 100
                    
                elif max_prob > 0.7:
                    # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–¥–µ–Ω–∏–∏
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(max_prob, "SHORT")
                    potential_fall_pct = profit_pct * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
                    
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max_prob * 100
                    strength_text = f"‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ {potential_fall_pct:.1f}%)"
                    
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max(min_prob, max_prob) * 100
                    strength_text = "‚ö™ –°–ª–∞–±—ã–π"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
            
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            latest_close = df['close'].iloc[-1]
            ema_20_latest = df['ema_20'].iloc[-1]
            ema_50_latest = df['ema_50'].iloc[-1]
            
            if latest_close > ema_20_latest > ema_50_latest:
                signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                entry_price = current_price
                take_profit = current_price * 1.035  # +3.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                stop_loss = current_price * 0.975    # -2.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                probability = 75.0
                strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
            elif latest_close < ema_20_latest < ema_50_latest:
                # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã –≤ fallback —Ç–æ–∂–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                probability = 75.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ 3.5%)"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–°–∏–º—É–ª—è—Ü–∏—è"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        price_change_pct = ((take_profit - entry_price) / entry_price) * 100
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        signal_data = {
            'symbol': current_coin,
            'signal_type': signal_type,
            'current_price': current_price,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'probability': probability,
            'strength_text': strength_text,
            'price_change_pct': price_change_pct,
            'ml_status': ml_status
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º –ø–∞–¥–µ–Ω–∏–∏ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —à–æ—Ä—Ç-—Å–∏–≥–Ω–∞–ª–æ–≤
        potential_fall_info = ""
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in strength_text:
            if "max_prob" in locals() and max_prob > 0.7:
                profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                potential_fall_pct = profit_pct * 100
                potential_fall_info = f"\nüìâ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:** -{potential_fall_pct:.1f}%"
            else:
                potential_fall_info = f"\nüìâ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:** -3.5%"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
        if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in strength_text:
            # –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–∞–¥–µ–Ω–∏–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            message = f"""
üö® {signal_type}

üí∞ **{current_coin}:** ${current_price:,.4f}
üìâ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:** -{abs(price_change_pct):.1f}%
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìâ –û–∂–∏–¥–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤—Ö–æ–¥–∞

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}
            """
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            message = f"""
üö® {signal_type}

üí∞ **{current_coin}:** ${current_price:,.4f}
üìà **–ü—Ä–æ–≥–Ω–æ–∑:** ${take_profit:,.4f} ({price_change_pct:+.1f}%){potential_fall_info}
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥

üéØ **–¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.4f}
‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${take_profit:,.4f}
‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.4f}

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}
            """
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        try:
            global use_advanced_chart
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {current_coin}, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: {use_advanced_chart}")
            
            if use_advanced_chart:
                logger.info("–°–æ–∑–¥–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                chart_buffer = create_advanced_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ {current_coin} –≤ —Å—Ç–∏–ª–µ TradingView\nüéØ –° –∫–Ω–æ–ø–∫–∞–º–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ –∏ –∑–æ–Ω–∞–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"
            else:
                logger.info("–°–æ–∑–¥–∞—é –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                chart_buffer = create_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {current_coin} —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"
            
            if chart_buffer:
                logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption (–≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É)
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=chart_buffer,
                    caption=message
                )
                logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(message)
        except Exception as chart_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_error}")
            import traceback
            logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {current_coin}: {str(e)}")

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /search"""
    try:
        query = ' '.join(context.args) if context.args else 'BTC'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        popular_coins = get_popular_coins()
        results = [coin for coin in popular_coins if query.upper() in coin.upper()][:5]
        
        if results:
            message = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{query}':**\n\n"
            for coin in results:
                message += f"‚Ä¢ {coin}\n"
        else:
            message = f"‚ùå –ú–æ–Ω–µ—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def set_coin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /set_coin –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–º–µ–Ω—ã –º–æ–Ω–µ—Ç—ã"""
    global current_coin
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É: /set_coin BTCUSDT")
        return
    
    coin = context.args[0].upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –º–æ–Ω–µ—Ç—ã
    if not coin.endswith('USDT'):
        coin = f"{coin}USDT"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Å —Å–ª–µ—à–µ–º –¥–ª—è API
    coin_with_slash = coin.replace('USDT', '/USDT')
    
    try:
        import ccxt
        exchange = ccxt.binance()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–æ–Ω–µ—Ç–∞
        ticker = exchange.fetch_ticker(coin_with_slash)
        current_price = ticker['last']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–Ω–µ—Ç—É
        current_coin = coin_with_slash
        
        message = f"""
‚úÖ **–ú–æ–Ω–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {coin_with_slash}**
üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** ${current_price:,.4f}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        await update.message.reply_text(message)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–µ—Ç—ã {coin}: {str(e)}")

async def toggle_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /toggle_chart –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    global use_advanced_chart
    
    use_advanced_chart = not use_advanced_chart
    
    chart_type = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ —Å—Ç–∏–ª–µ TradingView" if use_advanced_chart else "–û–±—ã—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"
    
    message = f"""
üîÑ **–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω!**

üìä **–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:** {chart_type}

{'‚úÖ –í–∫–ª—é—á–µ–Ω—ã:' if use_advanced_chart else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã:'}
‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ —Å —Ü–µ–Ω–∞–º–∏ bid/ask
‚Ä¢ –ó–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ TradingView

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    """
    
    await update.message.reply_text(message)

async def test_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test_chart –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        test_buffer = test_chart_creation()
        
        if test_buffer:
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=test_buffer,
                caption="‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é
async def handle_status_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        import ccxt
        exchange = ccxt.binance()
        ticker = exchange.fetch_ticker(current_coin)
        current_price = ticker['last']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        auto_status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã" if jobs else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
ü™ô –¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞: {current_coin}
üìà –¶–µ–Ω–∞ {current_coin}: ${current_price:,.4f}
üì° –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Binance
ü§ñ ML –º–æ–¥–µ–ª—å: –ê–∫—Ç–∏–≤–Ω–∞
üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: –í–∫–ª—é—á–µ–Ω—ã
üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã: {auto_status}

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ
        """
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def handle_coins_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç"""
    try:
        popular_coins = get_popular_coins()[:10]
        
        keyboard = []
        for coin in popular_coins:
            keyboard.append([InlineKeyboardButton(coin, callback_data=f"select_{coin}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "ü™ô **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**"
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {str(e)}")

async def handle_signals_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã
        import ccxt
        import pandas as pd
        import numpy as np
        import joblib
        from datetime import datetime
        
        exchange = ccxt.binance()
        
        # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        ohlcv = exchange.fetch_ohlcv(current_coin, '1h', limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        ticker = exchange.fetch_ticker(current_coin)
        current_price = ticker['last']
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏
        try:
            minimum_detector = joblib.load('models/minimum_detector.pkl')
            maximum_detector = joblib.load('models/maximum_detector.pkl')
            scaler = joblib.load('models/scaler.pkl')
            feature_names = joblib.load('models/feature_names.pkl')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
            df_features = create_ml_features(df)
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            if len(df_features) > 0:
                features = df_features.iloc[-1:][feature_names].values
                features_scaled = scaler.transform(features)
                
                # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                min_prob = minimum_detector.predict_proba(features_scaled)[0][1]
                max_prob = maximum_detector.predict_proba(features_scaled)[0][1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                if min_prob > 0.7:
                    signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                    entry_price = current_price
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(min_prob, "LONG")
                    
                    take_profit = current_price * (1 + profit_pct)
                    stop_loss = current_price * (1 - loss_pct)
                    probability = min_prob * 100
                    
                elif max_prob > 0.7:
                    # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∫ –æ–∂–∏–¥–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–¥–µ–Ω–∏–∏
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                    profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(max_prob, "SHORT")
                    potential_fall_pct = profit_pct * 100  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è
                    
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max_prob * 100
                    strength_text = f"‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ {potential_fall_pct:.1f}%)"
                    
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                    stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                    probability = max(min_prob, max_prob) * 100
                    strength_text = "‚ö™ –°–ª–∞–±—ã–π"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
            
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            latest_close = df['close'].iloc[-1]
            ema_20_latest = df['ema_20'].iloc[-1]
            ema_50_latest = df['ema_50'].iloc[-1]
            
            if latest_close > ema_20_latest > ema_50_latest:
                signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                entry_price = current_price
                take_profit = current_price * 1.035  # +3.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                stop_loss = current_price * 0.975    # -2.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                probability = 75.0
                strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
            elif latest_close < ema_20_latest < ema_50_latest:
                # –û—Ç–∫–ª—é—á–∞–µ–º –®–û–†–¢ —Å–∏–≥–Ω–∞–ª—ã –≤ fallback —Ç–æ–∂–µ, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                probability = 75.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π (–ø–∞–¥–µ–Ω–∏–µ 3.5%)"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                entry_price = current_price
                take_profit = current_price * 1.02
                stop_loss = current_price * 0.98
                probability = 50.0
                strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                
            ml_status = "–°–∏–º—É–ª—è—Ü–∏—è"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
        price_change_pct = ((take_profit - entry_price) / entry_price) * 100
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        signal_data = {
            'symbol': current_coin,
            'signal_type': signal_type,
            'current_price': current_price,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'probability': probability,
            'strength_text': strength_text,
            'price_change_pct': price_change_pct,
            'ml_status': ml_status
        }
        
        message = f"""
üìä **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {current_coin}:**

üö® {signal_type}

üí∞ **–¶–µ–Ω–∞:** ${current_price:,.4f}
üìà **–ü—Ä–æ–≥–Ω–æ–∑:** ${take_profit:,.4f} ({price_change_pct:+.1f}%)
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥

üéØ **–¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.4f}
‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${take_profit:,.4f}
‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.4f}

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}
        """
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–ª–∏ –æ–±—ã—á–Ω—ã–π)
        try:
            global use_advanced_chart
            if use_advanced_chart:
                chart_buffer = create_advanced_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ {current_coin} –≤ —Å—Ç–∏–ª–µ TradingView\nüéØ –° –∫–Ω–æ–ø–∫–∞–º–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ –∏ –∑–æ–Ω–∞–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"
            else:
                chart_buffer = create_trading_chart(current_coin, df, signal_data)
                chart_caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {current_coin} —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"
            
            if chart_buffer:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption (–≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É)
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=chart_buffer,
                    caption=message
                )
            else:
                await query.edit_message_text(message, reply_markup=reply_markup)
        except Exception as chart_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_error}")
            await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def handle_analyze_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
    await handle_signals_menu(query, context)  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É

async def handle_search_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç"""
    try:
        popular_coins = get_popular_coins()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        message = "üîç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:**\n\n"
        for i, coin in enumerate(popular_coins[:10], 1):
            message += f"{i}. {coin}\n"
        
        message += "\nüí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:** /set_coin <–º–æ–Ω–µ—Ç–∞>"
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def handle_auto_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        auto_status = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã" if jobs else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        
        message = f"""
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã:**

üìä **–°—Ç–∞—Ç—É—Å:** {auto_status}
üïê **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
üìà **–ê–Ω–∞–ª–∏–∑:** 20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
üèÜ **–û—Ç–ø—Ä–∞–≤–∫–∞:** —Ç–æ–ø-3 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
üéØ **–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã:** –í–∫–ª—é—á–µ–Ω—ã

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:**
        """
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        if jobs:
            keyboard.append([InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="auto_stop")])
        else:
            keyboard.append([InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="auto_start")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–∞–º–∏: {str(e)}")

async def handle_auto_start(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        for job in jobs:
            job.schedule_removal()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_repeating(
            send_auto_signals,
            interval=1800,  # 30 –º–∏–Ω—É—Ç = 1800 —Å–µ–∫—É–Ω–¥
            first=10,       # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            name="auto_signals",
            data={'chat_id': query.message.chat_id}
        )
        
        message = """
‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∑–∞–ø—É—â–µ–Ω—ã!**

üïê **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
üìä **–ê–Ω–∞–ª–∏–∑:** 20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
üèÜ **–û—Ç–ø—Ä–∞–≤–∫–∞:** —Ç–æ–ø-3 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–∞
‚è∞ **–ü–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª:** —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        """
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def handle_auto_stop(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        jobs = context.job_queue.get_jobs_by_name("auto_signals")
        for job in jobs:
            job.schedule_removal()
        
        message = """
üõë **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        """
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    global current_coin
    
    query = update.callback_query
    await query.answer()
    
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    if query.data.startswith("menu_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if query.data == "menu_status":
            await handle_status_menu(query, context)
        elif query.data == "menu_coins":
            await handle_coins_menu(query, context)
        elif query.data == "menu_signals":
            await handle_signals_menu(query, context)
        elif query.data == "menu_analyze":
            await handle_analyze_menu(query, context)
        elif query.data == "menu_search":
            await handle_search_menu(query, context)
        elif query.data == "menu_auto":
            await handle_auto_menu(query, context)
        elif query.data == "menu_back":
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            try:
                await start_command_from_callback(query, context)
                logger.info("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")
    
    elif query.data.startswith("select_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
        coin = query.data.replace("select_", "")
        current_coin = coin
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –º–æ–Ω–µ—Ç—ã
        await query.edit_message_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {coin}...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–Ω–µ—Ç—ã
            import ccxt
            import pandas as pd
            import numpy as np
            import joblib
            from datetime import datetime
            
            exchange = ccxt.binance()
            
            # –ü–æ–ª—É—á–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
            ohlcv = exchange.fetch_ohlcv(coin, '1h', limit=200)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            ticker = exchange.fetch_ticker(coin)
            current_price = ticker['last']
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å ML –º–æ–¥–µ–ª–∏
            try:
                minimum_detector = joblib.load('models/minimum_detector.pkl')
                maximum_detector = joblib.load('models/maximum_detector.pkl')
                scaler = joblib.load('models/scaler.pkl')
                feature_names = joblib.load('models/feature_names.pkl')
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
                df_features = create_ml_features(df)
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                if len(df_features) > 0:
                    features = df_features.iloc[-1:][feature_names].values
                    features_scaled = scaler.transform(features)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    min_prob = minimum_detector.predict_proba(features_scaled)[0][1]
                    max_prob = maximum_detector.predict_proba(features_scaled)[0][1]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
                    if min_prob > 0.7:
                        signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                        entry_price = current_price
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(min_prob, "LONG")
                        
                        take_profit = current_price * (1 + profit_pct)
                        stop_loss = current_price * (1 - loss_pct)
                        probability = min_prob * 100
                        
                    elif max_prob > 0.7:
                        signal_type = "üî¥ –¢–û–ß–ö–ê –í–•–û–î–ê –®–û–†–¢"
                        entry_price = current_price
                        
                        # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                        profit_pct, loss_pct, strength_text = calculate_dynamic_percentages(max_prob, "SHORT")
                        
                        take_profit = current_price * (1 - profit_pct)  # –î–ª—è —à–æ—Ä—Ç–∞
                        stop_loss = current_price * (1 + loss_pct)     # –î–ª—è —à–æ—Ä—Ç–∞
                        probability = max_prob * 100
                        
                    else:
                        signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                        entry_price = current_price
                        take_profit = current_price * 1.02  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π +2%
                        stop_loss = current_price * 0.98   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π -2%
                        probability = max(min_prob, max_prob) * 100
                        strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    take_profit = current_price * 1.02
                    stop_loss = current_price * 0.98
                    probability = 50.0
                    strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                    
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                
            except Exception as e:
                # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
                latest_close = df['close'].iloc[-1]
                ema_20_latest = df['ema_20'].iloc[-1]
                ema_50_latest = df['ema_50'].iloc[-1]
                
                if latest_close > ema_20_latest > ema_50_latest:
                    signal_type = "üü¢ –¢–û–ß–ö–ê –í–•–û–î–ê –õ–û–ù–ì"
                    entry_price = current_price
                    take_profit = current_price * 1.035  # +3.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                    stop_loss = current_price * 0.975    # -2.5% –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
                    probability = 75.0
                    strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
                elif latest_close < ema_20_latest < ema_50_latest:
                    signal_type = "üî¥ –¢–û–ß–ö–ê –í–•–û–î–ê –®–û–†–¢"
                    entry_price = current_price
                    take_profit = current_price * 0.965  # -3.5% –¥–ª—è —à–æ—Ä—Ç–∞
                    stop_loss = current_price * 1.025    # +2.5% –¥–ª—è —à–æ—Ä—Ç–∞
                    probability = 75.0
                    strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    entry_price = current_price
                    take_profit = current_price * 1.02
                    stop_loss = current_price * 0.98
                    probability = 50.0
                    strength_text = "‚ö™ –°–ª–∞–±—ã–π"
                    
                ml_status = "–°–∏–º—É–ª—è—Ü–∏—è"
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
            price_change_pct = ((take_profit - entry_price) / entry_price) * 100
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            signal_data = {
                'symbol': coin,
                'signal_type': signal_type,
                'current_price': current_price,
                'entry_price': entry_price,
                'take_profit': take_profit,
                'stop_loss': stop_loss,
                'probability': probability,
                'strength_text': strength_text,
                'price_change_pct': price_change_pct,
                'ml_status': ml_status
            }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞
            if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_type and "–ø–∞–¥–µ–Ω–∏–µ" in strength_text:
                # –î–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è —Å –ø–∞–¥–µ–Ω–∏–µ–º –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
                message = f"""
üìä **–ê–Ω–∞–ª–∏–∑ {coin}:**

üö® {signal_type}

üí∞ **–¶–µ–Ω–∞:** ${current_price:,.4f}
üìâ **–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:** -{abs(price_change_pct):.1f}%
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìâ –û–∂–∏–¥–∞–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤—Ö–æ–¥–∞

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}
                """
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                message = f"""
üìä **–ê–Ω–∞–ª–∏–∑ {coin}:**

üö® {signal_type}

üí∞ **–¶–µ–Ω–∞:** ${current_price:,.4f}
üìà **–ü—Ä–æ–≥–Ω–æ–∑:** ${take_profit:,.4f} ({price_change_pct:+.1f}%)
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {probability:.1f}% {strength_text}
üìä **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥

üéØ **–¢–û–ß–ö–ò –¢–û–†–ì–û–í–õ–ò:**
‚Ä¢ **–í—Ö–æ–¥:** ${entry_price:,.4f}
‚Ä¢ **–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${take_profit:,.4f}
‚Ä¢ **–°—Ç–æ–ø-–ª–æ—Å—Å:** ${stop_loss:,.4f}

üïê {datetime.now().strftime('%Y-%m-%d %H:%M')} | ü§ñ ML: {ml_status}
                """
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_back")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            try:
                global use_advanced_chart
                logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {coin}, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º: {use_advanced_chart}")
                
                if use_advanced_chart:
                    logger.info("–°–æ–∑–¥–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                    chart_buffer = create_advanced_trading_chart(coin, df, signal_data)
                    chart_caption = f"üìà –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ {coin} –≤ —Å—Ç–∏–ª–µ TradingView\nüéØ –° –∫–Ω–æ–ø–∫–∞–º–∏ –ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨ –∏ –∑–æ–Ω–∞–º–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞"
                else:
                    logger.info("–°–æ–∑–¥–∞—é –æ–±—ã—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
                    chart_buffer = create_trading_chart(coin, df, signal_data)
                    chart_caption = f"üìà –ì—Ä–∞—Ñ–∏–∫ {coin} —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏"
                
                if chart_buffer:
                    logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è—é...")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ caption (–≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É)
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=chart_buffer,
                        caption=message
                    )
                    logger.info("–ì—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                    await query.edit_message_text(message, reply_markup=reply_markup)
            except Exception as chart_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {chart_error}")
                import traceback
                logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                await query.edit_message_text(message, reply_markup=reply_markup)
                
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {coin}: {str(e)}")
    
    elif query.data.startswith("auto_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        if query.data == "auto_start":
            await handle_auto_start(query, context)
        elif query.data == "auto_stop":
            await handle_auto_stop(query, context)

async def start_command_from_callback(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ callback"""
    global current_coin
    
    logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    logger.info(f"üì± –¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞: {current_coin}")
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Trading Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    await query.edit_message_text(welcome_message, reply_markup=reply_markup)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_coin = "BTC/USDT"
use_advanced_chart = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ ML Telegram Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ (v22.3+)")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config["telegram_token"]).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("coins", coins_command))
    application.add_handler(CommandHandler("set_coin", set_coin_command))
    application.add_handler(CommandHandler("signals", signals_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("toggle_chart", toggle_chart_command))
    application.add_handler(CommandHandler("test_chart", test_chart_command))
    application.add_handler(CommandHandler("auto_start", auto_start_command))
    application.add_handler(CommandHandler("auto_stop", auto_stop_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()


