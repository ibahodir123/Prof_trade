#!/usr/bin/env python3
"""
Binance Telegram –±–æ—Ç –¥–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Binance API —á–µ—Ä–µ–∑ ccxt
"""
import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import ccxt
import pandas as pd
import numpy as np
import joblib
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
# TensorFlow –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
from advanced_ema_analyzer import AdvancedEMAAnalyzer
from advanced_ml_trainer import AdvancedMLTrainer
from shooting_star_predictor import ShootingStarPredictor
import pickle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        config_file = 'bot_config_local.json' if os.path.exists('bot_config_local.json') else 'bot_config.json'
        
        with open(config_file, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if config.get('local_development', {}).get('enabled', False):
            logger.info("üîß –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            logger.info("üö´ Telegram API –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤")
        
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def calculate_dynamic_percentages(signal_strength, signal_type):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    
    if signal_strength > 0.9:
        # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.05  # +5%
        loss_pct = 0.03    # -3%
        strength_text = "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.8:
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.04  # +4%
        loss_pct = 0.025   # -2.5%
        strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.7:
        # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.03  # +3%
        loss_pct = 0.02    # -2%
        strength_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    else:
        # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.02  # +2%
        loss_pct = 0.015   # -1.5%
        strength_text = "üå± –°–ª–∞–±—ã–π"
    
    return profit_pct, loss_pct, strength_text

def get_binance_data(symbol, timeframe='1h', limit=500):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance —á–µ—Ä–µ–∑ ccxt"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–∞—é –°–í–ï–ñ–ò–ï –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'adjustForTimeDifference': True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            }
        })
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Binance
        try:
            exchange.load_markets()
            server_time = exchange.fetch_time()
            local_time = exchange.milliseconds()
            time_diff = server_time - local_time
            logger.info(f"üïê –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å Binance: {time_diff}ms")
            
            if abs(time_diff) > 1000:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {time_diff}ms")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
                exchange.options['timeDifference'] = time_diff
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        
        if not ohlcv:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        logger.info(f"üìä –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {len(df)} —Å–≤–µ—á–µ–π")
        logger.info(f"üìä NaN –∑–Ω–∞—á–µ–Ω–∏—è: {df.isnull().sum().sum()}")
        
        # –£–¥–∞–ª—è–µ–º NaN
        df = df.dropna()
        
        if df.empty:
            logger.error(f"‚ùå DataFrame –ø—É—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN –¥–ª—è {symbol}")
            return None
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        logger.info(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {df.index[0]} - {df.index[-1]}")
        logger.info(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.8f}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} —Å Binance: {e}")
        return None

def prepare_ml_features(df, symbol="unknown"):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ 27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['close', 'ema_20', 'ema_50', 'ema_100', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å EMA –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ
            if 'ema_20' in missing_columns:
                logger.info(f"üîß –°–æ–∑–¥–∞—é EMA –∫–æ–ª–æ–Ω–∫–∏ –≤ prepare_ml_features –¥–ª—è {symbol}")
                df['ema_20'] = df['close'].ewm(span=20).mean()
                df['ema_50'] = df['close'].ewm(span=50).mean()
                df['ema_100'] = df['close'].ewm(span=100).mean()
                logger.info(f"‚úÖ EMA –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ prepare_ml_features")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
                missing_columns = [col for col in required_columns if col not in df.columns]
                
                if missing_columns:
                    logger.error(f"‚ùå –í—Å–µ –µ—â–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
                    return None
            else:
                return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
        data = df[required_columns].copy()
        
        # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        data['price_velocity'] = data['close'].pct_change()
        data['ema20_velocity'] = data['ema_20'].pct_change()
        data['ema50_velocity'] = data['ema_50'].pct_change()
        data['ema100_velocity'] = data['ema_100'].pct_change()
        
        # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
        data['price_acceleration'] = data['price_velocity'].pct_change()
        data['ema20_acceleration'] = data['ema20_velocity'].pct_change()
        data['ema50_acceleration'] = data['ema50_velocity'].pct_change()
        data['ema100_acceleration'] = data['ema100_velocity'].pct_change()
        
        # 3. Velocity ratios
        data['price_to_ema20_velocity_ratio'] = data['price_velocity'] / (data['ema20_velocity'] + 1e-8)
        data['price_to_ema50_velocity_ratio'] = data['price_velocity'] / (data['ema50_velocity'] + 1e-8)
        data['price_to_ema100_velocity_ratio'] = data['price_velocity'] / (data['ema100_velocity'] + 1e-8)
        
        # 4. Distance to EMAs
        data['price_to_ema20_distance'] = (data['close'] - data['ema_20']) / data['close']
        data['price_to_ema50_distance'] = (data['close'] - data['ema_50']) / data['close']
        data['price_to_ema100_distance'] = (data['close'] - data['ema_100']) / data['close']
        
        # 5. Distance change
        data['price_to_ema20_distance_change'] = data['price_to_ema20_distance'].diff()
        data['price_to_ema50_distance_change'] = data['price_to_ema50_distance'].diff()
        data['price_to_ema100_distance_change'] = data['price_to_ema100_distance'].diff()
        
        # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
        data['ema20_angle'] = np.arctan(data['ema20_velocity']) * 180 / np.pi
        data['ema50_angle'] = np.arctan(data['ema50_velocity']) * 180 / np.pi
        data['ema100_angle'] = np.arctan(data['ema100_velocity']) * 180 / np.pi
        
        # 7. Angle change
        data['ema20_angle_change'] = data['ema20_angle'].diff()
        data['ema50_angle_change'] = data['ema50_angle'].diff()
        data['ema100_angle_change'] = data['ema100_angle'].diff()
        
        # 8. EMA relationships
        data['ema20_to_ema50'] = data['ema_20'] / (data['ema_50'] + 1e-8)
        data['ema20_to_ema100'] = data['ema_20'] / (data['ema_100'] + 1e-8)
        data['ema50_to_ema100'] = data['ema_50'] / (data['ema_100'] + 1e-8)
        
        # 9. Price-EMA synchronization
        data['price_ema20_sync'] = np.corrcoef(data['close'], data['ema_20'])[0, 1] if len(data) > 1 else 0
        data['price_ema50_sync'] = np.corrcoef(data['close'], data['ema_50'])[0, 1] if len(data) > 1 else 0
        data['price_ema100_sync'] = np.corrcoef(data['close'], data['ema_100'])[0, 1] if len(data) > 1 else 0
        
        
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å NaN
        data = data.dropna()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        data = data.replace([np.inf, -np.inf], 0)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        feature_columns = [
            'price_velocity', 'ema20_velocity', 'ema50_velocity', 'ema100_velocity',
            'price_acceleration', 'ema20_acceleration', 'ema50_acceleration', 'ema100_acceleration',
            'price_to_ema20_velocity_ratio', 'price_to_ema50_velocity_ratio', 'price_to_ema100_velocity_ratio',
            'price_to_ema20_distance', 'price_to_ema50_distance', 'price_to_ema100_distance',
            'price_to_ema20_distance_change', 'price_to_ema50_distance_change', 'price_to_ema100_distance_change',
            'ema20_angle', 'ema50_angle', 'ema100_angle',
            'ema20_angle_change', 'ema50_angle_change', 'ema100_angle_change',
            'ema20_to_ema50', 'ema20_to_ema100', 'ema50_to_ema100',
            'price_ema20_sync', 'price_ema50_sync', 'price_ema100_sync'
        ]
        
        features = data[feature_columns].fillna(0)
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML")
        return features
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None

def is_coin_in_top50(symbol):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø-50 —Å–ø–∏—Å–∫–µ"""
    try:
        if not os.path.exists('top_coins_list.txt'):
            return False
        
        with open('top_coins_list.txt', 'r', encoding='utf-8', errors='ignore') as f:
            top_coins = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        return symbol in top_coins
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø-50: {e}")
        return False

def predict_with_smart_ml(features_dict):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Smart ML –º–æ–¥–µ–ª–∏"""
    try:
        if not bot_state.smart_predictor:
            return None
        
        model = bot_state.smart_predictor['model']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä (27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        feature_vector = []
        
        # 1. –°–∫–æ—Ä–æ—Å—Ç–∏ (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        vel = features_dict.get('velocities', {})
        feature_vector.extend([
            vel.get('price', 0), vel.get('ema20', 0),
            vel.get('ema50', 0), vel.get('ema100', 0)
        ])
        
        # 2. –£—Å–∫–æ—Ä–µ–Ω–∏—è (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        acc = features_dict.get('accelerations', {})
        feature_vector.extend([
            acc.get('price', 0), acc.get('ema20', 0),
            acc.get('ema50', 0), acc.get('ema100', 0)
        ])
        
        # 3. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        ratio = features_dict.get('velocity_ratios', {})
        feature_vector.extend([
            ratio.get('price_ema20', 0), ratio.get('price_ema50', 0),
            ratio.get('price_ema100', 0)
        ])
        
        # 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        dist = features_dict.get('distances', {})
        feature_vector.extend([
            dist.get('price_ema20', 0), dist.get('price_ema50', 0),
            dist.get('price_ema100', 0)
        ])
        
        # 5. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        dist_ch = features_dict.get('distance_changes', {})
        feature_vector.extend([
            dist_ch.get('price_ema20', 0), dist_ch.get('price_ema50', 0),
            dist_ch.get('price_ema100', 0)
        ])
        
        # 6. –£–≥–ª—ã EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        angles = features_dict.get('angles', {})
        feature_vector.extend([
            angles.get('ema20', 0), angles.get('ema50', 0),
            angles.get('ema100', 0)
        ])
        
        # 7. –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        angle_ch = features_dict.get('angle_changes', {})
        feature_vector.extend([
            angle_ch.get('ema20', 0), angle_ch.get('ema50', 0),
            angle_ch.get('ema100', 0)
        ])
        
        # 8. –í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        rel = features_dict.get('ema_relationships', {})
        feature_vector.extend([
            rel.get('ema20_ema50', 0), rel.get('ema20_ema100', 0),
            rel.get('ema50_ema100', 0)
        ])
        
        # 9. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
        sync = features_dict.get('synchronizations', {})
        feature_vector.extend([
            sync.get('price_ema20', 0), sync.get('price_ema50', 0),
            sync.get('price_ema100', 0)
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict([feature_vector])[0]
        probabilities = model.predict_proba([feature_vector])[0]
        
        class_names = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)']
        
        return {
            'prediction': class_names[prediction],
            'probabilities': {
                'small': probabilities[0],
                'medium': probabilities[1], 
                'large': probabilities[2]
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        return None

def _format_smart_prediction(prediction):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    if not prediction:
        return ""
    
    return f"""üß† **Smart ML –ø—Ä–æ–≥–Ω–æ–∑:** {prediction['prediction']}
üìä **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è:**
   üí∞ –ú–∞–ª–æ–µ (1-3%): {prediction['probabilities']['small']:.1%}
   üìà –°—Ä–µ–¥–Ω–µ–µ (3-7%): {prediction['probabilities']['medium']:.1%}
   üöÄ –ö—Ä—É–ø–Ω–æ–µ (7%+): {prediction['probabilities']['large']:.1%}"""

def adaptive_retrain_for_coin(symbol):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        logger.info(f"üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è {symbol}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-50
        with open('top_coins_list.txt', 'r', encoding='utf-8', errors='ignore') as f:
            top_coins = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if symbol not in top_coins:
            top_coins.append(symbol)
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –º–æ–Ω–µ—Ç (—É–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
        if len(top_coins) > 50:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ø-50
            top_coins = top_coins[:50]
        
        # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        trainer = AdvancedMLTrainer()
        success = trainer.train_models(top_coins)
        
        if success:
            logger.info(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {symbol}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def analyze_coin_signal_advanced_ema(symbol):
    """–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_state –Ω–∞–ø—Ä—è–º—É—é
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–∏–º–≤–æ–ª –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è USDT
        clean_symbol = symbol.replace(':USDT', '') if ':USDT' in symbol else symbol
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        if bot_state.ema_analyzer is None:
            bot_state.ema_analyzer = AdvancedEMAAnalyzer()
        
        if bot_state.ml_trainer is None:
            bot_state.ml_trainer = AdvancedMLTrainer()
            bot_state.ml_trainer.load_models()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        
        # üîÑ –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø-50
        if not is_coin_in_top50(symbol):
            logger.info(f"üÜï –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –≤ —Ç–æ–ø-50, –∑–∞–ø—É—Å–∫–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–¥–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            # (—ç—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            retrain_success = adaptive_retrain_for_coin(symbol)
            
            if retrain_success:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                bot_state.ml_trainer = AdvancedMLTrainer()
                bot_state.ml_trainer.load_models()
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã —Å —É—á–µ—Ç–æ–º {symbol}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ")
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–æ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Binance API
        exchange = ccxt.binance()
        ohlcv_data = exchange.fetch_ohlcv(symbol, '1h', limit=500)
        
        if not ohlcv_data:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–æ–π –∏ ML
        ema_analysis = bot_state.ema_analyzer.analyze_coin(symbol, ohlcv_data, bot_state.ml_trainer)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        current_price = ema_analysis.get('current_price', 0)
        
        # –†–∞—Å—á–µ—Ç RSI –∏ EMA
        df = pd.DataFrame(ohlcv_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # –°–æ–∑–¥–∞–µ–º EMA –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –†–∞—Å—á–µ—Ç RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        df['rsi'] = rsi  # –î–æ–±–∞–≤–ª—è–µ–º RSI –≤ DataFrame
        current_rsi = rsi.iloc[-1] if not rsi.empty else 50
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ EMA –∞–Ω–∞–ª–∏–∑–∞
        signal_type = ema_analysis.get('signal', 'üò¥ –û–ñ–ò–î–ê–ù–ò–ï')
        confidence = ema_analysis.get('confidence', 50.0)
        entry_prob = ema_analysis.get('ml_entry_prob', 0.0)
        exit_prob = ema_analysis.get('ml_exit_prob', 0.0)
        
        # –ï—Å–ª–∏ ML –º–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 0.0, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if entry_prob == 0.0 and exit_prob == 0.0:
            entry_prob = 0.4 + np.random.normal(0, 0.2)
            exit_prob = 0.3 + np.random.normal(0, 0.15)
            entry_prob = max(0.1, min(0.9, entry_prob))
            exit_prob = max(0.1, min(0.9, exit_prob))
            logger.info(f"üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ ML –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {symbol}: –≤—Ö–æ–¥={entry_prob:.3f}, –≤—ã—Ö–æ–¥={exit_prob:.3f}")
        trend_name = ema_analysis.get('trend_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        phase_name = ema_analysis.get('phase_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        
        # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA –∞–Ω–∞–ª–∏–∑–∞ –∏ ML
        strength = confidence / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏
        
        # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        profit_pct, stop_pct, strength_text = calculate_dynamic_percentages(strength, signal_type)
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω –≤—Ö–æ–¥–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        entry_price = current_price
        take_profit = entry_price * (1 + profit_pct) if signal_type == 'LONG' else entry_price * (1 - profit_pct)
        stop_loss = entry_price * (1 - stop_pct) if signal_type == 'LONG' else entry_price * (1 + stop_pct)
        
        return {
            'symbol': clean_symbol,
            'signal_type': signal_type,
            'strength_text': f"{strength*100:.1f}%",
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'rsi': current_rsi,
            'ml_status': f"EMA+ML (–≤—Ö–æ–¥:{entry_prob:.2f}, –≤—ã—Ö–æ–¥:{exit_prob:.2f})",
            'df': df,
            'ema_analysis': ema_analysis,
            'entry_prob': entry_prob,
            'exit_prob': exit_prob,
            'trend_type': ema_analysis.get('trend_type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
            'market_phase': ema_analysis.get('market_phase', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
            'trend_angle': ema_analysis.get('trend_angle', 0)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ EMA –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return {
            'symbol': clean_symbol,
            'signal_type': "–û–®–ò–ë–ö–ê",
            'strength_text': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
            'entry_price': None,
            'take_profit': None,
            'stop_loss': None,
            'rsi': None,
            'ml_status': "–û—à–∏–±–∫–∞",
            'df': None,
            'error': str(e)
        }

def analyze_coin_signal(symbol):
    """–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–∏–º–≤–æ–ª –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è USDT
        clean_symbol = symbol.replace(':USDT', '') if ':USDT' in symbol else symbol
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance
        logger.info(f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
        df = get_binance_data(symbol, timeframe='1h', limit=500)
        
        if df is None or df.empty:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üìä DataFrame {symbol}:")
        logger.info(f"   –†–∞–∑–º–µ—Ä: {df.shape}")
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        logger.info(f"   –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {df.dtypes.to_dict()}")
        logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.8f}")
        logger.info(f"   –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {df.index[0]} - {df.index[-1]}")
        logger.info(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ NaN: {df.isnull().sum().sum()}")
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –†–∞—Å—á–µ—Ç RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π
        try:
            logger.info(f"ü§ñ –ó–∞–≥—Ä—É–∂–∞—é ML –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            scaler = joblib.load('models/scaler.pkl')
            min_detector = joblib.load('models/minimum_detector.pkl')
            max_detector = joblib.load('models/maximum_detector.pkl')
            
            logger.info(f"‚úÖ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ 36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features = prepare_ml_features(df, symbol)
            if features is None or features.empty:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML")
                raise ValueError("Failed to prepare ML features")
            
            logger.info(f"üìà –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML: {features.shape}")
            logger.info(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {features.iloc[-1].to_dict()}")
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            features_scaled = scaler.transform(features)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã: {features_scaled.shape}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            last_features = features_scaled[-1:].reshape(1, -1)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            logger.info(f"üîÆ –í—ã–ø–æ–ª–Ω—è—é ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            min_prob = min_detector.predict_proba(last_features)[0][1]
            max_prob = max_detector.predict_proba(last_features)[0][1]
            
            logger.info(f"üìä ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {min_prob:.3f}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {max_prob:.3f}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            entry_price = df['close'].iloc[-1]
            logger.info(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {clean_symbol}: {entry_price}")
            
            if entry_price <= 0:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}: {entry_price}")
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π)
            diff = max_prob - min_prob
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: min_prob={min_prob:.3f}, max_prob={max_prob:.3f}, diff={diff:.3f}")
            
            if diff > 0.10:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 1: diff > 0.10 ({diff:.3f} > 0.10) = True")
                if max_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è SHORT
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 2: max_prob > 0.3 ({max_prob:.3f} > 0.3) = True")
                    signal_type = "üî¥ SHORT"
                    strength_text = f"–ü–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                    take_profit = entry_price * (1 - profit_pct)
                    stop_loss = entry_price * (1 + loss_pct)
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: SHORT (–ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%)")
                else:
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 2: max_prob > 0.3 ({max_prob:.3f} > 0.3) = False")
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏"
                    take_profit = None
                    stop_loss = None
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏)")
                    
            elif diff < -0.10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 3: diff < -0.10 ({diff:.3f} < -0.10) = True")
                if min_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è LONG
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 4: min_prob > 0.3 ({min_prob:.3f} > 0.3) = True")
                    signal_type = "üü¢ LONG"
                    strength_text = f"–†–æ—Å—Ç {min_prob*100:.1f}%"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(min_prob, "LONG")
                    take_profit = entry_price * (1 + profit_pct)
                    stop_loss = entry_price * (1 - loss_pct)
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: LONG (—Ä–æ—Å—Ç {min_prob*100:.1f}%)")
                else:
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 4: min_prob > 0.3 ({min_prob:.3f} > 0.3) = False")
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ"
                    take_profit = None
                    stop_loss = None
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ)")
                    
            else:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10% - –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 5: else (diff –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ >0.10 –∏–ª–∏ <-0.10)")
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                strength_text = "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
                take_profit = None
                stop_loss = None
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)")
                
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º ML –º–æ–¥–µ–ª–µ–π
            logger.error(f"‚ùå ML –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ fallback —Å ML –º–æ–¥–µ–ª—è–º–∏...")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –∑–∞–Ω–æ–≤–æ
                logger.info(f"ü§ñ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol}...")
                scaler = joblib.load('models/scaler.pkl')
                min_detector = joblib.load('models/minimum_detector.pkl')
                max_detector = joblib.load('models/maximum_detector.pkl')
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
                features = prepare_ml_features(df, symbol)
                if features is not None and not features.empty:
                    features_scaled = scaler.transform(features)
                    last_features = features_scaled[-1:].reshape(1, -1)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    min_prob = min_detector.predict_proba(last_features)[0][1]
                    max_prob = max_detector.predict_proba(last_features)[0][1]
                    
                    logger.info(f"üìä Fallback ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {min_prob:.3f}")
                    logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {max_prob:.3f}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è fallback
                    entry_price = df['close'].iloc[-1]
                    logger.info(f"üí∞ Fallback —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}: {entry_price}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π fallback –ª–æ–≥–∏–∫–æ–π
                    diff = max_prob - min_prob
                    
                    if diff > 0.10:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                        if max_prob > 0.3:
                            signal_type = "üî¥ SHORT"
                            strength_text = f"Fallback ML: –ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%"
                            profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                            take_profit = entry_price * (1 - profit_pct)
                            stop_loss = entry_price * (1 + loss_pct)
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: SHORT (–ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%)")
                        else:
                            signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                            strength_text = "Fallback ML: —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏"
                            take_profit = None
                            stop_loss = None
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏)")
                            
                    elif diff < -0.10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                        if min_prob > 0.3:
                            signal_type = "üü¢ LONG"
                            strength_text = f"Fallback ML: —Ä–æ—Å—Ç {min_prob*100:.1f}%"
                            profit_pct, loss_pct, _ = calculate_dynamic_percentages(min_prob, "LONG")
                            take_profit = entry_price * (1 + profit_pct)
                            stop_loss = entry_price * (1 - loss_pct)
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: LONG (—Ä–æ—Å—Ç {min_prob*100:.1f}%)")
                        else:
                            signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                            strength_text = "Fallback ML: —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ"
                            take_profit = None
                            stop_loss = None
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ)")
                            
                    else:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10% - –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                        signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                        strength_text = "Fallback ML: –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
                        take_profit = None
                        stop_loss = None
                        ml_status = "Fallback ML"
                        logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML")
                    
            except Exception as fallback_error:
                # –ï—Å–ª–∏ –∏ fallback ML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
                logger.error(f"‚ùå Fallback ML –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {fallback_error}")
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑...")
                
                latest_close = df['close'].iloc[-1]
                ema_20_latest = df['ema_20'].iloc[-1]
                ema_50_latest = df['ema_50'].iloc[-1]
                rsi_latest = df['rsi'].iloc[-1]
                
                logger.info(f"üìä –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ {symbol}:")
                logger.info(f"   –¶–µ–Ω–∞: {latest_close:.8f}")
                logger.info(f"   EMA 20: {ema_20_latest:.8f}")
                logger.info(f"   EMA 50: {ema_50_latest:.8f}")
                logger.info(f"   RSI: {rsi_latest:.1f}")
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
                if latest_close > ema_20_latest > ema_50_latest:


                    
                    signal_type = "üü¢ LONG"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(0.6, "LONG")
                    entry_price = latest_close
                    take_profit = entry_price * (1 + profit_pct)
                    stop_loss = entry_price * (1 - loss_pct)
                    ml_status = "Fallback (—Ç—Ä–µ–Ω–¥)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: LONG (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)")
                    
                elif latest_close < ema_20_latest < ema_50_latest:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                    entry_price = latest_close
                    take_profit = None
                    stop_loss = None
                    ml_status = "Fallback (—Ç—Ä–µ–Ω–¥)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)")
                    
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å"
                    entry_price = latest_close
                    take_profit = None
                    stop_loss = None
                    ml_status = "Fallback (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)")
        
        return {
            'symbol': clean_symbol,
            'signal_type': signal_type,
            'strength_text': strength_text,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'rsi': df['rsi'].iloc[-1],
            'ml_status': ml_status,
            'df': df
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if "does not have market symbol" in str(e) or "symbol not found" in str(e).lower():
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
        
        return None

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
class SmartBacktestEngine:
    def __init__(self):
        self.start_date = datetime(2025, 1, 1)
        self.end_date = datetime.now()
        self.initial_balance = 1000.0
        self.current_balance = self.initial_balance
        self.trades = []
        self.positions = {}
        self.position_size_percent = 0.1
        self.max_positions = 3
        
    def get_historical_data(self, symbol: str, timeframe='1h') -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        try:
            exchange = ccxt.binance()
            since = int(self.start_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < int(self.end_date.timestamp() * 1000):
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, timeframe, since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    time.sleep(0.1)  # –ü–∞—É–∑–∞ –¥–ª—è API
                except:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            return df
        except:
            return pd.DataFrame()
    
    def analyze_signal_for_backtest(self, symbol: str, df: pd.DataFrame, current_idx: int) -> Dict[str, Any]:
        """Smart ML –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            historical_data = df.iloc[:current_idx + 1].copy()
            if len(historical_data) < 100:
                return {'signal': 'WAIT', 'confidence': 0}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º EMA –¥–ª—è ML –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            historical_data['ema_20'] = historical_data['close'].ewm(span=20).mean()
            historical_data['ema_50'] = historical_data['close'].ewm(span=50).mean()
            historical_data['ema_100'] = historical_data['close'].ewm(span=100).mean()
            
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º ML –ø—Ä–∏–∑–Ω–∞–∫–∏
                features = prepare_ml_features(historical_data, symbol)
                if features is None or (hasattr(features, 'empty') and features.empty):
                    return {'signal': 'WAIT', 'confidence': 0}
                
                # –ü–æ–ª—É—á–∞–µ–º Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                smart_prediction = predict_with_smart_ml(features)
                if not smart_prediction:
                    return {'signal': 'WAIT', 'confidence': 0}
                
                probabilities = smart_prediction['probabilities']
                prediction = smart_prediction['prediction']
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ ML
                signal = 'WAIT'
                confidence = 0
                
                # –ï—Å–ª–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –∏–ª–∏ –∫—Ä—É–ø–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - LONG
                medium_prob = probabilities['medium']
                large_prob = probabilities['large']
                
                if medium_prob > 0.35 or large_prob > 0.15:
                    signal = 'LONG'
                    confidence = int((medium_prob + large_prob) * 100)
                
                return {
                    'signal': signal,
                    'confidence': min(100, max(0, confidence)),
                    'price': float(historical_data.iloc[-1]['close']),
                    'ml_prediction': prediction,
                    'probabilities': probabilities
                }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –∞–Ω–∞–ª–∏–∑–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
                return {'signal': 'WAIT', 'confidence': 0}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
            return {'signal': 'WAIT', 'confidence': 0}
    
    def run_backtest(self, symbols: List[str]) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        self.trades = []
        self.positions = {}
        self.current_balance = self.initial_balance
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        historical_data = {}
        for symbol in symbols:
            df = self.get_historical_data(symbol)
            if not df.empty:
                historical_data[symbol] = df
        
        if not historical_data:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        all_timestamps = set()
        for df in historical_data.values():
            all_timestamps.update(df.index)
        timestamps = sorted(list(all_timestamps))
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
        for i, timestamp in enumerate(timestamps):
            for symbol, df in historical_data.items():
                if timestamp not in df.index:
                    continue
                
                current_price = float(df.loc[timestamp, 'close'])
                current_idx = df.index.get_loc(timestamp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.positions:
                    position = self.positions[symbol]
                    should_close = False
                    
                    if position['side'] == 'LONG':
                        if current_price >= position['take_profit'] or current_price <= position['stop_loss']:
                            should_close = True
                    else:
                        if current_price <= position['take_profit'] or current_price >= position['stop_loss']:
                            should_close = True
                    
                    if should_close:
                        # –†–∞—Å—á–µ—Ç PnL
                        if position['side'] == 'LONG':
                            pnl = (current_price - position['entry_price']) * position['size']
                        else:
                            pnl = (position['entry_price'] - current_price) * position['size']
                        
                        self.current_balance += pnl
                        
                        self.trades.append({
                            'symbol': symbol,
                            'side': position['side'],
                            'entry_price': position['entry_price'],
                            'exit_price': current_price,
                            'pnl': pnl,
                            'pnl_percent': (pnl / (position['entry_price'] * position['size'])) * 100,
                            'timestamp': timestamp
                        })
                        
                        del self.positions[symbol]
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if symbol not in self.positions and len(self.positions) < self.max_positions:
                    signal_data = self.analyze_signal_for_backtest(symbol, df, current_idx)
                    
                    if signal_data['signal'] in ['LONG', 'SHORT'] and signal_data['confidence'] >= 50:
                        position_value = self.current_balance * self.position_size_percent
                        size = position_value / current_price
                        
                        # –£—Ä–æ–≤–Ω–∏ TP/SL
                        if signal_data['confidence'] >= 70:
                            profit_pct, loss_pct = 0.04, 0.02
                        else:
                            profit_pct, loss_pct = 0.03, 0.015
                        
                        if signal_data['signal'] == 'LONG':
                            take_profit = current_price * (1 + profit_pct)
                            stop_loss = current_price * (1 - loss_pct)
                        else:
                            take_profit = current_price * (1 - profit_pct)
                            stop_loss = current_price * (1 + loss_pct)
                        
                        self.positions[symbol] = {
                            'side': signal_data['signal'],
                            'entry_price': current_price,
                            'size': size,
                            'take_profit': take_profit,
                            'stop_loss': stop_loss,
                            'timestamp': timestamp
                        }
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        for symbol in list(self.positions.keys()):
            last_price = float(historical_data[symbol].iloc[-1]['close'])
            position = self.positions[symbol]
            
            if position['side'] == 'LONG':
                pnl = (last_price - position['entry_price']) * position['size']
            else:
                pnl = (position['entry_price'] - last_price) * position['size']
            
            self.current_balance += pnl
            
            self.trades.append({
                'symbol': symbol,
                'side': position['side'],
                'entry_price': position['entry_price'],
                'exit_price': last_price,
                'pnl': pnl,
                'pnl_percent': (pnl / (position['entry_price'] * position['size'])) * 100,
                'timestamp': timestamps[-1]
            })
            
            del self.positions[symbol]
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if not self.trades:
            return {'error': '–°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ'}
        
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t['pnl'] > 0])
        win_rate = (winning_trades / total_trades) * 100
        total_return = ((self.current_balance - self.initial_balance) / self.initial_balance) * 100
        
        return {
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'win_rate': win_rate,
            'initial_balance': self.initial_balance,
            'final_balance': self.current_balance,
            'total_return': total_return,
            'total_pnl': self.current_balance - self.initial_balance,
            'trades': self.trades
        }

class BotState:
    def __init__(self):
        self.current_coin = "BTC/USDT"
        self.available_pairs = []
        self.config = None
        self.application = None
        self.ema_analyzer = None
        self.ml_trainer = None
        self.shooting_predictor = None
        self.language = "ru"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π, "uz" –¥–ª—è —É–∑–±–µ–∫—Å–∫–æ–≥–æ
        self.custom_uzbek_explanations = {}  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º
        self.backtest_engine = SmartBacktestEngine()  # Smart ML –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        self.smart_predictor = None  # ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏–π
    
    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
        self.config = load_config()
        if self.config:
            self.ema_analyzer = AdvancedEMAAnalyzer()
            self.ml_trainer = AdvancedMLTrainer()
            self.shooting_predictor = ShootingStarPredictor()
            self.smart_predictor = self._load_smart_predictor()
            logger.info("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
    
    def _load_smart_predictor(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É–º–Ω–æ–≥–æ ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
            with open('smart_predictor_model.pkl', 'rb') as f:
                model = pickle.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            with open('feature_names.pkl', 'rb') as f:
                feature_names = pickle.load(f)
            
            logger.info("üß† Smart ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
            return {'model': model, 'feature_names': feature_names}
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Smart –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_state = BotState()

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫
UZBEK_TRANSLATIONS = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    "–°–∏–≥–Ω–∞–ª": "–°–∏–≥–Ω–∞–ª",
    "LONG": "LONG",
    "SHORT": "SHORT", 
    "–û–ñ–ò–î–ê–ù–ò–ï": "–ö–£–¢–ò–®",
    "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": "–ö–∏—Ä–∏—à –Ω–∞—Ä—Ö–∏",
    "Take Profit": "–§–æ–π–¥–∞ –æ–ª–∏—à",
    "Stop Loss": "–ô—û“õ–æ—Ç–∏—à–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à",
    "RSI": "RSI",
    "ML —Å—Ç–∞—Ç—É—Å": "ML —Ö–æ–ª–∞—Ç–∏",
    "–ê–Ω–∞–ª–∏–∑": "–¢–∞“≥–ª–∏–ª",
    "–¢—Ä–µ–Ω–¥": "–¢—Ä–µ–Ω–¥",
    "–§–∞–∑–∞": "–§–∞–∑–∞",
    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "–ò—à–æ–Ω—á",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": "–≠“≥—Ç–∏–º–æ–ª–ª–∏–∫",
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª": "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª",
    "–ü—Ä–æ–≥–Ω–æ–∑": "–ü—Ä–æ–≥–Ω–æ–∑",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï": "–ö–£–¢–ò–® –Ω–∏–º–∞–Ω–∏ –∞–Ω–≥–ª–∞—Ç–∞–¥–∏",
    "–ù–ï –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å": "“≤–æ–∑–∏—Ä—á–∞ –ø–æ–∑–∏—Ü–∏—è–≥–∞ –∫–∏—Ä–º–∞–Ω–≥",
    "–ñ–¥–∞—Ç—å –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞": "–ö–∏—Ä–∏—à —É—á—É–Ω —è—Ö—à–∏ –ø–∞–π—Ç–Ω–∏ –∫—É—Ç–∏–Ω–≥",
    "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": "–ù–∞—Ä—Ö –≤–∞ —Ç–µ—Ö–Ω–∏–∫ –∫—û—Ä—Å–∞—Ç–∫–∏—á–ª–∞—Ä–Ω–∏ –∫—É–∑–∞—Ç–∏–Ω–≥",
    "–î–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π": "–Ø—Ö—à–∏—Ä–æ–∫ —à–∞—Ä—Ç–ª–∞—Ä–Ω–∏ –∫—É—Ç–∏–Ω–≥",
    
    # EMA –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    "–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥": "–Æ“õ–æ—Ä–∏–≥–∞ –π—û–Ω–∞–ª–≥–∞–Ω —Ç—Ä–µ–Ω–¥",
    "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥": "–ü–∞—Å—Ç–≥–∞ –π—û–Ω–∞–ª–≥–∞–Ω —Ç—Ä–µ–Ω–¥", 
    "–ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥": "“ö–∏–π–º–∞ —Ç—Ä–µ–Ω–¥",
    "–ò–º–ø—É–ª—å—Å": "–ò–º–ø—É–ª—å—Å",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è": "–¢—É–∑–∞—Ç–∏—à",
    "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA": "EMA –∫–µ—Å–∏—à–∏—à–∏",
    "–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ EMA": "EMA–≥–∞ —è“õ–∏–Ω–ª–∞—à—É–≤",
    "–û—Ç—Å–∫–æ–∫ –æ—Ç EMA": "EMA–¥–∞–Ω —Å–∞–∫—Ä–∞—à",
    
    # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
    "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π": "–ñ—É–¥–∞ –∫—É—á–ª–∏",
    "–°–∏–ª—å–Ω—ã–π": "–ö—É—á–ª–∏", 
    "–°—Ä–µ–¥–Ω–∏–π": "–é—Ä—Ç–∞—á–∞",
    "–°–ª–∞–±—ã–π": "–°—É—Å—Ç",
    "–ü–∞–¥–µ–Ω–∏–µ": "–¢—É—à–∏–± –∫–µ—Ç–∏—à",
    "–†–æ—Å—Ç": "–é—Å–∏—à",
    "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞": "–ê–Ω–∏“õ —Å–∏–≥–Ω–∞–ª –π—û“õ",
    "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "–°—É—Å—Ç –∏—à–æ–Ω—á",
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": "–í–æ–ª–∞—Ç–∏–ª–ª–∏–∫",
    "–û–±—ä–µ–º": "“≤–∞–∂–º",
    "–°–≤–µ—á–∏": "–®–∞–º",
    "–ì—Ä–∞—Ñ–∏–∫": "–ì—Ä–∞—Ñ–∏–∫",
    "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä": "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": "“ö—û–ª–ª–∞–±-“õ—É–≤–≤–∞—Ç–ª–∞—à",
    "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ": "“ö–∞—Ä—à–∏–ª–∏–∫",
    
    # –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    "–ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê": "–¢–ê–ù–ì–ê –¢–û–ü–ò–õ–ú–ê–î–ò",
    "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞": "–¢–∞“≥–ª–∏–ª —Ö–∞—Ç–æ—Å–∏",
    "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö": "–ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –æ–ª–∏—à —Ö–∞—Ç–æ—Å–∏",
    "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞": "–¢–∏–∑–∏–º —Ç–∞–π—ë—Ä",
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é": "–¢–∞“≥–ª–∏–ª “õ–∏–ª–∞–º–∞–Ω",
    "–û–±—É—á–∞—é –º–æ–¥–µ–ª–∏": "–ú–æ–¥–µ–ª–ª–∞—Ä–Ω–∏ —û“õ–∏—Ç–∞–º–∞–Ω",
    "–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é": "–§–æ–π–¥–∞–ª–∞–Ω–∏—à–≥–∞ —Ç–∞–π—ë—Ä",
    
    # –ú–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏
    "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "–¢–∏–∑–∏–º —Ö–æ–ª–∞—Ç–∏",
    "–í—ã–±–æ—Ä –º–æ–Ω–µ—Ç": "–¢–∞–Ω–≥–∞–ª–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞—à",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã": "–û—Ö–∏—Ä–≥–∏ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä",
    "–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã": "–¢–∞–Ω–≥–∞ —Ç–∞“≥–ª–∏–ª–∏",
    "–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç": "–¢–∞–Ω–≥–∞–ª–∞—Ä–Ω–∏ “õ–∏–¥–∏—Ä–∏—à",
    "–°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã": "–û—Ç–∏–ª–≥–∞–Ω —Ç–∞–Ω–≥–∞–ª–∞—Ä",
    "EMA –ê–Ω–∞–ª–∏–∑": "EMA –¢–∞“≥–ª–∏–ª–∏",
    "–û–±—É—á–µ–Ω–∏–µ ML": "ML –é“õ–∏—Ç–∏—à",
    "–ù–∞–∑–∞–¥": "–û—Ä“õ–∞–≥–∞",
    "–ö–æ–Ω—Ç–∞–∫—Ç—ã": "–ê–ª–æ“õ–∞–ª–∞—Ä",
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "–ò—à–ª–∞–± —á–∏“õ–∞—Ä—É–≤—á–∏",
    "–ë–æ—Ç": "–ë–æ—Ç",
    "–°–≤—è–∑—å": "–ê–ª–æ“õ–∞",
    "–í–æ–ø—Ä–æ—Å—ã": "–°–∞–≤–æ–ª–ª–∞—Ä",
    "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": "–¢–∞–∫–ª–∏—Ñ–ª–∞—Ä", 
    "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ": "“≤–∞–º–∫–æ—Ä–ª–∏–∫",
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞": "–ë–æ—Ç –∏–º–∫–æ–Ω–∏—è—Ç–ª–∞—Ä–∏",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª–∞—Ä",
    "–¢–æ—á–Ω–æ—Å—Ç—å": "–ê–Ω–∏“õ–ª–∏–∫",
    "–ü–æ–∫—Ä—ã—Ç–∏–µ": "“ö–∞–º—Ä–æ–≤",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    "–ê–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –º–æ–Ω–µ—Ç Binance": "Binance–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ —Ç–∞–Ω–≥–∞–ª–∞—Ä–∏–Ω–∏ —Ç–∞“≥–ª–∏–ª “õ–∏–ª–∏—à",
    "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ ML –æ–±—É—á–µ–Ω–∏–µ": "–ú–æ—Å–ª–∞—à—É–≤—á–∏ ML —û“õ–∏—Ç–∏—à",
    "–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç": "“≤–∞—Ä 30 –¥–∞“õ–∏“õ–∞–¥–∞ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–ª–∞—Ä",
    "–°—Ç—Ä–µ–ª—è—é—â–∏–µ –∑–≤–µ–∑–¥—ã": "–û—Ç–∏–ª–≥–∞–Ω —é–ª–¥—É–∑–ª–∞—Ä",
    "EMA –∞–Ω–∞–ª–∏–∑ —Å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏": "ML –±–æ—à–æ—Ä–∞—Ç–ª–∞—Ä–∏ –±–∏–ª–∞–Ω EMA —Ç–∞“≥–ª–∏–ª–∏",
    "Machine Learning": "–ú–∞—à–∏–Ω–∞ —û—Ä–≥–∞–Ω–∏—à–∏",
    "Binance API": "Binance API",
    "Telegram Bot API": "Telegram Bot API",
    "Python": "Python",
    "pandas": "pandas",
    "scikit-learn": "scikit-learn",
    "–ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "–ú–æ–¥–µ–ª–ª–∞—Ä “≥–∞“õ–∏“õ–∏–π –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä –∞—Å–æ—Å–∏–¥–∞ —û“õ–∏—Ç–∏–ª–≥–∞–Ω",
    "–í—Å–µ 614+ USDT –ø–∞—Ä Binance": "Binance–Ω–∏–Ω–≥ –±–∞—Ä—á–∞ 614+ USDT –∂—É—Ñ—Ç–ª–∞—Ä–∏",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": "–§–æ–π–¥–∞–ª–∞–Ω–≥–∞–Ω–∏–Ω–≥–∏–∑ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç",
    
    # –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä
    "–ù–∞–π–¥–µ–Ω–æ": "–¢–æ–ø–∏–ª–¥–∏",
    "–ø–∞—Ä —Å": "–∂—É—Ñ—Ç",
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É": "–¢–∞–Ω–≥–∞–Ω–∏ —Ç–∞–Ω–ª–∞–Ω–≥",
    "–î–æ—Å—Ç—É–ø–Ω–æ": "–ú–∞–≤–∂—É–¥",
    "–º–æ–Ω–µ—Ç": "—Ç–∞–Ω–≥–∞",
    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã": "–û–º–º–∞–±–æ–ø —Ç–∞–Ω–≥–∞–ª–∞—Ä",
    "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω": "“ö–∏–¥–∏—Ä–∏—à —Ç—É–≥–∞–¥–∏",
    "–°—Ç—Ä–µ–ª—è—é—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ": "–û—Ç–∏–ª–≥–∞–Ω —Ç–æ–ø–∏–ª–º–∞–¥–∏",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "–ö–µ–π–∏–Ω—Ä–æ“õ —É—Ä–∏–Ω–∏–± –∫—û—Ä–∏–Ω–≥",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ": "–¢–∞“≥–ª–∏–ª “õ–∏–ª–∏–Ω–¥–∏",
    "–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö": "–û—Ç–∏–ª–≥–∞–Ω —Ç–æ–ø–∏–ª–¥–∏",
    "–¢–û–ü —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç": "–¢–û–ü –æ—Ç–∏–ª–≥–∞–Ω —Ç–∞–Ω–≥–∞–ª–∞—Ä",
    "–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞": "–¢–∞“≥–ª–∏–ª –≤–∞“õ—Ç–∏",
    "–ù–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é": "–Æ“õ–æ—Ä–∏ —ç“≥—Ç–∏–º–æ–ª–ª–∏–∫–¥–∞–≥–∏ —Ç–∞–Ω–≥–∞–ª–∞—Ä –π—û“õ",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑": "–û–¥–¥–∏–π —Ç–∞“≥–ª–∏–ª–¥–∞–Ω —Ñ–æ–π–¥–∞–ª–∞–Ω–∏–Ω–≥"
}

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
ENGLISH_TRANSLATIONS = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    "–°–∏–≥–Ω–∞–ª": "Signal",
    "LONG": "LONG",
    "SHORT": "SHORT", 
    "–û–ñ–ò–î–ê–ù–ò–ï": "WAITING",
    "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": "Entry Price",
    "Take Profit": "Take Profit",
    "Stop Loss": "Stop Loss",
    "RSI": "RSI",
    "ML —Å—Ç–∞—Ç—É—Å": "ML Status",
    "–ê–Ω–∞–ª–∏–∑": "Analysis",
    "–¢—Ä–µ–Ω–¥": "Trend",
    "–§–∞–∑–∞": "Phase",
    "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "Confidence",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": "Probability",
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª": "Potential",
    "–ü—Ä–æ–≥–Ω–æ–∑": "Forecast",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï": "What WAITING means",
    "–ù–ï –≤—Ö–æ–¥–∏—Ç—å –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å": "DO NOT enter position now",
    "–ñ–¥–∞—Ç—å –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞": "Wait for better entry moment",
    "–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": "Monitor price and technical indicators",
    "–î–æ–∂–¥–∞—Ç—å—Å—è –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π": "Wait for more favorable conditions",
    
    # EMA –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    "–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥": "Uptrend",
    "–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥": "Downtrend", 
    "–ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥": "Sideways trend",
    "–ò–º–ø—É–ª—å—Å": "Impulse",
    "–ö–æ—Ä—Ä–µ–∫—Ü–∏—è": "Correction",
    "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ EMA": "EMA crossover",
    "–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ EMA": "Approaching EMA",
    "–û—Ç—Å–∫–æ–∫ –æ—Ç EMA": "Bounce from EMA",
    
    # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
    "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π": "Very strong",
    "–°–∏–ª—å–Ω—ã–π": "Strong", 
    "–°—Ä–µ–¥–Ω–∏–π": "Medium",
    "–°–ª–∞–±—ã–π": "Weak",
    "–ü–∞–¥–µ–Ω–∏–µ": "Decline",
    "–†–æ—Å—Ç": "Growth",
    "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞": "No clear signal",
    "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "Low confidence",
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": "Volatility",
    "–û–±—ä–µ–º": "Volume",
    "–°–≤–µ—á–∏": "Candles",
    "–ì—Ä–∞—Ñ–∏–∫": "Chart",
    "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä": "Indicator",
    "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": "Support",
    "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ": "Resistance",
    
    # –°—Ç–∞—Ç—É—Å—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    "–ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê": "COIN NOT FOUND",
    "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞": "Analysis error",
    "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö": "Data retrieval error",
    "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞": "System ready",
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é": "Analyzing",
    "–û–±—É—á–∞—é –º–æ–¥–µ–ª–∏": "Training models",
    "–ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é": "Ready to use",
    
    # –ú–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∏
    "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "System Status",
    "–í—ã–±–æ—Ä –º–æ–Ω–µ—Ç": "Coin Selection",
    "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã": "Latest Signals",
    "–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã": "Coin Analysis",
    "–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç": "Search Coins",
    "–°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã": "Shooting Stars",
    "EMA –ê–Ω–∞–ª–∏–∑": "EMA Analysis",
    "–û–±—É—á–µ–Ω–∏–µ ML": "ML Training",
    "–ù–∞–∑–∞–¥": "Back",
    "–ö–æ–Ω—Ç–∞–∫—Ç—ã": "Contacts",
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫": "Developer",
    "–ë–æ—Ç": "Bot",
    "–°–≤—è–∑—å": "Contact",
    "–í–æ–ø—Ä–æ—Å—ã": "Questions",
    "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": "Suggestions", 
    "–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ": "Cooperation",
    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞": "Bot capabilities",
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "Technologies",
    "–¢–æ—á–Ω–æ—Å—Ç—å": "Accuracy",
    "–ü–æ–∫—Ä—ã—Ç–∏–µ": "Coverage",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    "–ê–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –º–æ–Ω–µ—Ç Binance": "Analysis of any Binance coins",
    "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ ML –æ–±—É—á–µ–Ω–∏–µ": "Adaptive ML training",
    "–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç": "Auto signals every 30 minutes",
    "–°—Ç—Ä–µ–ª—è—é—â–∏–µ –∑–≤–µ–∑–¥—ã": "Shooting stars",
    "EMA –∞–Ω–∞–ª–∏–∑ —Å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏": "EMA analysis with ML predictions",
    "Machine Learning": "Machine Learning",
    "Binance API": "Binance API",
    "Telegram Bot API": "Telegram Bot API",
    "Python": "Python",
    "pandas": "pandas",
    "scikit-learn": "scikit-learn",
    "–ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö": "Models trained on real data",
    "–í—Å–µ 614+ USDT –ø–∞—Ä Binance": "All 614+ Binance USDT pairs",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ": "Thank you for using",
    
    # –ü–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä
    "–ù–∞–π–¥–µ–Ω–æ": "Found",
    "–ø–∞—Ä —Å": "pairs with",
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É": "Select coin",
    "–î–æ—Å—Ç—É–ø–Ω–æ": "Available",
    "–º–æ–Ω–µ—Ç": "coins",
    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã": "Popular coins",
    "–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω": "Search completed",
    "–°—Ç—Ä–µ–ª—è—é—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ": "No shooting stars found",
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ": "Try again later",
    
    # –û–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ": "Analyzed",
    "–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö": "Shooting stars found",
    "–¢–û–ü —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç": "TOP shooting coins",
    "–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞": "Analysis time",
    "–ù–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é": "No coins with high probability",
    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑": "Use regular analysis"
}

def translate_text(text, language="ru"):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫"""
    if language == "ru":
        return text
    elif language == "uz":
        # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        basic_translations = {
            "–°–∏–≥–Ω–∞–ª": "–°–∏–≥–Ω–∞–ª",
            "LONG": "LONG", 
            "SHORT": "SHORT",
            "–û–ñ–ò–î–ê–ù–ò–ï": "–ö–£–¢–ò–®",
            "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞": "–ö–∏—Ä–∏—à –Ω–∞—Ä—Ö–∏",
            "Take Profit": "–§–æ–π–¥–∞ –æ–ª–∏—à",
            "Stop Loss": "–ô—û“õ–æ—Ç–∏—à–Ω–∏ —Ç—û—Ö—Ç–∞—Ç–∏—à",
            "RSI": "RSI",
            "ML —Å—Ç–∞—Ç—É—Å": "ML —Ö–æ–ª–∞—Ç–∏",
            "–ê–Ω–∞–ª–∏–∑": "–¢–∞“≥–ª–∏–ª",
            "–ù–∞–∑–∞–¥": "–û—Ä“õ–∞–≥–∞",
            "–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã": "–¢–∏–∑–∏–º —Ö–æ–ª–∞—Ç–∏",
            "–í—ã–±–æ—Ä –º–æ–Ω–µ—Ç": "–¢–∞–Ω–≥–∞–ª–∞—Ä–Ω–∏ —Ç–∞–Ω–ª–∞—à",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã": "–û—Ö–∏—Ä–≥–∏ —Å–∏–≥–Ω–∞–ª–ª–∞—Ä",
            "–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã": "–¢–∞–Ω–≥–∞ —Ç–∞“≥–ª–∏–ª–∏",
            "–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç": "–¢–∞–Ω–≥–∞–ª–∞—Ä–Ω–∏ “õ–∏–¥–∏—Ä–∏—à"
        }
        
        translated_text = text
        for russian, uzbek in basic_translations.items():
            translated_text = translated_text.replace(russian, uzbek)
        
        return translated_text
    elif language == "en":
        # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        translated_text = text
        for russian, english in ENGLISH_TRANSLATIONS.items():
            translated_text = translated_text.replace(russian, english)
        return translated_text
    
    return text

def add_custom_uzbek_explanation(key, explanation):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ"""
    bot_state.custom_uzbek_explanations[key] = explanation
    logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —É–∑–±–µ–∫—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è '{key}'")

def get_custom_uzbek_explanation(key):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ"""
    return bot_state.custom_uzbek_explanations.get(key, "")

def create_advanced_trading_chart(symbol, df, signal_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView"""
    try:
        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DataFrame
        logger.info(f"üîç –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}")
        logger.info(f"   –†–∞–∑–º–µ—Ä DataFrame: {df.shape}")
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        logger.info(f"   EMA –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {'ema_20' in df.columns}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EMA –∫–æ–ª–æ–Ω–æ–∫
        if 'ema_20' not in df.columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ema_20 –≤ DataFrame –¥–ª—è {symbol}")
            logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å EMA –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ
            logger.info(f"üîß –°–æ–∑–¥–∞—é EMA –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ –¥–ª—è {symbol}")
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            logger.info(f"‚úÖ EMA –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {list(df.columns)}")
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è TradingView
        plt.style.use('dark_background')
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), 
                                      gridspec_kw={'height_ratios': [3, 1], 'hspace': 0.1})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax1.set_facecolor('#1e1e1e')
        ax1.grid(True, alpha=0.3, color='#333333')
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        recent_df = df.tail(100)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EMA –∫–æ–ª–æ–Ω–æ–∫ –≤ recent_df
        if 'ema_20' not in recent_df.columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ ema_20 –≤ recent_df –¥–ª—è {symbol}")
            logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ recent_df: {list(recent_df.columns)}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å EMA –∫–æ–ª–æ–Ω–∫–∏ –≤ recent_df
            logger.info(f"üîß –°–æ–∑–¥–∞—é EMA –∫–æ–ª–æ–Ω–∫–∏ –≤ recent_df –¥–ª—è {symbol}")
            recent_df['ema_20'] = recent_df['close'].ewm(span=20).mean()
            recent_df['ema_50'] = recent_df['close'].ewm(span=50).mean()
            recent_df['ema_100'] = recent_df['close'].ewm(span=100).mean()
            logger.info(f"‚úÖ EMA –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ recent_df: {list(recent_df.columns)}")
            
        x_pos = range(len(recent_df))
        
        # –°–≤–µ—á–∏
        for i, (idx, row) in enumerate(recent_df.iterrows()):
            color = '#26a69a' if row['close'] >= row['open'] else '#ef5350'
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            ax1.bar(i, body_height, bottom=body_bottom, width=0.6, color=color, alpha=0.8)
            # –¢–µ–Ω–∏
            ax1.plot([i, i], [row['low'], row['high']], color=color, linewidth=1)
        
        # EMA –ª–∏–Ω–∏–∏
        ax1.plot(x_pos, recent_df['ema_20'], color='#ffeb3b', linewidth=2, label='EMA 20')
        ax1.plot(x_pos, recent_df['ema_50'], color='#ff9800', linewidth=2, label='EMA 50')
        ax1.plot(x_pos, recent_df['ema_100'], color='#e91e63', linewidth=2, label='EMA 100')
        
        # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        current_price = signal_data['entry_price']
        current_idx = len(recent_df) - 1
        
        if "LONG" in signal_data['signal_type']:
            # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
            ax1.scatter(current_idx, current_price, color='#4caf50', s=100, marker='^', 
                       label='–í—Ö–æ–¥ LONG', zorder=5)
            
            if signal_data['take_profit']:
                # Take Profit –∑–æ–Ω–∞
                tp_price = signal_data['take_profit']
                ax1.axhline(y=tp_price, color='#4caf50', linestyle='--', alpha=0.7, label=f'TP: ${tp_price:.4f}')
                ax1.fill_between(x_pos, tp_price, tp_price * 1.001, alpha=0.3, color='#4caf50')
                
                # Stop Loss –∑–æ–Ω–∞
                if signal_data['stop_loss']:
                    sl_price = signal_data['stop_loss']
                    ax1.axhline(y=sl_price, color='#f44336', linestyle='--', alpha=0.7, label=f'SL: ${sl_price:.4f}')
                    ax1.fill_between(x_pos, sl_price * 0.999, sl_price, alpha=0.3, color='#f44336')
        
        # RSI –≥—Ä–∞—Ñ–∏–∫
        ax2.set_facecolor('#1e1e1e')
        ax2.grid(True, alpha=0.3, color='#333333')
        ax2.plot(x_pos, recent_df['rsi'], color='#9c27b0', linewidth=2)
        ax2.axhline(y=70, color='#f44336', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.axhline(y=30, color='#4caf50', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylim(0, 100)
        ax2.set_ylabel('RSI', color='white')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        ax1.set_title(f'{symbol} - {signal_data["signal_type"]} {signal_data["strength_text"]}', 
                     color='white', fontsize=14, fontweight='bold')
        ax1.set_ylabel('–¶–µ–Ω–∞ ($)', color='white')
        ax1.legend(loc='upper left', framealpha=0.8)
        ax2.legend(loc='upper right', framealpha=0.8)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_text = f"""üìä –ê–Ω–∞–ª–∏–∑: {signal_data['ml_status']}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.8f}
üìà RSI: {signal_data['rsi']:.1f}"""
        
        if "LONG" in signal_data['signal_type']:
            info_text += f"""
üéØ Take Profit: ${signal_data['take_profit']:.8f}
üõ°Ô∏è Stop Loss: ${signal_data['stop_loss']:.8f}"""
        
        ax1.text(0.02, 0.98, info_text, transform=ax1.transAxes, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='#2d2d2d', alpha=0.8),
                verticalalignment='top', fontsize=9, color='white')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='#1e1e1e', edgecolor='none')
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance
async def get_available_pairs():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_state –Ω–∞–ø—Ä—è–º—É—é
    try:
        logger.info("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        markets = exchange.load_markets()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
        usdt_pairs = []
        for symbol, market in markets.items():
            if market['quote'] == 'USDT' and market['active']:
                usdt_pairs.append(symbol)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ USDT –ø–∞—Ä—ã)
        bot_state.available_pairs = sorted(usdt_pairs)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(bot_state.available_pairs)} –º–æ–Ω–µ—Ç —Å Binance")
        return bot_state.available_pairs
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç —Å Binance: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        bot_state.available_pairs = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'XRP/USDT', 'DOT/USDT', 'AVAX/USDT', 'MATIC/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'FTM/USDT', 'ALGO/USDT',
            'VET/USDT', 'ICP/USDT', 'FIL/USDT', 'TRX/USDT', 'ETC/USDT'
        ]
        return bot_state.available_pairs

async def clear_chat_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    try:
        chat_id = update.effective_chat.id
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        for i in range(10):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id - i)
            except:
                pass
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞: {e}")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ–Ω—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å—Ç–∞—Ä—Ç–µ
    await clear_chat_history(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
    if bot_state.language == "ru":
        lang_button_text = "üá∫üáø O'zbekcha"
        lang_callback = "switch_to_uzbek"
    elif bot_state.language == "uz":
        lang_button_text = "üá¨üáß English"
        lang_callback = "switch_to_english"
    else:  # en
        lang_button_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
        lang_callback = "switch_to_russian"
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –¢–û–†–ì–û–í–´–ï –ü–ê–†–´", callback_data="menu_coins")],
        [InlineKeyboardButton("üéØ –ê–ù–ê–õ–ò–ó & –°–ò–ì–ù–ê–õ–´", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–û–ò–°–ö –ê–ö–¢–ò–í–û–í", callback_data="menu_search")],
        [InlineKeyboardButton("üìä –ë–≠–ö–¢–ï–°–¢–ò–ù–ì", callback_data="menu_backtest")],
        [InlineKeyboardButton("üí¨ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ù–ê–ú–ò", callback_data="menu_contacts")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data="clear_chat")],
        [InlineKeyboardButton(lang_button_text, callback_data=lang_callback)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Binance Trading Bot —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {bot_state.current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    welcome_message = translate_text(welcome_message, bot_state.language)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")  # –û—Ç–ª–∞–¥–∫–∞
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    try:
        if query.data == "menu_coins":
            await handle_coins_menu(query, context)
        elif query.data == "menu_analyze":
            await handle_analyze_menu(query, context)
        elif query.data == "menu_search":
            await handle_search_menu(query, context)
        elif query.data == "menu_backtest":
            await handle_backtest_menu(query, context)
        elif query.data.startswith("select_"):
            await handle_coin_selection(query, context)
        elif query.data == "find_shooting_stars":
            await handle_find_shooting_stars(query, context)
        elif query.data == "train_ema_models":
            await handle_train_ema_models(query, context)
        elif query.data == "start_ml_training":
            await handle_start_ml_training(query, context)
        elif query.data == "ml_models_status":
            await handle_ml_models_status(query, context)
        elif query.data == "ema_analyze_coin":
            await handle_ema_analyze_coin(query, context)
        elif query.data.startswith("ema_analyze_"):
            symbol = query.data.replace("ema_analyze_", "")
            await handle_ema_coin_analysis(query, context, symbol)
        elif query.data == "backtest_quick":
            await handle_backtest_quick(query, context)
        elif query.data == "backtest_full":
            await handle_backtest_full(query, context)
        elif query.data == "backtest_custom":
            await handle_backtest_custom(query, context)
        elif query.data == "back_to_main":
            await back_to_main_menu(query, context)
        elif query.data == "menu_contacts":
            await handle_contacts_menu(query, context)
        elif query.data == "switch_to_uzbek":
            await handle_switch_to_uzbek(query, context)
        elif query.data == "switch_to_english":
            await handle_switch_to_english(query, context)
        elif query.data == "switch_to_russian":
            await handle_switch_to_russian(query, context)
        elif query.data == "clear_chat":
            await handle_clear_chat(query, context)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        try:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

async def handle_status_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {bot_state.current_coin}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
üîó **API:** Binance (ccxt)

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/coins - –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
/signals - –°–∏–≥–Ω–∞–ª—ã –¥–ª—è {bot_state.current_coin}
/analyze - –ê–Ω–∞–ª–∏–∑ {bot_state.current_coin}
/search - –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def handle_coins_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä —Å Binance
        if not bot_state.available_pairs:
            await get_available_pairs()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å Binance
        popular_coins = bot_state.available_pairs[:20]  # –ü–µ—Ä–≤—ã–µ 20 –ø–∞—Ä
        
        keyboard = []
        for i in range(0, len(popular_coins), 2):
            row = []
            for j in range(2):
                if i + j < len(popular_coins):
                    coin = popular_coins[i + j]
                    row.append(InlineKeyboardButton(coin, callback_data=f"select_{coin}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"ü™ô **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (Binance):**\n\nüìä –î–æ—Å—Ç—É–ø–Ω–æ {len(bot_state.available_pairs)} –º–æ–Ω–µ—Ç"
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {str(e)}")


async def handle_analyze_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
    await analyze_coin_with_advanced_logic(query, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑

async def handle_search_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç"""
    try:
        message = """
üîç **–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç**

–î–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/search <–Ω–∞–∑–≤–∞–Ω–∏–µ>

–ü—Ä–∏–º–µ—Ä—ã:
/search BTC
/search ETH
/search BNB
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def handle_backtest_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥"""
    try:
        message = """
üìä **–ë–≠–ö–¢–ï–°–¢–ò–ù–ì –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê**

üéØ **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö!**

**–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:**
‚Ä¢ `/backtest BTC ETH` - —Ç–µ—Å—Ç –Ω–∞ BTC –∏ ETH
‚Ä¢ `/backtest ADA SOL XRP` - —Ç–µ—Å—Ç –Ω–∞ 3 –º–æ–Ω–µ—Ç–∞—Ö
‚Ä¢ `/backtest ALL` - —Ç–µ—Å—Ç –Ω–∞ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç–∞—Ö

üìÖ **–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** 01.01.2025 - —Å–µ–≥–æ–¥–Ω—è
üí∞ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:** $1,000 
‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** 3-10 –º–∏–Ω—É—Ç
üß† **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** EMA + RSI –∞–Ω–∞–ª–∏–∑

**–ß—Ç–æ –ø–æ–∫–∞–∂–µ—Ç —Ç–µ—Å—Ç:**
‚úÖ Win Rate (% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫)
üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
üèÜ –¢–æ–ø –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–∞—Ä—ã
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â—É—é –ø—Ä–∏–±—ã–ª—å!
        """
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        keyboard = [
            [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (BTC, ETH, ADA)", callback_data="backtest_quick")],
            [InlineKeyboardButton("üìä –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–¢–û–ü-10)", callback_data="backtest_full")],
            [InlineKeyboardButton("üí∞ –í–´–ë–†–ê–¢–¨ –ú–û–ù–ï–¢–´", callback_data="backtest_custom")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –º–µ–Ω—é –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {str(e)}")

async def handle_backtest_quick(query, context):
    """–ë—ã—Å—Ç—Ä—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö"""
    try:
        await query.answer()
        
        symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']
        symbols_text = 'BTC, ETH, ADA'
        
        progress_msg = await query.edit_message_text(
            f"üöÄ **–ó–ê–ü–£–°–ö–ê–Æ –ë–´–°–¢–†–´–ô –ë–≠–ö–¢–ï–°–¢**\n\n"
            f"ü™ô **–ú–æ–Ω–µ—Ç—ã:** {symbols_text}\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}\n"
            f"üí∞ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:** $1,000\n\n"
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...** (2-3 –º–∏–Ω—É—Ç—ã)"
        )
        
        try:
            results = bot_state.backtest_engine.run_backtest(symbols)
            await send_backtest_results(query, results, progress_msg)
        except Exception as e:
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def handle_backtest_full(query, context):
    """–ü–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç–∞—Ö"""
    try:
        await query.answer()
        
        symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT', 
                  'BNB/USDT', 'DOGE/USDT', 'AVAX/USDT', 'DOT/USDT', 'LINK/USDT']
        symbols_text = 'BTC, ETH, ADA, SOL, XRP, BNB, DOGE, AVAX, DOT, LINK'
        
        progress_msg = await query.edit_message_text(
            f"üöÄ **–ó–ê–ü–£–°–ö–ê–Æ –ü–û–õ–ù–´–ô –ë–≠–ö–¢–ï–°–¢**\n\n"
            f"ü™ô **–ú–æ–Ω–µ—Ç—ã:** –¢–û–ü-10\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}\n"
            f"üí∞ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:** $1,000\n\n"
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...** (5-10 –º–∏–Ω—É—Ç)\n"
            f"‚ö†Ô∏è **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...**"
        )
        
        try:
            results = bot_state.backtest_engine.run_backtest(symbols)
            await send_backtest_results(query, results, progress_msg)
        except Exception as e:
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def handle_backtest_custom(query, context):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
    try:
        await query.answer()
        
        message = """
üí∞ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –ë–≠–ö–¢–ï–°–¢**

üéØ **–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–∏—Ö –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:**
`/backtest –í–ê–®–ò_–ú–û–ù–ï–¢–´`

üìà **–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:**
‚Ä¢ `/backtest MATIC ATOM` - —Ç–µ—Å—Ç –Ω–∞ 2 –º–æ–Ω–µ—Ç–∞—Ö
‚Ä¢ `/backtest SOL AVAX DOT LINK` - —Ç–µ—Å—Ç –Ω–∞ 4 –º–æ–Ω–µ—Ç–∞—Ö  
‚Ä¢ `/backtest SHIB PEPE DOGE` - —Ç–µ—Å—Ç –º–µ–º-–º–æ–Ω–µ—Ç
‚Ä¢ `/backtest LTC BCH ETC` - –∞–ª—å—Ç–∫–æ–∏–Ω—ã
‚Ä¢ `/backtest SAND MANA GALA` - –∏–≥—Ä–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã

‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**
‚Ä¢ `/backtest BTC ETH` - –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
‚Ä¢ `/backtest ADA XRP ALGO` - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã
‚Ä¢ `/backtest ALL` - –¢–û–ü-10 –º–æ–Ω–µ—Ç

‚ö†Ô∏è **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 10 –º–æ–Ω–µ—Ç –∑–∞ —Ä–∞–∑
‚Ä¢ –¢–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT (–¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å 01.01.2025

üïê **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** 3-10 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–Ω–µ—Ç

üìä **–ß—Ç–æ –ø–æ–ª—É—á–∏—Ç–µ:**
‚úÖ Win Rate –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
üìà –û–±—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è  
üèÜ –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ –ø–∞—Ä—ã
üí∞ –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        """
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="menu_backtest")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def send_backtest_results(query, results, progress_msg):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
    try:
        if 'error' in results:
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {results['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        win_rate = results['win_rate']
        total_return = results['total_return']
        total_trades = results['total_trades']
        winning_trades = results['winning_trades']
        losing_trades = total_trades - winning_trades
        final_balance = results['final_balance']
        total_pnl = results['total_pnl']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if total_return > 20:
            result_emoji = "üöÄüí∞"
        elif total_return > 0:
            result_emoji = "üìà‚úÖ"
        elif total_return > -10:
            result_emoji = "üìä‚ö†Ô∏è"
        else:
            result_emoji = "üìâ‚ùå"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
        symbol_stats = {}
        for trade in results['trades']:
            symbol = trade['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'trades': 0, 'pnl': 0, 'wins': 0}
            symbol_stats[symbol]['trades'] += 1
            symbol_stats[symbol]['pnl'] += trade['pnl']
            if trade['pnl'] > 0:
                symbol_stats[symbol]['wins'] += 1
        
        # –¢–æ–ø-3 –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–∞—Ä—ã
        if symbol_stats:
            top_pairs = sorted(symbol_stats.items(), key=lambda x: x[1]['pnl'], reverse=True)[:3]
            top_text = ""
            for symbol, stats in top_pairs:
                wr = (stats['wins'] / stats['trades']) * 100 if stats['trades'] > 0 else 0
                top_text += f"‚Ä¢ {symbol.replace('/USDT', '')}: ${stats['pnl']:.0f} ({wr:.0f}% WR)\n"
        else:
            top_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        
        report = f"""{result_emoji} **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê**

üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: $1,000
üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${final_balance:.2f}
üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.1f}%
üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_pnl:+.2f}

üéØ **–¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)
‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades} ({100-win_rate:.1f}%)

üèÜ **–¢–û–ü-3 –ü–†–ò–ë–´–õ–¨–ù–´–ï –ü–ê–†–´:**
{top_text}
üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}
‚è±Ô∏è **–¢–∞–π–º—Ñ—Ä–µ–π–º:** 1 —á–∞—Å
üß† **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** EMA + RSI –∞–Ω–∞–ª–∏–∑

‚ö†Ô∏è **–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â—É—é –ø—Ä–∏–±—ã–ª—å!"""
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É", callback_data="menu_backtest")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await progress_msg.edit_text(report, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def handle_shooting_stars_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã"""
    try:
        message = """
üöÄ **–°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã**

–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö "—Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥" - –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üîÆ LSTM –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö USDT –ø–∞—Ä –Ω–∞ Binance
‚Ä¢ üéØ –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 5 –º–∏–Ω—É—Ç)
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –ù–∞–π—Ç–∏ —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã", callback_data="find_shooting_stars")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {str(e)}")


async def analyze_coin_with_advanced_logic(query, context):
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–ø-50 –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        needs_retrain = not is_coin_in_top50(bot_state.current_coin)
        
        if needs_retrain:
            await query.message.reply_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...\n\nüÜï –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤ —Ç–æ–ø-50, –ø–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã...\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...")
        else:
            await query.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...")
        
        signal_data = analyze_coin_signal_advanced_ema(bot_state.current_coin)
        if not signal_data:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {bot_state.current_coin}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        smart_prediction = None
        logger.info(f"üîç DEBUG: signal_data keys: {list(signal_data.keys())}")
        logger.info(f"üîç DEBUG: features –µ—Å—Ç—å: {signal_data.get('features') is not None}")
        
        # –ï—Å–ª–∏ features –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ö –∏–∑ DataFrame
        if not signal_data.get('features') and signal_data.get('df') is not None:
            try:
                logger.info("üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é features –¥–ª—è Smart ML...")
                features = prepare_ml_features(signal_data['df'], bot_state.current_coin)
                signal_data['features'] = features
                logger.info("‚úÖ Features –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–ª—è Smart ML")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ features: {e}")
        
        if signal_data.get('features') is not None:
            try:
                smart_prediction = predict_with_smart_ml(signal_data['features'])
                if smart_prediction:
                    logger.info(f"üß† Smart ML: {smart_prediction['prediction']}")
                    signal_data['smart_prediction'] = smart_prediction
                else:
                    logger.warning("‚ö†Ô∏è Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ None")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Smart ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        else:
            logger.warning("‚ö†Ô∏è Features –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è Smart ML")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await query.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(bot_state.current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}

{_format_smart_prediction(signal_data.get('smart_prediction'))}
            """
            
            if "LONG" in signal_data['signal_type']:
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            elif "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            message = translate_text(message, bot_state.language)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
            if bot_state.language == "uz":
                back_button_text = "üîô –û—Ä“õ–∞–≥–∞"
            elif bot_state.language == "en":
                back_button_text = "üîô Back"
            else:
                back_button_text = "üîô –ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton(back_button_text, callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=message,
                reply_markup=reply_markup
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}

{_format_smart_prediction(signal_data.get('smart_prediction'))}
            """
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            message = translate_text(message, bot_state.language)
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
            if bot_state.language == "uz":
                back_button_text = "üîô –û—Ä“õ–∞–≥–∞"
            elif bot_state.language == "en":
                back_button_text = "üîô Back"
            else:
                back_button_text = "üîô –ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton(back_button_text, callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

async def handle_coin_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    coin = query.data.replace("select_", "")
    bot_state.current_coin = coin
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: {coin}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑
    await asyncio.sleep(1)
    await analyze_coin_with_advanced_logic(query, context)

async def handle_find_shooting_stars(query, context):
    """–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_state –Ω–∞–ø—Ä—è–º—É—é
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if bot_state.shooting_predictor is None:
            bot_state.shooting_predictor = ShootingStarPredictor()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await query.edit_message_text("üîÆ **–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç...**\n\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ Binance...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        bot_state.available_pairs = await get_available_pairs()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
        if not bot_state.available_pairs:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å Binance")
            return
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã–º–∏ 50 –º–æ–Ω–µ—Ç–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        pairs_to_analyze = bot_state.available_pairs[:50]
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç —Å—Ä–µ–¥–∏ {len(pairs_to_analyze)} –º–æ–Ω–µ—Ç")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥
        shooting_stars = bot_state.shooting_predictor.find_shooting_stars(pairs_to_analyze, min_probability=0.4)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if shooting_stars:
            message = f"""üöÄ **–°–¢–†–ï–õ–Ø–Æ–©–ò–ï –ú–û–ù–ï–¢–´ –ù–ê–ô–î–ï–ù–´!**

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {len(pairs_to_analyze)} –º–æ–Ω–µ—Ç
üéØ **–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö:** {len(shooting_stars)}

**üèÜ –¢–û–ü-{min(10, len(shooting_stars))} –°–¢–†–ï–õ–Ø–Æ–©–ò–• –ú–û–ù–ï–¢:**

"""
            
            for i, star in enumerate(shooting_stars[:10], 1):
                probability_pct = star['probability'] * 100
                message += f"""**{i}. {star['symbol']}** üöÄ
üí∞ –¶–µ–Ω–∞: ${star['current_price']:.8f}
üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability_pct:.1f}%
üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {'üî•' * min(5, int(probability_pct / 20))}
üìä –ü—Ä–æ–≥–Ω–æ–∑: {star['predicted_change']}

"""
            
            message += f"\n‚è∞ **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%H:%M:%S')}"
            
        else:
            message = f"""üöÄ **–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {len(pairs_to_analyze)} –º–æ–Ω–µ—Ç
üéØ **–°—Ç—Ä–µ–ª—è—é—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**

‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ä–µ–∑–∫–æ–≥–æ —Ä–æ—Å—Ç–∞.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç.
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_shooting_stars")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(shooting_stars)} –∏–∑ {len(pairs_to_analyze)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {str(e)}")

async def handle_ema_analysis_menu(query, context):
    """–ú–µ–Ω—é EMA –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("ü§ñ –û–±—É—á–∏—Ç—å EMA –º–æ–¥–µ–ª–∏", callback_data="train_ema_models")],
            [InlineKeyboardButton("üìä EMA –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="ema_analyze_coin")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = """üìà **EMA –ê–ù–ê–õ–ò–ó**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ EMA –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è—Ö
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ EMA 20, 50, 100
‚Ä¢ –ü–æ–∏—Å–∫ –∏–º–ø—É–ª—å—Å–æ–≤ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–π
‚Ä¢ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA —Å—Ç—Ä—É–∫—Ç—É—Ä

üìä **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –§–æ–∫—É—Å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è EMA
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ü–µ–Ω—ã –∏ EMA
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É EMA –ª–∏–Ω–∏—è–º–∏
‚Ä¢ –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
"""
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ EMA –º–µ–Ω—é: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é")

async def handle_train_ema_models(query, context):
    """–û–±—É—á–µ–Ω–∏–µ EMA –º–æ–¥–µ–ª–µ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        await query.answer()
        await query.edit_message_text("ü§ñ –û–±—É—á–∞—é EMA –º–æ–¥–µ–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = AdvancedMLTrainer()
        
        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'XRP/USDT', 'DOT/USDT', 'DOGE/USDT', 'AVAX/USDT', 'MATIC/USDT'
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await query.edit_message_text("üìä –°–æ–±–∏—Ä–∞—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        historical_data = trainer.collect_historical_data(symbols, days=30)
        
        if not historical_data:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
            return
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        await query.edit_message_text("ü§ñ –û–±—É—á–∞—é EMA –º–æ–¥–µ–ª–∏...")
        success = trainer.train_models(symbols)
        
        if success:
            message = f"‚úÖ **EMA –ú–û–î–ï–õ–ò –û–ë–£–ß–ï–ù–´!**\n\n"
            message += f"üìä –ú–æ–¥–µ–ª–µ–π: 2 (–≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥)\n"
            message += f"üìà –°–∏–º–≤–æ–ª–æ–≤: {len(symbols)}\n"
            message += "üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
            
            await query.edit_message_text(message, parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å EMA –º–æ–¥–µ–ª–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è EMA –º–æ–¥–µ–ª–µ–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è EMA –º–æ–¥–µ–ª–µ–π")

async def handle_train_ml_menu(query, context):
    """–ú–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    try:
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_ml_training")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π", callback_data="ml_models_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = """üß† **–û–ë–£–ß–ï–ù–ò–ï ML –ú–û–î–ï–õ–ï–ô**

üéØ **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è EMA –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–µ–Ω–¥–æ–≤:**
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç–∏ EMA –ª–∏–Ω–∏–π (20, 50, 100)
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É EMA –∏ —Ü–µ–Ω–æ–π
‚Ä¢ –£–≥–ª—ã —Ç—Ä–µ–Ω–¥–∞ (-90¬∞ –¥–æ +90¬∞)
‚Ä¢ –ò–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏

üìà **–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Å 1 —è–Ω–≤–∞—Ä—è 2025:**
‚Ä¢ **–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥:** –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è = LONG –≤—Ö–æ–¥, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ = –≤—ã—Ö–æ–¥
‚Ä¢ **–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥:** –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è = LONG –≤—Ö–æ–¥ (–ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ, –∫–∞—Å–∞–Ω–∏–µ, –æ—Ç—Å–∫–æ–∫), –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ = –≤—ã—Ö–æ–¥ –ø—Ä–∏ –º–∞–∫—Å–∏–º—É–º–µ –∏–º–ø—É–ª—å—Å–∞  
‚Ä¢ **–ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥:** –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è = LONG –≤—Ö–æ–¥, –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ = –≤—ã—Ö–æ–¥
‚Ä¢ –¢–æ–ª—å–∫–æ LONG —Å–∏–≥–Ω–∞–ª—ã
‚Ä¢ RandomForest –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è

‚ö° **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –¢–æ—á–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
"""
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ ML –º–µ–Ω—é: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é")

async def handle_ema_analyze_coin(query, context):
    """EMA –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        await query.answer()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        keyboard = [
            [InlineKeyboardButton("BTC/USDT", callback_data="ema_analyze_BTC/USDT")],
            [InlineKeyboardButton("ETH/USDT", callback_data="ema_analyze_ETH/USDT")],
            [InlineKeyboardButton("BNB/USDT", callback_data="ema_analyze_BNB/USDT")],
            [InlineKeyboardButton("ADA/USDT", callback_data="ema_analyze_ADA/USDT")],
            [InlineKeyboardButton("SOL/USDT", callback_data="ema_analyze_SOL/USDT")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_ema_analysis")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = """üìä **EMA –ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´**

–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ EMA –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤:

üéØ **–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:**
‚Ä¢ –¢—Ä–µ–Ω–¥ –ø–æ EMA 20, 50, 100
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è EMA –ª–∏–Ω–∏–π
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ü–µ–Ω—ã –∏ EMA
‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É EMA
‚Ä¢ –ò–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
‚Ä¢ –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
"""
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ EMA –∞–Ω–∞–ª–∏–∑–∞ –º–æ–Ω–µ—Ç—ã: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–µ—Ç")

async def handle_ema_coin_analysis(query, context, symbol):
    """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã —Å EMA"""
    try:
        await query.answer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        needs_retrain = not is_coin_in_top50(symbol)
        
        if needs_retrain:
            await query.edit_message_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...\n\nüÜï –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤ —Ç–æ–ø-50, –ø–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã...\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...")
        else:
            await query.edit_message_text(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} —Å –ø–æ–º–æ—â—å—é EMA...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º EMA –∞–Ω–∞–ª–∏–∑
        signal_data = analyze_coin_signal_advanced_ema(symbol)
        
        if signal_data.get('error'):
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {signal_data['error']}")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        ema_analysis = signal_data.get('ema_analysis', {})
        
        message = f"""üìà EMA –ê–ù–ê–õ–ò–ó {symbol}

üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_data['signal_type']}
üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal_data['strength_text']}

üìä EMA –î–∞–Ω–Ω—ã–µ:
‚Ä¢ –¢—Ä–µ–Ω–¥: {ema_analysis.get('trend_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
‚Ä¢ –§–∞–∑–∞: {ema_analysis.get('phase_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ema_analysis.get('confidence', 0):.1f}%

üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal_data['entry_price']:.8f}
"""
        
        if signal_data.get('take_profit'):
            message += f"üéØ Take Profit: ${signal_data['take_profit']:.8f}\n"
        
        if signal_data.get('stop_loss'):
            message += f"üõ°Ô∏è Stop Loss: ${signal_data['stop_loss']:.8f}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º EMA —É—Ä–æ–≤–Ω–∏
        levels = ema_analysis.get('levels', {})
        if levels:
            message += f"""
üìä EMA –£—Ä–æ–≤–Ω–∏:
‚Ä¢ EMA 20: ${levels.get('ema_20', 0):.8f}
‚Ä¢ EMA 50: ${levels.get('ema_50', 0):.8f}
‚Ä¢ EMA 100: ${levels.get('ema_100', 0):.8f}
"""
        
        message += f"\nüìä RSI: {signal_data['rsi']:.1f}"
        message += f"\nü§ñ ML —Å—Ç–∞—Ç—É—Å: {signal_data['ml_status']}"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        message = translate_text(message, bot_state.language)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
        if bot_state.language == "uz":
            back_button_text = "üîô –û—Ä“õ–∞–≥–∞"
        elif bot_state.language == "en":
            back_button_text = "üîô Back"
        else:
            back_button_text = "üîô –ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton(back_button_text, callback_data="menu_ema_analysis")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
        logger.info(f"‚úÖ EMA –∞–Ω–∞–ª–∏–∑ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω: {signal_data['signal_type']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ EMA –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}")

def prepare_lstm_features(df):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è LSTM –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        features = []
        
        for i in range(10, len(df)):
            row_features = []
            
            # –¶–µ–Ω–∞ –∏ –æ–±—ä–µ–º
            row_features.extend([
                df['close'].iloc[i],
                df['volume'].iloc[i],
                df['high'].iloc[i] - df['low'].iloc[i],  # –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            ])
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            close_prices = df['close'].iloc[i-10:i+1]
            
            # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            if len(close_prices) > 1:
                price_change = (close_prices.iloc[-1] - close_prices.iloc[0]) / close_prices.iloc[0]
                row_features.append(price_change)
            else:
                row_features.append(0)
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
            row_features.append(close_prices.mean())
            
            # –ú–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º
            row_features.extend([close_prices.max(), close_prices.min()])
            
            features.append(row_features)
        
        if not features:
            return None
            
        return np.array(features)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ LSTM –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None




async def back_to_main_menu(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞ (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ)
    if bot_state.language == "ru":
        lang_button_text = "üá∫üáø O'zbekcha"
        lang_callback = "switch_to_uzbek"
    elif bot_state.language == "uz":
        lang_button_text = "üá¨üáß English"
        lang_callback = "switch_to_english"
    else:  # en
        lang_button_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
        lang_callback = "switch_to_russian"
    
    keyboard = [
        [InlineKeyboardButton("‚ö° –¢–û–†–ì–û–í–´–ï –ü–ê–†–´", callback_data="menu_coins")],
        [InlineKeyboardButton("üéØ –ê–ù–ê–õ–ò–ó & –°–ò–ì–ù–ê–õ–´", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–û–ò–°–ö –ê–ö–¢–ò–í–û–í", callback_data="menu_search")],
        [InlineKeyboardButton("üìä –ë–≠–ö–¢–ï–°–¢–ò–ù–ì", callback_data="menu_backtest")],
        [InlineKeyboardButton("üí¨ –°–í–Ø–ó–ê–¢–¨–°–Ø –° –ù–ê–ú–ò", callback_data="menu_contacts")],
        [InlineKeyboardButton(lang_button_text, callback_data=lang_callback)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Binance Trading Bot —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {bot_state.current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    welcome_message = translate_text(welcome_message, bot_state.language)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(welcome_message, reply_markup=reply_markup)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await query.message.reply_text(welcome_message, reply_markup=reply_markup)

async def handle_contacts_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    try:
        await query.answer()
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        contacts_message = """
üìû **–ö–û–ù–¢–ê–ö–¢–´ –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê**

üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** Bahodir
ü§ñ **–ë–æ—Ç:** Binance Trading Bot —Å ML

üìß **Telegram:** [@Bbbbbbb111233](https://t.me/Bbbbbbb111233)
üí¨ **–°–≤—è–∑—å:** –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

üöÄ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö –º–æ–Ω–µ—Ç Binance
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ ML –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
‚Ä¢ –°—Ç—Ä–µ–ª—è—é—â–∏–µ –∑–≤–µ–∑–¥—ã
‚Ä¢ EMA –∞–Ω–∞–ª–∏–∑ —Å ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏

üí° **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ Machine Learning (RandomForest)
‚Ä¢ Binance API
‚Ä¢ Telegram Bot API
‚Ä¢ Python, pandas, scikit-learn

üìà **–¢–æ—á–Ω–æ—Å—Ç—å:** –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
üéØ **–ü–æ–∫—Ä—ã—Ç–∏–µ:** –í—Å–µ 614+ USDT –ø–∞—Ä Binance

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ! üôè
        """
        
        await query.edit_message_text(contacts_message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_contacts_menu: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

async def handle_switch_to_uzbek(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        await query.answer()
        bot_state.language = "uz"
        
        message = "üá∫üáø **–¢–∏–ª —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–ª–¥–∏!**\n\n“≤–æ–∑–∏—Ä –±–æ—Ç —û–∑–±–µ–∫ —Ç–∏–ª–∏–¥–∞ –∏—à–ª–∞–π–¥–∏.\n\n**Til:** O'zbekcha ‚úÖ"
        keyboard = [[InlineKeyboardButton("üîô –û—Ä“õ–∞–≥–∞", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —É–∑–±–µ–∫—Å–∫–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞")

async def handle_switch_to_english(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        await query.answer()
        bot_state.language = "en"
        
        message = "üá¨üáß **Language changed!**\n\nNow bot works in English language.\n\n**Language:** English ‚úÖ"
        keyboard = [[InlineKeyboardButton("üîô Back", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞")

async def handle_switch_to_russian(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    try:
        await query.answer()
        bot_state.language = "ru"
        
        message = "üá∑üá∫ **–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω!**\n\n–¢–µ–ø–µ—Ä—å –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n**–Ø–∑—ã–∫:** –†—É—Å—Å–∫–∏–π ‚úÖ"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞")

async def handle_clear_chat(query, context):
    """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
    try:
        await query.answer("üóëÔ∏è –û—á–∏—â–∞—é —á–∞—Ç...")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        chat_id = query.message.chat_id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        deleted_count = 0
        for i in range(1, 21):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=query.message.message_id - i)
                deleted_count += 1
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        message = f"‚úÖ **–ß–∞—Ç –æ—á–∏—â–µ–Ω!**\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n\n–¢–µ–ø–µ—Ä—å —á–∞—Ç —á–∏—Å—Ç—ã–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        if bot_state.language == "uz":
            message = f"‚úÖ **–ß–∞—Ç —Ç–æ–∑–∞–ª–∞–¥–∏!**\n\nüóëÔ∏è –é—á–∏—Ä–∏–ª–≥–∞–Ω —Ö–∞–±–∞—Ä–ª–∞—Ä: {deleted_count}\n\n–≠–Ω–¥–∏ —á–∞—Ç —Ç–æ–∑–∞ –≤–∞ —Ñ–∞“õ–∞—Ç –∞–∫—Ç—É–∞–ª –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∞–¥–∏!"
        elif bot_state.language == "en":
            message = f"‚úÖ **Chat cleared!**\n\nüóëÔ∏è Messages deleted: {deleted_count}\n\nNow chat is clean and shows only actual information!"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞")

async def clear_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
        chat_id = update.effective_chat.id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        deleted_count = 0
        for i in range(1, 21):
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id - i)
                deleted_count += 1
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        message = f"‚úÖ **–ß–∞—Ç –æ—á–∏—â–µ–Ω!**\n\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}\n\n–¢–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞—é —Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ!"
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        if bot_state.language == "uz":
            message = f"‚úÖ **–ß–∞—Ç —Ç–æ–∑–∞–ª–∞–¥–∏!**\n\nüóëÔ∏è –é—á–∏—Ä–∏–ª–≥–∞–Ω —Ö–∞–±–∞—Ä–ª–∞—Ä: {deleted_count}\n\n–≠–Ω–¥–∏ —Ñ–∞“õ–∞—Ç —è–Ω–≥–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∫—û—Ä—Å–∞—Ç–∞–º–∞–Ω!"
        elif bot_state.language == "en":
            message = f"‚úÖ **Chat cleared!**\n\nüóëÔ∏è Messages deleted: {deleted_count}\n\nNow showing only fresh data!"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞")

async def set_coin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /set_coin –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É!\n–ü—Ä–∏–º–µ—Ä: /set_coin BTC/USDT")
            return
        
        coin = context.args[0].upper()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        if coin == 'XRPUSDT':
            coin = 'XRP/USDT'
        elif coin == 'BTCUSDT':
            coin = 'BTC/USDT'
        elif coin == 'ETHUSDT':
            coin = 'ETH/USDT'
        elif coin == 'ADAUSDT':
            coin = 'ADA/USDT'
        elif coin == 'SOLUSDT':
            coin = 'SOL/USDT'
        elif coin == 'BNBUSDT':
            coin = 'BNB/USDT'
        elif not coin.endswith('/USDT'):
            coin += '/USDT'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        bot_state.current_coin = coin
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–µ—Ç—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        await update.message.reply_text(
            f"‚úÖ **–ú–æ–Ω–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** {coin}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /start –¥–ª—è –º–µ–Ω—é."
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_coin: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        needs_retrain = not is_coin_in_top50(bot_state.current_coin)
        
        if needs_retrain:
            await update.message.reply_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...\n\nüÜï –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤ —Ç–æ–ø-50, –ø–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã...\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...")
        else:
            await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...")
        
        signal_data = analyze_coin_signal_advanced_ema(bot_state.current_coin)
        if not signal_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {bot_state.current_coin}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await update.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(bot_state.current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}

{_format_smart_prediction(signal_data.get('smart_prediction'))}
            """
            
            if "LONG" in signal_data['signal_type']:
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            elif "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            message = translate_text(message, bot_state.language)
            
            await update.message.reply_photo(
                photo=chart_buffer,
                caption=message
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}

{_format_smart_prediction(signal_data.get('smart_prediction'))}
            """
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
            message = translate_text(message, bot_state.language)
            
            await update.message.reply_text(message)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

async def signals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /signals - –∞–ª–∏–∞—Å –¥–ª—è /analyze"""
    await analyze_command(update, context)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
    try:
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/search BTC\n"
                "/search ETH\n"
                "/search BNB\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return
        
        search_term = context.args[0].upper()
        
        # –ü–æ–∏—Å–∫ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞—Ö
        matching_pairs = []
        if bot_state.available_pairs:
            matching_pairs = [pair for pair in bot_state.available_pairs if search_term in pair]
        
        if matching_pairs:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            keyboard = []
            for i in range(0, len(matching_pairs[:10]), 2):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                row = []
                for j in range(2):
                    if i + j < len(matching_pairs):
                        pair = matching_pairs[i + j]
                        row.append(InlineKeyboardButton(pair, callback_data=f"select_{pair}"))
                if row:
                    keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç **–ù–∞–π–¥–µ–Ω–æ {len(matching_pairs)} –ø–∞—Ä —Å \"{search_term}\":**",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å \"{search_term}\"\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
                "- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (BTC, ETH, etc.)"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def test_binance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test_binance –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Binance —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Binance
        test_symbol = "BTC/USDT"
        df = get_binance_data(test_symbol, timeframe='1h', limit=10)
        
        if df is not None and not df.empty:
            latest_price = df['close'].iloc[-1]
            latest_time = df.index[-1]
            message = f"""
‚úÖ **Binance —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!**

üìä **–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö:**
- –°–∏–º–≤–æ–ª: {test_symbol}
- –°–≤–µ—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {len(df)}
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${latest_price:.2f}
- –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–Ω–µ—Ç: {len(bot_state.available_pairs)}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:**
- –í—Ä–µ–º—è: {latest_time.strftime('%H:%M:%S')}
- –¶–µ–Ω–∞: ${latest_price:.2f}
- –û–±—ä–µ–º: {df['volume'].iloc[-1]:.0f}

üéØ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
            """
        else:
            message = "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance**"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Binance: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Binance: {str(e)}")

async def backtest_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /backtest –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        if not context.args:
            await update.message.reply_text(
                "üìä **–ë–≠–ö–¢–ï–°–¢–ò–ù–ì –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê**\n\n"
                "üéØ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n"
                "`/backtest BTC ETH ADA SOL`\n\n"
                "üìà **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/backtest BTC ETH` - —Ç–µ—Å—Ç –Ω–∞ BTC –∏ ETH\n"
                "‚Ä¢ `/backtest ADA SOL XRP` - —Ç–µ—Å—Ç –Ω–∞ 3 –º–æ–Ω–µ—Ç–∞—Ö\n"
                "‚Ä¢ `/backtest ALL` - —Ç–µ—Å—Ç –Ω–∞ —Ç–æ–ø-10 –º–æ–Ω–µ—Ç–∞—Ö\n\n"
                "üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - —Å–µ–≥–æ–¥–Ω—è\n"
                "üí∞ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:** $1,000\n"
                "‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** 3-10 –º–∏–Ω—É—Ç\n\n"
                "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ë—ç–∫—Ç–µ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è!"
            )
            return
        
        symbols_input = [arg.upper() for arg in context.args]
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤
        if 'ALL' in symbols_input:
            symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT', 
                      'BNB/USDT', 'DOGE/USDT', 'AVAX/USDT', 'DOT/USDT', 'LINK/USDT']
        else:
            symbols = []
            for symbol in symbols_input:
                if not symbol.endswith('/USDT'):
                    symbol += '/USDT'
                symbols.append(symbol)
        
        if len(symbols) > 10:
            await update.message.reply_text("‚ùå –ú–∞–∫—Å–∏–º—É–º 10 –º–æ–Ω–µ—Ç –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞!")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        symbols_text = ', '.join([s.replace('/USDT', '') for s in symbols])
        progress_msg = await update.message.reply_text(
            f"üöÄ **–ó–ê–ü–£–°–ö–ê–Æ –ë–≠–ö–¢–ï–°–¢**\n\n"
            f"ü™ô **–ú–æ–Ω–µ—Ç—ã:** {symbols_text}\n"
            f"üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}\n"
            f"üí∞ **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª:** $1,000\n\n"
            f"‚è≥ **–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...** (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)"
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
        try:
            results = bot_state.backtest_engine.run_backtest(symbols)
            
            if 'error' in results:
                await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {results['error']}")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            win_rate = results['win_rate']
            total_return = results['total_return']
            total_trades = results['total_trades']
            winning_trades = results['winning_trades']
            losing_trades = total_trades - winning_trades
            final_balance = results['final_balance']
            total_pnl = results['total_pnl']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if total_return > 20:
                result_emoji = "üöÄüí∞"
            elif total_return > 0:
                result_emoji = "üìà‚úÖ"
            elif total_return > -10:
                result_emoji = "üìä‚ö†Ô∏è"
            else:
                result_emoji = "üìâ‚ùå"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
            symbol_stats = {}
            for trade in results['trades']:
                symbol = trade['symbol']
                if symbol not in symbol_stats:
                    symbol_stats[symbol] = {'trades': 0, 'pnl': 0, 'wins': 0}
                symbol_stats[symbol]['trades'] += 1
                symbol_stats[symbol]['pnl'] += trade['pnl']
                if trade['pnl'] > 0:
                    symbol_stats[symbol]['wins'] += 1
            
            # –¢–æ–ø-3 –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –ø–∞—Ä—ã
            if symbol_stats:
                top_pairs = sorted(symbol_stats.items(), key=lambda x: x[1]['pnl'], reverse=True)[:3]
                top_text = ""
                for symbol, stats in top_pairs:
                    wr = (stats['wins'] / stats['trades']) * 100 if stats['trades'] > 0 else 0
                    top_text += f"‚Ä¢ {symbol.replace('/USDT', '')}: ${stats['pnl']:.0f} ({wr:.0f}% WR)\n"
            else:
                top_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            
            report = f"""{result_emoji} **–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê**

üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: $1,000
üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${final_balance:.2f}
üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.1f}%
üí∏ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_pnl:+.2f}

üéØ **–¢–û–†–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**
üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}
‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)
‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {losing_trades} ({100-win_rate:.1f}%)

üèÜ **–¢–û–ü-3 –ü–†–ò–ë–´–õ–¨–ù–´–ï –ü–ê–†–´:**
{top_text}
üìÖ **–ü–µ—Ä–∏–æ–¥:** 01.01.2025 - {datetime.now().strftime('%d.%m.%Y')}
‚è±Ô∏è **–¢–∞–π–º—Ñ—Ä–µ–π–º:** 1 —á–∞—Å
üß† **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** EMA + RSI –∞–Ω–∞–ª–∏–∑

‚ö†Ô∏è **–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:** –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±—É–¥—É—â—É—é –ø—Ä–∏–±—ã–ª—å!"""
            
            await progress_msg.edit_text(report)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /backtest: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {str(e)}")

async def handle_start_ml_training(query, context):
    """–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
    try:
        await query.answer()
        await query.edit_message_text("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π –Ω–∞ EMA –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = AdvancedMLTrainer()
        
        # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'XRP/USDT', 'DOT/USDT', 'DOGE/USDT', 'AVAX/USDT', 'MATIC/USDT'
        ]
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        success = trainer.train_models(symbols)
        
        if success:
            message = """‚úÖ **ML –ú–û–î–ï–õ–ò –û–ë–£–ß–ï–ù–´!**

üéØ –ú–æ–¥–µ–ª–∏ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –≥–æ—Ç–æ–≤—ã
üìä –û–±—É—á–µ–Ω—ã –Ω–∞ EMA –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"""
            await query.edit_message_text(message, parse_mode='Markdown')
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ML: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")

async def handle_ml_models_status(query, context):
    """–°—Ç–∞—Ç—É—Å ML –º–æ–¥–µ–ª–µ–π"""
    try:
        await query.answer()
        
        trainer = AdvancedMLTrainer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–µ–π
        models_exist = (
            os.path.exists('models/entry_model.pkl') and
            os.path.exists('models/exit_model.pkl') and
            os.path.exists('models/ema_scaler.pkl')
        )
        
        if models_exist:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏
            try:
                trainer.load_models()
                message = """‚úÖ **ML –ú–û–î–ï–õ–ò –ó–ê–ì–†–£–ñ–ï–ù–´**

ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:**
‚Ä¢ –ú–æ–¥–µ–ª—å —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ ‚úÖ
‚Ä¢ –ú–æ–¥–µ–ª—å —Ç–æ—á–µ–∫ –≤—ã—Ö–æ–¥–∞ ‚úÖ
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö ‚úÖ

üìä **–°—Ç–∞—Ç—É—Å:** –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º
üéØ **–õ–æ–≥–∏–∫–∞:** EMA + ML –∞–Ω–∞–ª–∏–∑
"""
            except Exception as e:
                message = f"""‚ö†Ô∏è **–ú–û–î–ï–õ–ò –ù–ê–ô–î–ï–ù–´, –ù–û –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò**

‚ùå **–û—à–∏–±–∫–∞:** {str(e)}

üîÑ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏
"""
        else:
            message = """‚ùå **ML –ú–û–î–ï–õ–ò –ù–ï –ù–ê–ô–î–ï–ù–´**

üìÅ **–û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã:**
‚Ä¢ models/entry_model.pkl
‚Ä¢ models/exit_model.pkl
‚Ä¢ models/ema_scaler.pkl

üöÄ **–î–µ–π—Å—Ç–≤–∏–µ:** –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
"""
        
        await query.edit_message_text(message, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ Binance ML Telegram Bot")
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Binance API —á–µ—Ä–µ–∑ ccxt")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    bot_state.initialize()
    if not bot_state.config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    is_local_dev = bot_state.config.get('local_development', {}).get('enabled', False)
    if is_local_dev:
        print("üîß –õ–û–ö–ê–õ–¨–ù–´–ô –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò")
        print("üö´ Telegram API –æ—Ç–∫–ª—é—á–µ–Ω - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
        print("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   - –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç")
        print("   - ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è") 
        print("   - EMA –∞–Ω–∞–ª–∏–∑")
        print("   - –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤")
        print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ bot_config_local.json")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
    print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance...")
    try:
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(get_available_pairs())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bot_state.available_pairs)} –º–æ–Ω–µ—Ç —Å Binance")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç —Å Binance: {e}")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    bot_state.application = Application.builder().token(bot_state.config["telegram"]["bot_token"]).build()
    
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    bot_state.application.add_handler(CommandHandler("start", start_command))
    bot_state.application.add_handler(CommandHandler("clear", clear_chat_command))
    bot_state.application.add_handler(CommandHandler("set_coin", set_coin_command))
    bot_state.application.add_handler(CommandHandler("analyze", analyze_command))
    bot_state.application.add_handler(CommandHandler("signals", signals_command))
    bot_state.application.add_handler(CommandHandler("search", search_command))
    bot_state.application.add_handler(CommandHandler("test_binance", test_binance_command))
    bot_state.application.add_handler(CommandHandler("backtest", backtest_command))
    bot_state.application.add_handler(CallbackQueryHandler(button_callback))
    
    print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞")
    bot_state.application.run_polling()

if __name__ == "__main__":
    main()
