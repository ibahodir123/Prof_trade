#!/usr/bin/env python3
"""
Binance Telegram –±–æ—Ç –¥–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Binance API —á–µ—Ä–µ–∑ ccxt
"""
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import ccxt
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import tensorflow as tf
from tensorflow.keras.models import load_model

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def calculate_dynamic_percentages(signal_strength, signal_type):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    
    if signal_strength > 0.9:
        # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.05  # +5%
        loss_pct = 0.03    # -3%
        strength_text = "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.8:
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.04  # +4%
        loss_pct = 0.025   # -2.5%
        strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.7:
        # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.03  # +3%
        loss_pct = 0.02    # -2%
        strength_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    else:
        # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.02  # +2%
        loss_pct = 0.015   # -1.5%
        strength_text = "üå± –°–ª–∞–±—ã–π"
    
    return profit_pct, loss_pct, strength_text

def get_binance_data(symbol, timeframe='1h', limit=500):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Binance —á–µ—Ä–µ–∑ ccxt"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'adjustForTimeDifference': True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            }
        })
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Binance
        try:
            exchange.load_markets()
            server_time = exchange.fetch_time()
            local_time = exchange.milliseconds()
            time_diff = server_time - local_time
            logger.info(f"üïê –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å Binance: {time_diff}ms")
            
            if abs(time_diff) > 1000:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {time_diff}ms")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
                exchange.options['timeDifference'] = time_diff
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        
        if not ohlcv:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        logger.info(f"üìä –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {len(df)} —Å–≤–µ—á–µ–π")
        logger.info(f"üìä NaN –∑–Ω–∞—á–µ–Ω–∏—è: {df.isnull().sum().sum()}")
        
        # –£–¥–∞–ª—è–µ–º NaN
        df = df.dropna()
        
        if df.empty:
            logger.error(f"‚ùå DataFrame –ø—É—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN –¥–ª—è {symbol}")
            return None
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        logger.info(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {df.index[0]} - {df.index[-1]}")
        logger.info(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.8f}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} —Å Binance: {e}")
        return None

def prepare_ml_features(df):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ 36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['close', 'ema_20', 'ema_50', 'ema_100', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
        data = df[required_columns].copy()
        
        # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        data['price_velocity'] = data['close'].pct_change()
        data['ema20_velocity'] = data['ema_20'].pct_change()
        data['ema50_velocity'] = data['ema_50'].pct_change()
        data['ema100_velocity'] = data['ema_100'].pct_change()
        
        # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
        data['price_acceleration'] = data['price_velocity'].pct_change()
        data['ema20_acceleration'] = data['ema20_velocity'].pct_change()
        data['ema50_acceleration'] = data['ema50_velocity'].pct_change()
        data['ema100_acceleration'] = data['ema100_velocity'].pct_change()
        
        # 3. Velocity ratios
        data['price_to_ema20_velocity_ratio'] = data['price_velocity'] / (data['ema20_velocity'] + 1e-8)
        data['price_to_ema50_velocity_ratio'] = data['price_velocity'] / (data['ema50_velocity'] + 1e-8)
        data['price_to_ema100_velocity_ratio'] = data['price_velocity'] / (data['ema100_velocity'] + 1e-8)
        
        # 4. Distance to EMAs
        data['price_to_ema20_distance'] = (data['close'] - data['ema_20']) / data['close']
        data['price_to_ema50_distance'] = (data['close'] - data['ema_50']) / data['close']
        data['price_to_ema100_distance'] = (data['close'] - data['ema_100']) / data['close']
        
        # 5. Distance change
        data['price_to_ema20_distance_change'] = data['price_to_ema20_distance'].diff()
        data['price_to_ema50_distance_change'] = data['price_to_ema50_distance'].diff()
        data['price_to_ema100_distance_change'] = data['price_to_ema100_distance'].diff()
        
        # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
        data['ema20_angle'] = np.arctan(data['ema20_velocity']) * 180 / np.pi
        data['ema50_angle'] = np.arctan(data['ema50_velocity']) * 180 / np.pi
        data['ema100_angle'] = np.arctan(data['ema100_velocity']) * 180 / np.pi
        
        # 7. Angle change
        data['ema20_angle_change'] = data['ema20_angle'].diff()
        data['ema50_angle_change'] = data['ema50_angle'].diff()
        data['ema100_angle_change'] = data['ema100_angle'].diff()
        
        # 8. EMA relationships
        data['ema20_to_ema50'] = data['ema_20'] / (data['ema_50'] + 1e-8)
        data['ema20_to_ema100'] = data['ema_20'] / (data['ema_100'] + 1e-8)
        data['ema50_to_ema100'] = data['ema_50'] / (data['ema_100'] + 1e-8)
        
        # 9. Price-EMA synchronization
        data['price_ema20_sync'] = np.corrcoef(data['close'], data['ema_20'])[0, 1] if len(data) > 1 else 0
        data['price_ema50_sync'] = np.corrcoef(data['close'], data['ema_50'])[0, 1] if len(data) > 1 else 0
        data['price_ema100_sync'] = np.corrcoef(data['close'], data['ema_100'])[0, 1] if len(data) > 1 else 0
        
        # 10. Divergence
        data['price_ema20_divergence'] = data['price_velocity'] - data['ema20_velocity']
        data['price_ema50_divergence'] = data['price_velocity'] - data['ema50_velocity']
        data['price_ema100_divergence'] = data['price_velocity'] - data['ema100_velocity']
        
        # 11. Volatility
        data['price_volatility'] = data['close'].rolling(20).std() / data['close'].rolling(20).mean()
        data['ema20_volatility'] = data['ema_20'].rolling(20).std() / data['ema_20'].rolling(20).mean()
        
        # 12. Volume features
        data['volume_change'] = data['volume'].pct_change()
        data['volume_price_correlation'] = data['volume'].rolling(20).corr(data['close'])
        
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å NaN
        data = data.dropna()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        data = data.replace([np.inf, -np.inf], 0)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        feature_columns = [
            'price_velocity', 'ema20_velocity', 'ema50_velocity', 'ema100_velocity',
            'price_acceleration', 'ema20_acceleration', 'ema50_acceleration', 'ema100_acceleration',
            'price_to_ema20_velocity_ratio', 'price_to_ema50_velocity_ratio', 'price_to_ema100_velocity_ratio',
            'price_to_ema20_distance', 'price_to_ema50_distance', 'price_to_ema100_distance',
            'price_to_ema20_distance_change', 'price_to_ema50_distance_change', 'price_to_ema100_distance_change',
            'ema20_angle', 'ema50_angle', 'ema100_angle',
            'ema20_angle_change', 'ema50_angle_change', 'ema100_angle_change',
            'ema20_to_ema50', 'ema20_to_ema100', 'ema50_to_ema100',
            'price_ema20_sync', 'price_ema50_sync', 'price_ema100_sync',
            'price_ema20_divergence', 'price_ema50_divergence', 'price_ema100_divergence',
            'price_volatility', 'ema20_volatility', 'volume_change', 'volume_price_correlation'
        ]
        
        features = data[feature_columns].fillna(0)
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML")
        return features
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None

def analyze_coin_signal(symbol):
    """–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–∏–º–≤–æ–ª –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è USDT
        clean_symbol = symbol.replace(':USDT', '') if ':USDT' in symbol else symbol
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance
        logger.info(f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
        df = get_binance_data(symbol, timeframe='1h', limit=500)
        
        if df is None or df.empty:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"üìä DataFrame {symbol}:")
        logger.info(f"   –†–∞–∑–º–µ—Ä: {df.shape}")
        logger.info(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        logger.info(f"   –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö: {df.dtypes.to_dict()}")
        logger.info(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {df['close'].iloc[-1]:.8f}")
        logger.info(f"   –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {df.index[0]} - {df.index[-1]}")
        logger.info(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞ NaN: {df.isnull().sum().sum()}")
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –†–∞—Å—á–µ—Ç RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π
        try:
            logger.info(f"ü§ñ –ó–∞–≥—Ä—É–∂–∞—é ML –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            scaler = joblib.load('models/scaler.pkl')
            min_detector = joblib.load('models/minimum_detector.pkl')
            max_detector = joblib.load('models/maximum_detector.pkl')
            
            logger.info(f"‚úÖ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML –∞–Ω–∞–ª–∏–∑–∞...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ 36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features = prepare_ml_features(df)
            if features is None or features.empty:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML")
                raise ValueError("Failed to prepare ML features")
            
            logger.info(f"üìà –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML: {features.shape}")
            logger.info(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: {features.iloc[-1].to_dict()}")
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            features_scaled = scaler.transform(features)
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã: {features_scaled.shape}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            last_features = features_scaled[-1:].reshape(1, -1)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            logger.info(f"üîÆ –í—ã–ø–æ–ª–Ω—è—é ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            min_prob = min_detector.predict_proba(last_features)[0][1]
            max_prob = max_detector.predict_proba(last_features)[0][1]
            
            logger.info(f"üìä ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {min_prob:.3f}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {max_prob:.3f}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
            entry_price = df['close'].iloc[-1]
            logger.info(f"üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {clean_symbol}: {entry_price}")
            
            if entry_price <= 0:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}: {entry_price}")
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price}")
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π)
            diff = max_prob - min_prob
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: min_prob={min_prob:.3f}, max_prob={max_prob:.3f}, diff={diff:.3f}")
            
            if diff > 0.10:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 1: diff > 0.10 ({diff:.3f} > 0.10) = True")
                if max_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è SHORT
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 2: max_prob > 0.3 ({max_prob:.3f} > 0.3) = True")
                    signal_type = "üî¥ SHORT"
                    strength_text = f"–ü–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                    take_profit = entry_price * (1 - profit_pct)
                    stop_loss = entry_price * (1 + loss_pct)
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: SHORT (–ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%)")
                else:
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 2: max_prob > 0.3 ({max_prob:.3f} > 0.3) = False")
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏"
                    take_profit = None
                    stop_loss = None
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏)")
                    
            elif diff < -0.10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 3: diff < -0.10 ({diff:.3f} < -0.10) = True")
                if min_prob > 0.3:  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è LONG
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 4: min_prob > 0.3 ({min_prob:.3f} > 0.3) = True")
                    signal_type = "üü¢ LONG"
                    strength_text = f"–†–æ—Å—Ç {min_prob*100:.1f}%"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(min_prob, "LONG")
                    take_profit = entry_price * (1 + profit_pct)
                    stop_loss = entry_price * (1 - loss_pct)
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: LONG (—Ä–æ—Å—Ç {min_prob*100:.1f}%)")
                else:
                    logger.info(f"üîç –£–°–õ–û–í–ò–ï 4: min_prob > 0.3 ({min_prob:.3f} > 0.3) = False")
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–°–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ"
                    take_profit = None
                    stop_loss = None
                    ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                    logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ)")
                    
            else:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10% - –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                logger.info(f"üîç –£–°–õ–û–í–ò–ï 5: else (diff –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ >0.10 –∏–ª–∏ <-0.10)")
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                strength_text = "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
                take_profit = None
                stop_loss = None
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                logger.info(f"üéØ –°–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)")
                
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º ML –º–æ–¥–µ–ª–µ–π
            logger.error(f"‚ùå ML –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {e}")
            logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ fallback —Å ML –º–æ–¥–µ–ª—è–º–∏...")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –∑–∞–Ω–æ–≤–æ
                logger.info(f"ü§ñ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol}...")
                scaler = joblib.load('models/scaler.pkl')
                min_detector = joblib.load('models/minimum_detector.pkl')
                max_detector = joblib.load('models/maximum_detector.pkl')
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ML
                features = prepare_ml_features(df)
                if features is not None and not features.empty:
                    features_scaled = scaler.transform(features)
                    last_features = features_scaled[-1:].reshape(1, -1)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    min_prob = min_detector.predict_proba(last_features)[0][1]
                    max_prob = max_detector.predict_proba(last_features)[0][1]
                    
                    logger.info(f"üìä Fallback ML —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    logger.info(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {min_prob:.3f}")
                    logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä: {max_prob:.3f}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è fallback
                    entry_price = df['close'].iloc[-1]
                    logger.info(f"üí∞ Fallback —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {symbol}: {entry_price}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π fallback –ª–æ–≥–∏–∫–æ–π
                    diff = max_prob - min_prob
                    
                    if diff > 0.10:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                        if max_prob > 0.3:
                            signal_type = "üî¥ SHORT"
                            strength_text = f"Fallback ML: –ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%"
                            profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                            take_profit = entry_price * (1 - profit_pct)
                            stop_loss = entry_price * (1 + loss_pct)
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: SHORT (–ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%)")
                        else:
                            signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                            strength_text = "Fallback ML: —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏"
                            take_profit = None
                            stop_loss = None
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞–¥–µ–Ω–∏–∏)")
                            
                    elif diff < -0.10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
                        if min_prob > 0.3:
                            signal_type = "üü¢ LONG"
                            strength_text = f"Fallback ML: —Ä–æ—Å—Ç {min_prob*100:.1f}%"
                            profit_pct, loss_pct, _ = calculate_dynamic_percentages(min_prob, "LONG")
                            take_profit = entry_price * (1 + profit_pct)
                            stop_loss = entry_price * (1 - loss_pct)
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: LONG (—Ä–æ—Å—Ç {min_prob*100:.1f}%)")
                        else:
                            signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                            strength_text = "Fallback ML: —Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ"
                            take_profit = None
                            stop_loss = None
                            ml_status = "Fallback ML"
                            logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (—Å–ª–∞–±–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–æ—Å—Ç–µ)")
                            
                    else:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 10% - –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                        signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                        strength_text = "Fallback ML: –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
                        take_profit = None
                        stop_loss = None
                        ml_status = "Fallback ML"
                        logger.info(f"üéØ Fallback ML —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)")
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML")
                    
            except Exception as fallback_error:
                # –ï—Å–ª–∏ –∏ fallback ML –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑
                logger.error(f"‚ùå Fallback ML –æ—à–∏–±–∫–∞ –¥–ª—è {symbol}: {fallback_error}")
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑...")
                
                latest_close = df['close'].iloc[-1]
                ema_20_latest = df['ema_20'].iloc[-1]
                ema_50_latest = df['ema_50'].iloc[-1]
                rsi_latest = df['rsi'].iloc[-1]
                
                logger.info(f"üìä –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ {symbol}:")
                logger.info(f"   –¶–µ–Ω–∞: {latest_close:.8f}")
                logger.info(f"   EMA 20: {ema_20_latest:.8f}")
                logger.info(f"   EMA 50: {ema_50_latest:.8f}")
                logger.info(f"   RSI: {rsi_latest:.1f}")
                
                # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
                if latest_close > ema_20_latest > ema_50_latest:
                    signal_type = "üü¢ LONG"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                    profit_pct, loss_pct, _ = calculate_dynamic_percentages(0.6, "LONG")
                    entry_price = latest_close
                    take_profit = entry_price * (1 + profit_pct)
                    stop_loss = entry_price * (1 - loss_pct)
                    ml_status = "Fallback (—Ç—Ä–µ–Ω–¥)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: LONG (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)")
                    
                elif latest_close < ema_20_latest < ema_50_latest:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                    entry_price = latest_close
                    take_profit = None
                    stop_loss = None
                    ml_status = "Fallback (—Ç—Ä–µ–Ω–¥)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)")
                    
                else:
                    signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                    strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å"
                    entry_price = latest_close
                    take_profit = None
                    stop_loss = None
                    ml_status = "Fallback (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)"
                    logger.info(f"üéØ –ü—Ä–æ—Å—Ç–æ–π —Å–∏–≥–Ω–∞–ª: –û–ñ–ò–î–ê–ù–ò–ï (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å)")
        
        return {
            'symbol': clean_symbol,
            'signal_type': signal_type,
            'strength_text': strength_text,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'rsi': df['rsi'].iloc[-1],
            'ml_status': ml_status,
            'df': df
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if "does not have market symbol" in str(e) or "symbol not found" in str(e).lower():
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
        
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_coin = "BTC/USDT"
auto_signals_enabled = False
available_pairs = []
config = None
scheduler = None
application = None

def create_advanced_trading_chart(symbol, df, signal_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è TradingView
        plt.style.use('dark_background')
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), 
                                      gridspec_kw={'height_ratios': [3, 1], 'hspace': 0.1})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax1.set_facecolor('#1e1e1e')
        ax1.grid(True, alpha=0.3, color='#333333')
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        recent_df = df.tail(100)
        x_pos = range(len(recent_df))
        
        # –°–≤–µ—á–∏
        for i, (idx, row) in enumerate(recent_df.iterrows()):
            color = '#26a69a' if row['close'] >= row['open'] else '#ef5350'
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            ax1.bar(i, body_height, bottom=body_bottom, width=0.6, color=color, alpha=0.8)
            # –¢–µ–Ω–∏
            ax1.plot([i, i], [row['low'], row['high']], color=color, linewidth=1)
        
        # EMA –ª–∏–Ω–∏–∏
        ax1.plot(x_pos, recent_df['ema_20'], color='#ffeb3b', linewidth=2, label='EMA 20')
        ax1.plot(x_pos, recent_df['ema_50'], color='#ff9800', linewidth=2, label='EMA 50')
        ax1.plot(x_pos, recent_df['ema_100'], color='#e91e63', linewidth=2, label='EMA 100')
        
        # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        current_price = signal_data['entry_price']
        current_idx = len(recent_df) - 1
        
        if signal_data['signal_type'] == "üü¢ LONG":
            # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
            ax1.scatter(current_idx, current_price, color='#4caf50', s=100, marker='^', 
                       label='–í—Ö–æ–¥ LONG', zorder=5)
            
            if signal_data['take_profit']:
                # Take Profit –∑–æ–Ω–∞
                tp_price = signal_data['take_profit']
                ax1.axhline(y=tp_price, color='#4caf50', linestyle='--', alpha=0.7, label=f'TP: ${tp_price:.4f}')
                ax1.fill_between(x_pos, tp_price, tp_price * 1.001, alpha=0.3, color='#4caf50')
                
                # Stop Loss –∑–æ–Ω–∞
                if signal_data['stop_loss']:
                    sl_price = signal_data['stop_loss']
                    ax1.axhline(y=sl_price, color='#f44336', linestyle='--', alpha=0.7, label=f'SL: ${sl_price:.4f}')
                    ax1.fill_between(x_pos, sl_price * 0.999, sl_price, alpha=0.3, color='#f44336')
        
        # RSI –≥—Ä–∞—Ñ–∏–∫
        ax2.set_facecolor('#1e1e1e')
        ax2.grid(True, alpha=0.3, color='#333333')
        ax2.plot(x_pos, recent_df['rsi'], color='#9c27b0', linewidth=2)
        ax2.axhline(y=70, color='#f44336', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.axhline(y=30, color='#4caf50', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylim(0, 100)
        ax2.set_ylabel('RSI', color='white')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        ax1.set_title(f'{symbol} - {signal_data["signal_type"]} {signal_data["strength_text"]}', 
                     color='white', fontsize=14, fontweight='bold')
        ax1.set_ylabel('–¶–µ–Ω–∞ ($)', color='white')
        ax1.legend(loc='upper left', framealpha=0.8)
        ax2.legend(loc='upper right', framealpha=0.8)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_text = f"""üìä –ê–Ω–∞–ª–∏–∑: {signal_data['ml_status']}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.8f}
üìà RSI: {signal_data['rsi']:.1f}"""
        
        if signal_data['signal_type'] == "üü¢ LONG":
            info_text += f"""
üéØ Take Profit: ${signal_data['take_profit']:.8f}
üõ°Ô∏è Stop Loss: ${signal_data['stop_loss']:.8f}"""
        
        ax1.text(0.02, 0.98, info_text, transform=ax1.transAxes, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='#2d2d2d', alpha=0.8),
                verticalalignment='top', fontsize=9, color='white')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='#1e1e1e', edgecolor='none')
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance
async def get_available_pairs():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance"""
    global available_pairs
    try:
        logger.info("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        markets = exchange.load_markets()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ USDT –ø–∞—Ä—ã
        usdt_pairs = []
        for symbol, market in markets.items():
            if market['quote'] == 'USDT' and market['active']:
                usdt_pairs.append(symbol)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ USDT –ø–∞—Ä—ã)
        available_pairs = sorted(usdt_pairs)
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(available_pairs)} –º–æ–Ω–µ—Ç —Å Binance")
        return available_pairs
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–Ω–µ—Ç —Å Binance: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫
        available_pairs = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT',
            'XRP/USDT', 'DOT/USDT', 'AVAX/USDT', 'MATIC/USDT', 'LINK/USDT',
            'UNI/USDT', 'LTC/USDT', 'ATOM/USDT', 'FTM/USDT', 'ALGO/USDT',
            'VET/USDT', 'ICP/USDT', 'FIL/USDT', 'TRX/USDT', 'ETC/USDT'
        ]
        return available_pairs

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ–Ω—é"""
    global current_coin
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("üöÄ –°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã", callback_data="menu_shooting_stars")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Binance Trading Bot —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    global current_coin
    
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")  # –û—Ç–ª–∞–¥–∫–∞
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    try:
        if query.data == "menu_status":
            await handle_status_menu(query, context)
        elif query.data == "menu_coins":
            await handle_coins_menu(query, context)
        elif query.data == "menu_signals":
            await handle_signals_menu_new(query, context)
        elif query.data == "menu_analyze":
            await handle_analyze_menu(query, context)
        elif query.data == "menu_search":
            await handle_search_menu(query, context)
        elif query.data == "menu_auto":
            await handle_auto_menu(query, context)
        elif query.data == "menu_shooting_stars":
            await handle_shooting_stars_menu(query, context)
        elif query.data.startswith("select_"):
            await handle_coin_selection(query, context)
        elif query.data == "auto_start":
            await handle_auto_start(query, context)
        elif query.data == "auto_stop":
            await handle_auto_stop(query, context)
        elif query.data == "find_shooting_stars":
            await handle_find_shooting_stars(query, context)
        elif query.data == "back_to_main":
            await back_to_main_menu(query, context)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        try:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

async def handle_status_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}
ü§ñ **–ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_signals_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
üîó **API:** Binance (ccxt)

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/coins - –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
/signals - –°–∏–≥–Ω–∞–ª—ã –¥–ª—è {current_coin}
/analyze - –ê–Ω–∞–ª–∏–∑ {current_coin}
/search - –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def handle_coins_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä —Å Binance
        if not available_pairs:
            await get_available_pairs()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Å Binance
        popular_coins = available_pairs[:20]  # –ü–µ—Ä–≤—ã–µ 20 –ø–∞—Ä
        
        keyboard = []
        for i in range(0, len(popular_coins), 2):
            row = []
            for j in range(2):
                if i + j < len(popular_coins):
                    coin = popular_coins[i + j]
                    row.append(InlineKeyboardButton(coin, callback_data=f"select_{coin}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"ü™ô **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (Binance):**\n\nüìä –î–æ—Å—Ç—É–ø–Ω–æ {len(available_pairs)} –º–æ–Ω–µ—Ç"
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {str(e)}")

async def handle_signals_menu_new(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
    try:
        signal_data = analyze_coin_signal(current_coin)
        if not signal_data:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {current_coin}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await query.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if signal_data['signal_type'] == "üü¢ LONG":
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=message,
                reply_markup=reply_markup
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def handle_analyze_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
    await handle_signals_menu_new(query, context)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –æ—à–∏–±–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

async def handle_search_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç"""
    try:
        message = """
üîç **–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç**

–î–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/search <–Ω–∞–∑–≤–∞–Ω–∏–µ>

–ü—Ä–∏–º–µ—Ä—ã:
/search BTC
/search ETH
/search BNB
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def handle_shooting_stars_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã"""
    try:
        message = """
üöÄ **–°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã**

–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö "—Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥" - –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üîÆ LSTM –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö USDT –ø–∞—Ä –Ω–∞ Binance
‚Ä¢ üéØ –¢–æ–ø-10 —Å–∞–º—ã—Ö –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–µ—Ç
‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ (–¥–æ 5 –º–∏–Ω—É—Ç)
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÆ –ù–∞–π—Ç–∏ —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã", callback_data="find_shooting_stars")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {str(e)}")

async def handle_auto_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if auto_signals_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        action = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if auto_signals_enabled else "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        callback = "auto_stop" if auto_signals_enabled else "auto_start"
        
        message = f"""
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã**

**–°—Ç–∞—Ç—É—Å:** {status}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å –ª—É—á—à–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton(f"üîÑ {action}", callback_data=callback)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–∞–º–∏: {str(e)}")

async def handle_coin_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"""
    global current_coin
    coin = query.data.replace("select_", "")
    current_coin = coin
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await query.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: {coin}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await asyncio.sleep(1)
    await handle_signals_menu_new(query, context)

async def handle_find_shooting_stars(query, context):
    """–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç —Å –ø–æ–º–æ—â—å—é LSTM –º–æ–¥–µ–ª–∏"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        await query.edit_message_text("üîÆ **–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç...**\n\n‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ Binance...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç
        available_pairs = get_available_pairs()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤—ã–º–∏ 50 –º–æ–Ω–µ—Ç–∞–º–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        pairs_to_analyze = available_pairs[:50]
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç —Å—Ä–µ–¥–∏ {len(pairs_to_analyze)} –º–æ–Ω–µ—Ç")
        
        shooting_stars = []
        analyzed_count = 0
        
        for symbol in pairs_to_analyze:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                df = get_binance_data(symbol, '1h', 100)
                if df is None or len(df) < 50:
                    continue
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º LSTM –º–æ–¥–µ–ª—å
                try:
                    model = load_model('simple_shooting_star_model.h5')
                    scaler = joblib.load('simple_shooting_star_scaler.pkl')
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LSTM
                    features = prepare_lstm_features(df)
                    if features is None:
                        continue
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    features_scaled = scaler.transform(features)
                    
                    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction = model.predict(features_scaled[-1:].reshape(1, -1, features_scaled.shape[1]))
                    shooting_probability = prediction[0][0]
                    
                    # –ï—Å–ª–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                    if shooting_probability > 0.7:
                        current_price = df['close'].iloc[-1]
                        shooting_stars.append({
                            'symbol': symbol,
                            'probability': shooting_probability,
                            'price': current_price
                        })
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ LSTM –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
                    continue
                
                analyzed_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
                if analyzed_count % 10 == 0:
                    progress_msg = f"üîÆ **–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç...**\n\nüìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {analyzed_count}/{len(pairs_to_analyze)}\nüéØ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö: {len(shooting_stars)}"
                    await query.edit_message_text(progress_msg)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        shooting_stars.sort(key=lambda x: x['probability'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if shooting_stars:
            message = f"""üöÄ **–°–¢–†–ï–õ–Ø–Æ–©–ò–ï –ú–û–ù–ï–¢–´ –ù–ê–ô–î–ï–ù–´!**

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {analyzed_count} –º–æ–Ω–µ—Ç
üéØ **–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö:** {len(shooting_stars)}

**üèÜ –¢–û–ü-{min(10, len(shooting_stars))} –°–¢–†–ï–õ–Ø–Æ–©–ò–• –ú–û–ù–ï–¢:**

"""
            
            for i, star in enumerate(shooting_stars[:10], 1):
                probability_pct = star['probability'] * 100
                message += f"""**{i}. {star['symbol']}** üöÄ
üí∞ –¶–µ–Ω–∞: ${star['price']:.8f}
üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {probability_pct:.1f}%
üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: {'üî•' * min(5, int(probability_pct / 20))}

"""
            
            message += f"\n‚è∞ **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:** {datetime.now().strftime('%H:%M:%S')}"
            
        else:
            message = f"""üöÄ **–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω**

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {analyzed_count} –º–æ–Ω–µ—Ç
üéØ **–°—Ç—Ä–µ–ª—è—é—â–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**

‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ä–µ–∑–∫–æ–≥–æ —Ä–æ—Å—Ç–∞.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç.
"""
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_shooting_stars")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
        logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(shooting_stars)} –∏–∑ {analyzed_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {str(e)}")

def prepare_lstm_features(df):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è LSTM –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
        features = []
        
        for i in range(10, len(df)):
            row_features = []
            
            # –¶–µ–Ω–∞ –∏ –æ–±—ä–µ–º
            row_features.extend([
                df['close'].iloc[i],
                df['volume'].iloc[i],
                df['high'].iloc[i] - df['low'].iloc[i],  # –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            ])
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            close_prices = df['close'].iloc[i-10:i+1]
            
            # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            if len(close_prices) > 1:
                price_change = (close_prices.iloc[-1] - close_prices.iloc[0]) / close_prices.iloc[0]
                row_features.append(price_change)
            else:
                row_features.append(0)
            
            # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
            row_features.append(close_prices.mean())
            
            # –ú–∞–∫—Å–∏–º—É–º –∏ –º–∏–Ω–∏–º—É–º
            row_features.extend([close_prices.max(), close_prices.min()])
            
            features.append(row_features)
        
        if not features:
            return None
            
        return np.array(features)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ LSTM –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None

async def handle_auto_start(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global auto_signals_enabled, scheduler
    
    try:
        auto_signals_enabled = True
        logger.info("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
        if scheduler:
            scheduler.add_job(
                send_auto_signals,
                trigger=IntervalTrigger(minutes=30),
                id='auto_signals',
                replace_existing=True
            )
            logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
        
        message = """
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –ó–ê–ü–£–©–ï–ù–´!**

‚úÖ **–°—Ç–∞—Ç—É—Å:** –í–∫–ª—é—á–µ–Ω—ã
‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –õ—É—á—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç —Å –ª—É—á—à–∏–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="auto_stop")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def handle_auto_stop(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    global auto_signals_enabled, scheduler
    
    try:
        auto_signals_enabled = False
        logger.info("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if scheduler:
            try:
                scheduler.remove_job('auto_signals')
                logger.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {e}")
        
        message = """
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –û–°–¢–ê–ù–û–í–õ–ï–ù–´!**

‚ùå **–°—Ç–∞—Ç—É—Å:** –í—ã–∫–ª—é—á–µ–Ω—ã
‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.
        """
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="auto_start")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def send_auto_signals():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ø-5"""
    global auto_signals_enabled, application, config, available_pairs
    
    if not auto_signals_enabled or not application or not config:
        return
    
    try:
        logger.info("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if not available_pairs:
            await get_available_pairs()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–Ω–µ—Ç—ã (–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        coins_to_check = available_pairs
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(coins_to_check)} –º–æ–Ω–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤")
        
        all_signals = []
        analyzed_count = 0
        max_analysis_time = 300  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑
        start_time = datetime.now()
        
        for coin in coins_to_check:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                elapsed_time = (datetime.now() - start_time).total_seconds()
                if elapsed_time > max_analysis_time:
                    logger.info(f"‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–µ–∫–ª–æ ({max_analysis_time}—Å), –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {analyzed_count} –º–æ–Ω–µ—Ç")
                    break
                
                if analyzed_count % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –º–æ–Ω–µ—Ç
                    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {coin}... ({analyzed_count}/{len(coins_to_check)})")
                
                signal_data = analyze_coin_signal(coin)
                if signal_data and signal_data.get('symbol'):
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–µ —Ç–æ–ª—å–∫–æ LONG)
                    all_signals.append((signal_data['symbol'], signal_data))
                
                analyzed_count += 1
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {coin}: {e}")
                analyzed_count += 1
                continue
        
        if not all_signals:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º LONG –∏ SHORT —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ
        trading_signals = []
        for coin, signal_data in all_signals:
            if signal_data.get('signal_type') in ['üü¢ LONG', 'üî¥ SHORT']:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ strength_text
                strength_text = signal_data.get('strength_text', '')
                if '–†–æ—Å—Ç' in strength_text:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ "–†–æ—Å—Ç 52.3%"
                        strength = float(strength_text.split('–†–æ—Å—Ç ')[1].replace('%', '')) / 100
                        signal_data['signal_strength'] = strength
                    except:
                        signal_data['signal_strength'] = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è LONG
                elif '–ü–∞–¥–µ–Ω–∏–µ' in strength_text:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ "–ü–∞–¥–µ–Ω–∏–µ 45.2%"
                        strength = float(strength_text.split('–ü–∞–¥–µ–Ω–∏–µ ')[1].replace('%', '')) / 100
                        signal_data['signal_strength'] = strength
                    except:
                        signal_data['signal_strength'] = 0.5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è SHORT
                else:
                    signal_data['signal_strength'] = 0.5
                
                trading_signals.append((coin, signal_data))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        trading_signals.sort(key=lambda x: x[1].get('signal_strength', 0), reverse=True)
        
        if trading_signals:
            # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –ª—É—á—à–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            top_signals = trading_signals[:5]
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–∞–º–∏
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º LONG –∏ SHORT —Å–∏–≥–Ω–∞–ª—ã
            long_count = sum(1 for _, data in trading_signals if data.get('signal_type') == 'üü¢ LONG')
            short_count = sum(1 for _, data in trading_signals if data.get('signal_type') == 'üî¥ SHORT')
            
            message = f"""ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´**
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {analyzed_count} –º–æ–Ω–µ—Ç (–∏–∑ {len(available_pairs)})
üü¢ **LONG —Å–∏–≥–Ω–∞–ª–æ–≤:** {long_count}
üî¥ **SHORT —Å–∏–≥–Ω–∞–ª–æ–≤:** {short_count}

**üèÜ –¢–û–ü-{len(top_signals)} –õ–£–ß–®–ò–• –°–ò–ì–ù–ê–õ–û–í:**

"""
            
            for i, (coin, signal_data) in enumerate(top_signals, 1):
                strength = signal_data.get('signal_strength', 0.7)
                signal_type = signal_data.get('signal_type', '‚ö™ –û–ñ–ò–î–ê–ù–ò–ï')
                signal_emoji = "üü¢" if "LONG" in signal_type else "üî¥" if "SHORT" in signal_type else "‚ö™"
                signal_name = "LONG" if "LONG" in signal_type else "SHORT" if "SHORT" in signal_type else "–û–ñ–ò–î–ê–ù–ò–ï"
                
                message += f"""**{i}. {coin}** {signal_emoji} {signal_name}
üí∞ –¶–µ–Ω–∞: ${signal_data['entry_price']:.8f}
üìà –°–∏–ª–∞: {strength*100:.1f}%
üìä RSI: {signal_data['rsi']:.1f}
üéØ TP: ${signal_data['take_profit']:.8f}
üõ°Ô∏è SL: ${signal_data['stop_loss']:.8f}

"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await application.bot.send_message(
                chat_id=config['chat_id'],
                text=message
            )
            
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: —Ç–æ–ø-{len(top_signals)} –∏–∑ {len(trading_signals)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            message = f"""ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –°–ò–ì–ù–ê–õ–´**
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** {analyzed_count} –º–æ–Ω–µ—Ç (–∏–∑ {len(available_pairs)})
üü¢ **LONG —Å–∏–≥–Ω–∞–ª–æ–≤:** 0
üî¥ **SHORT —Å–∏–≥–Ω–∞–ª–æ–≤:** 0

‚ÑπÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã.
            """
            
            await application.bot.send_message(
                chat_id=config['chat_id'],
                text=message
            )
            
            logger.info("‚ÑπÔ∏è –ù–µ—Ç LONG —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

async def back_to_main_menu(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    global current_coin
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Binance Trading Bot —Å ML —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(welcome_message, reply_markup=reply_markup)
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await query.message.reply_text(welcome_message, reply_markup=reply_markup)

async def set_coin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /set_coin –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–æ–Ω–µ—Ç—É!\n–ü—Ä–∏–º–µ—Ä: /set_coin BTC/USDT")
            return
        
        coin = context.args[0].upper()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        if coin == 'XRPUSDT':
            coin = 'XRP/USDT'
        elif coin == 'BTCUSDT':
            coin = 'BTC/USDT'
        elif coin == 'ETHUSDT':
            coin = 'ETH/USDT'
        elif coin == 'ADAUSDT':
            coin = 'ADA/USDT'
        elif coin == 'SOLUSDT':
            coin = 'SOL/USDT'
        elif coin == 'BNBUSDT':
            coin = 'BNB/USDT'
        elif not coin.endswith('/USDT'):
            coin += '/USDT'
        
        global current_coin
        current_coin = coin
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–µ—Ç—É –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
        await update.message.reply_text(
            f"‚úÖ **–ú–æ–Ω–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞:** {coin}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ /start –¥–ª—è –º–µ–Ω—é."
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /set_coin: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {current_coin}...")
        
        signal_data = analyze_coin_signal(current_coin)
        if not signal_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {current_coin}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await update.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if signal_data['signal_type'] == "üü¢ LONG":
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            
            await update.message.reply_photo(
                photo=chart_buffer,
                caption=message
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            await update.message.reply_text(message)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

async def signals_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /signals - –∞–ª–∏–∞—Å –¥–ª—è /analyze"""
    await analyze_command(update, context)

async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç"""
    try:
        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "/search BTC\n"
                "/search ETH\n"
                "/search BNB\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
            return
        
        search_term = context.args[0].upper()
        
        # –ü–æ–∏—Å–∫ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞—Ö
        matching_pairs = []
        if available_pairs:
            matching_pairs = [pair for pair in available_pairs if search_term in pair]
        
        if matching_pairs:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            keyboard = []
            for i in range(0, len(matching_pairs[:10]), 2):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                row = []
                for j in range(2):
                    if i + j < len(matching_pairs):
                        pair = matching_pairs[i + j]
                        row.append(InlineKeyboardButton(pair, callback_data=f"select_{pair}"))
                if row:
                    keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç **–ù–∞–π–¥–µ–Ω–æ {len(matching_pairs)} –ø–∞—Ä —Å \"{search_term}\":**",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞—Ä —Å \"{search_term}\"\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /start –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
                "- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (BTC, ETH, etc.)"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def test_binance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /test_binance –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Binance —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    try:
        await update.message.reply_text("üîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Binance...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Binance
        test_symbol = "BTC/USDT"
        df = get_binance_data(test_symbol, timeframe='1h', limit=10)
        
        if df is not None and not df.empty:
            latest_price = df['close'].iloc[-1]
            latest_time = df.index[-1]
            message = f"""
‚úÖ **Binance —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!**

üìä **–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö:**
- –°–∏–º–≤–æ–ª: {test_symbol}
- –°–≤–µ—á–µ–π –ø–æ–ª—É—á–µ–Ω–æ: {len(df)}
- –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${latest_price:.2f}
- –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–Ω–µ—Ç: {len(available_pairs)}

üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ:**
- –í—Ä–µ–º—è: {latest_time.strftime('%H:%M:%S')}
- –¶–µ–Ω–∞: ${latest_price:.2f}
- –û–±—ä–µ–º: {df['volume'].iloc[-1]:.0f}

üéØ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
            """
        else:
            message = "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance**"
        
        await update.message.reply_text(message)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Binance: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ Binance: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global config, scheduler, application
    print("ü§ñ –ó–∞–ø—É—Å–∫ Binance ML Telegram Bot")
    print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º Binance API —á–µ—Ä–µ–∑ ccxt")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä
    print("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å Binance...")
    try:
        import asyncio
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(get_available_pairs())
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(available_pairs)} –º–æ–Ω–µ—Ç —Å Binance")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–µ—Ç —Å Binance: {e}")
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config["telegram_token"]).build()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    scheduler = AsyncIOScheduler()
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    async def post_init(application):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        global scheduler
        try:
            scheduler.start()
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    application.post_init = post_init
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("set_coin", set_coin_command))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("signals", signals_command))
    application.add_handler(CommandHandler("search", search_command))
    application.add_handler(CommandHandler("test_binance", test_binance_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞")
    application.run_polling()

if __name__ == "__main__":
    main()
