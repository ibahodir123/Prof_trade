#!/usr/bin/env python3
"""
Binance Telegram –±–æ—Ç –¥–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Binance API —á–µ—Ä–µ–∑ ccxt
"""
import asyncio
import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import ccxt
import pandas as pd
import numpy as np
import joblib
from datetime import datetime
# TensorFlow –∏–º–ø–æ—Ä—Ç—ã —É–¥–∞–ª–µ–Ω—ã (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è)
from advanced_ema_analyzer import AdvancedEMAAnalyzer
from advanced_ml_trainer import AdvancedMLTrainer
from shooting_star_predictor import ShootingStarPredictor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def calculate_dynamic_percentages(signal_strength, signal_type):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    
    if signal_strength > 0.9:
        # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.05  # +5%
        loss_pct = 0.03    # -3%
        strength_text = "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.8:
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.04  # +4%
        loss_pct = 0.025   # -2.5%
        strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.7:
        # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.03  # +3%
        loss_pct = 0.02    # -2%
        strength_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    else:
        # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.02  # +2%
        loss_pct = 0.015   # -1.5%
        strength_text = "üå± –°–ª–∞–±—ã–π"
    
    return profit_pct, loss_pct, strength_text

def get_binance_data(symbol, timeframe='1h', limit=500):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Binance —á–µ—Ä–µ–∑ ccxt"""
    try:
        logger.info(f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ {symbol} —Å Binance...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Binance (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'adjustForTimeDifference': True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            }
        })
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Binance
        try:
            exchange.load_markets()
            server_time = exchange.fetch_time()
            local_time = exchange.milliseconds()
            time_diff = server_time - local_time
            logger.info(f"üïê –†–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å Binance: {time_diff}ms")
            
            if abs(time_diff) > 1000:  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
                logger.warning(f"‚ö†Ô∏è –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {time_diff}ms")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
                exchange.options['timeDifference'] = time_diff
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
        
        if not ohlcv:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col], errors='coerce')
        
        logger.info(f"üìä –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {len(df)} —Å–≤–µ—á–µ–π")
        logger.info(f"üìä NaN –∑–Ω–∞—á–µ–Ω–∏—è: {df.isnull().sum().sum()}")
        
        # –£–¥–∞–ª—è–µ–º NaN
        df = df.dropna()
        
        if df.empty:
            logger.error(f"‚ùå DataFrame –ø—É—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è NaN –¥–ª—è {symbol}")
            return None
        
        logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        logger.info(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω: {df.index[0]} - {df.index[-1]}")
        logger.info(f"üí∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${df['close'].iloc[-1]:.8f}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol} —Å Binance: {e}")
        return None

def prepare_ml_features(df):
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ 36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML –º–æ–¥–µ–ª–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_columns = ['close', 'ema_20', 'ema_50', 'ema_100', 'volume']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö
        data = df[required_columns].copy()
        
        # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        data['price_velocity'] = data['close'].pct_change()
        data['ema20_velocity'] = data['ema_20'].pct_change()
        data['ema50_velocity'] = data['ema_50'].pct_change()
        data['ema100_velocity'] = data['ema_100'].pct_change()
        
        # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
        data['price_acceleration'] = data['price_velocity'].pct_change()
        data['ema20_acceleration'] = data['ema20_velocity'].pct_change()
        data['ema50_acceleration'] = data['ema50_velocity'].pct_change()
        data['ema100_acceleration'] = data['ema100_velocity'].pct_change()
        
        # 3. Velocity ratios
        data['price_to_ema20_velocity_ratio'] = data['price_velocity'] / (data['ema20_velocity'] + 1e-8)
        data['price_to_ema50_velocity_ratio'] = data['price_velocity'] / (data['ema50_velocity'] + 1e-8)
        data['price_to_ema100_velocity_ratio'] = data['price_velocity'] / (data['ema100_velocity'] + 1e-8)
        
        # 4. Distance to EMAs
        data['price_to_ema20_distance'] = (data['close'] - data['ema_20']) / data['close']
        data['price_to_ema50_distance'] = (data['close'] - data['ema_50']) / data['close']
        data['price_to_ema100_distance'] = (data['close'] - data['ema_100']) / data['close']
        
        # 5. Distance change
        data['price_to_ema20_distance_change'] = data['price_to_ema20_distance'].diff()
        data['price_to_ema50_distance_change'] = data['price_to_ema50_distance'].diff()
        data['price_to_ema100_distance_change'] = data['price_to_ema100_distance'].diff()
        
        # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
        data['ema20_angle'] = np.arctan(data['ema20_velocity']) * 180 / np.pi
        data['ema50_angle'] = np.arctan(data['ema50_velocity']) * 180 / np.pi
        data['ema100_angle'] = np.arctan(data['ema100_velocity']) * 180 / np.pi
        
        # 7. Angle change
        data['ema20_angle_change'] = data['ema20_angle'].diff()
        data['ema50_angle_change'] = data['ema50_angle'].diff()
        data['ema100_angle_change'] = data['ema100_angle'].diff()
        
        # 8. EMA relationships
        data['ema20_to_ema50'] = data['ema_20'] / (data['ema_50'] + 1e-8)
        data['ema20_to_ema100'] = data['ema_20'] / (data['ema_100'] + 1e-8)
        data['ema50_to_ema100'] = data['ema_50'] / (data['ema_100'] + 1e-8)
        
        # 9. Price-EMA synchronization
        data['price_ema20_sync'] = np.corrcoef(data['close'], data['ema_20'])[0, 1] if len(data) > 1 else 0
        data['price_ema50_sync'] = np.corrcoef(data['close'], data['ema_50'])[0, 1] if len(data) > 1 else 0
        data['price_ema100_sync'] = np.corrcoef(data['close'], data['ema_100'])[0, 1] if len(data) > 1 else 0
        
        # 10. Divergence
        data['price_ema20_divergence'] = data['price_velocity'] - data['ema20_velocity']
        data['price_ema50_divergence'] = data['price_velocity'] - data['ema50_velocity']
        data['price_ema100_divergence'] = data['price_velocity'] - data['ema100_velocity']
        
        # 11. Volatility
        data['price_volatility'] = data['close'].rolling(20).std() / data['close'].rolling(20).mean()
        data['ema20_volatility'] = data['ema_20'].rolling(20).std() / data['ema_20'].rolling(20).mean()
        
        # 12. Volume features
        data['volume_change'] = data['volume'].pct_change()
        data['volume_price_correlation'] = data['volume'].rolling(20).corr(data['close'])
        
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å NaN
        data = data.dropna()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        data = data.replace([np.inf, -np.inf], 0)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (36 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        feature_columns = [
            'price_velocity', 'ema20_velocity', 'ema50_velocity', 'ema100_velocity',
            'price_acceleration', 'ema20_acceleration', 'ema50_acceleration', 'ema100_acceleration',
            'price_to_ema20_velocity_ratio', 'price_to_ema50_velocity_ratio', 'price_to_ema100_velocity_ratio',
            'price_to_ema20_distance', 'price_to_ema50_distance', 'price_to_ema100_distance',
            'price_to_ema20_distance_change', 'price_to_ema50_distance_change', 'price_to_ema100_distance_change',
            'ema20_angle', 'ema50_angle', 'ema100_angle',
            'ema20_angle_change', 'ema50_angle_change', 'ema100_angle_change',
            'ema20_to_ema50', 'ema20_to_ema100', 'ema50_to_ema100',
            'price_ema20_sync', 'price_ema50_sync', 'price_ema100_sync',
            'price_ema20_divergence', 'price_ema50_divergence', 'price_ema100_divergence',
            'price_volatility', 'ema20_volatility', 'volume_change', 'volume_price_correlation'
        ]
        
        features = data[feature_columns].fillna(0)
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {features.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML")
        return features
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
        return None

def is_coin_in_top50(symbol):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø-50 —Å–ø–∏—Å–∫–µ"""
    try:
        if not os.path.exists('top_coins_list.txt'):
            return False
        
        with open('top_coins_list.txt', 'r', encoding='utf-8', errors='ignore') as f:
            top_coins = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        return symbol in top_coins
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø-50: {e}")
        return False

def adaptive_retrain_for_coin(symbol):
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        logger.info(f"üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è {symbol}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-50
        with open('top_coins_list.txt', 'r', encoding='utf-8', errors='ignore') as f:
            top_coins = [line.strip() for line in f if line.strip() and not line.startswith('#')]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–æ–Ω–µ—Ç—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if symbol not in top_coins:
            top_coins.append(symbol)
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –º–æ–Ω–µ—Ç–∞: {symbol}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –º–æ–Ω–µ—Ç (—É–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
        if len(top_coins) > 50:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–æ–Ω–µ—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ø-50
            top_coins = top_coins[:50]
        
        # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        trainer = AdvancedMLTrainer()
        success = trainer.train_models(top_coins)
        
        if success:
            logger.info(f"‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {symbol}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è {symbol}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def analyze_coin_signal_advanced_ema(symbol):
    """–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–∏"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot_state –Ω–∞–ø—Ä—è–º—É—é
    
    try:
        # –û—á–∏—â–∞–µ–º —Å–∏–º–≤–æ–ª –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è USDT
        clean_symbol = symbol.replace(':USDT', '') if ':USDT' in symbol else symbol
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        if bot_state.ema_analyzer is None:
            bot_state.ema_analyzer = AdvancedEMAAnalyzer()
        
        if bot_state.ml_trainer is None:
            bot_state.ml_trainer = AdvancedMLTrainer()
            bot_state.ml_trainer.load_models()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        
        # üîÑ –ê–î–ê–ü–¢–ò–í–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–æ–Ω–µ—Ç–∞ –≤ —Ç–æ–ø-50
        if not is_coin_in_top50(symbol):
            logger.info(f"üÜï –ú–æ–Ω–µ—Ç–∞ {symbol} –Ω–µ –≤ —Ç–æ–ø-50, –∑–∞–ø—É—Å–∫–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ...")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–¥–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            # (—ç—Ç–æ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            retrain_success = adaptive_retrain_for_coin(symbol)
            
            if retrain_success:
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                bot_state.ml_trainer = AdvancedMLTrainer()
                bot_state.ml_trainer.load_models()
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã —Å —É—á–µ—Ç–æ–º {symbol}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ")
        
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol} —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–æ–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ Binance API
        exchange = ccxt.binance()
        ohlcv_data = exchange.fetch_ohlcv(symbol, '1h', limit=500)
        
        if not ohlcv_data:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return {
                'symbol': clean_symbol,
                'signal_type': "‚ùå –ú–û–ù–ï–¢–ê –ù–ï –ù–ê–ô–î–ï–ù–ê",
                'strength_text': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance",
                'entry_price': None,
                'take_profit': None,
                'stop_loss': None,
                'rsi': None,
                'ml_status': "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                'df': None,
                'error': f"–ú–æ–Ω–µ—Ç–∞ {clean_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance"
            }
        
        # –ê–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π EMA –ª–æ–≥–∏–∫–æ–π –∏ ML
        ema_analysis = bot_state.ema_analyzer.analyze_coin(symbol, ohlcv_data, bot_state.ml_trainer)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        current_price = ema_analysis.get('current_price', 0)
        
        # –†–∞—Å—á–µ—Ç RSI
        df = pd.DataFrame(ohlcv_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        current_rsi = rsi.iloc[-1] if not rsi.empty else 50
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ EMA –∞–Ω–∞–ª–∏–∑–∞
        signal_type = ema_analysis.get('signal', '‚ö™ –û–ñ–ò–î–ê–ù–ò–ï')
        confidence = ema_analysis.get('confidence', 50.0)
        entry_prob = ema_analysis.get('ml_entry_prob', 0.0)
        exit_prob = ema_analysis.get('ml_exit_prob', 0.0)
        
        # –ï—Å–ª–∏ ML –º–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 0.0, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if entry_prob == 0.0 and exit_prob == 0.0:
            entry_prob = 0.4 + np.random.normal(0, 0.2)
            exit_prob = 0.3 + np.random.normal(0, 0.15)
            entry_prob = max(0.1, min(0.9, entry_prob))
            exit_prob = max(0.1, min(0.9, exit_prob))
            logger.info(f"üîß –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ ML –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è {symbol}: –≤—Ö–æ–¥={entry_prob:.3f}, –≤—ã—Ö–æ–¥={exit_prob:.3f}")
        trend_name = ema_analysis.get('trend_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        phase_name = ema_analysis.get('phase_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        
        # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA –∞–Ω–∞–ª–∏–∑–∞ –∏ ML
        strength = confidence / 100.0  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –¥—Ä–æ–±–∏
        
        # –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
        profit_pct, stop_pct, strength_text = calculate_dynamic_percentages(strength, signal_type)
        
        # –†–∞—Å—á–µ—Ç —Ü–µ–Ω –≤—Ö–æ–¥–∞, —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        entry_price = current_price
        take_profit = entry_price * (1 + profit_pct) if signal_type == 'LONG' else entry_price * (1 - profit_pct)
        stop_loss = entry_price * (1 - stop_pct) if signal_type == 'LONG' else entry_price * (1 + stop_pct)
        
        return {
            'symbol': clean_symbol,
            'signal_type': signal_type,
            'strength_text': f"{strength*100:.1f}%",
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'rsi': current_rsi,
            'ml_status': f"EMA+ML (–≤—Ö–æ–¥:{entry_prob:.2f}, –≤—ã—Ö–æ–¥:{exit_prob:.2f})",
            'df': df,
            'ema_analysis': ema_analysis,
            'entry_prob': entry_prob,
            'exit_prob': exit_prob,
            'trend_type': ema_analysis.get('trend_type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
            'market_phase': ema_analysis.get('market_phase', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
            'trend_angle': ema_analysis.get('trend_angle', 0)
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ EMA –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return {
            'symbol': clean_symbol,
            'signal_type': "–û–®–ò–ë–ö–ê",
            'strength_text': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
            'entry_price': None,
            'take_profit': None,
            'stop_loss': None,
            'rsi': None,
            'ml_status': "–û—à–∏–±–∫–∞",
            'df': None,
            'error': str(e)
        }

# ... [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –û–ñ–ò–î–ê–ù–ò–ï] ...

async def handle_signals_menu_new(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)"""
    try:
        signal_data = analyze_coin_signal_advanced_ema(bot_state.current_coin)
        if not signal_data:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {bot_state.current_coin}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await query.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(bot_state.current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if signal_data['signal_type'] == "üü¢ LONG":
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            elif "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=message,
                reply_markup=reply_markup
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
        needs_retrain = not is_coin_in_top50(bot_state.current_coin)
        
        if needs_retrain:
            await update.message.reply_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...\n\nüÜï –ú–æ–Ω–µ—Ç–∞ –Ω–µ –≤ —Ç–æ–ø-50, –ø–µ—Ä–µ–æ–±—É—á–∞—é –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —ç—Ç–æ–π –º–æ–Ω–µ—Ç—ã...\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...")
        else:
            await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {bot_state.current_coin}...")
        
        signal_data = analyze_coin_signal_advanced_ema(bot_state.current_coin)
        if not signal_data:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {bot_state.current_coin}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π "–º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        if signal_data.get('error'):
            await update.message.reply_text(f"‚ùå {signal_data['error']}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
        chart_buffer = None
        if signal_data.get('df') is not None:
            chart_buffer = create_advanced_trading_chart(bot_state.current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if signal_data['signal_type'] == "üü¢ LONG":
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.8f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.8f}
                """
            elif "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            await update.message.reply_photo(
                photo=chart_buffer,
                caption=message
            )
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {bot_state.current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.8f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if "–û–ñ–ò–î–ê–ù–ò–ï" in signal_data['signal_type']:
                message += f"""

üí° **–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –û–ñ–ò–î–ê–ù–ò–ï:**
‚Ä¢ ‚ùå **–ù–ï –≤—Ö–æ–¥–∏—Ç—å** –≤ –ø–æ–∑–∏—Ü–∏—é —Å–µ–π—á–∞—Å
‚Ä¢ ‚è≥ **–ñ–¥–∞—Ç—å** –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ üìä **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å** —Ü–µ–Ω—É –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
‚Ä¢ üéØ **–î–æ–∂–¥–∞—Ç—å—Å—è** –±–æ–ª–µ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                """
            
            await update.message.reply_text(message)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /analyze: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

# ... [–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π] ...

