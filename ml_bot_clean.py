#!/usr/bin/env python3
"""
–ß–∏—Å—Ç—ã–π Telegram –±–æ—Ç –¥–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤ –ë–ï–ó Mastra
–¢–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π python-telegram-bot
"""
import asyncio
import logging
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import json
import os
import ccxt
import pandas as pd
import numpy as np
import joblib
from datetime import datetime, timedelta
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.patches import Rectangle, FancyBboxPatch
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def calculate_dynamic_percentages(signal_strength, signal_type):
    """–†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
    
    if signal_strength > 0.9:
        # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.05  # +5%
        loss_pct = 0.03    # -3%
        strength_text = "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.8:
        # –°–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.04  # +4%
        loss_pct = 0.025   # -2.5%
        strength_text = "üí™ –°–∏–ª—å–Ω—ã–π"
    elif signal_strength > 0.7:
        # –°—Ä–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.03  # +3%
        loss_pct = 0.02    # -2%
        strength_text = "‚ö° –°—Ä–µ–¥–Ω–∏–π"
    else:
        # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª
        profit_pct = 0.02  # +2%
        loss_pct = 0.015   # -1.5%
        strength_text = "üå± –°–ª–∞–±—ã–π"
    
    return profit_pct, loss_pct, strength_text

def analyze_coin_signal(symbol):
    """–ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏
        exchange = ccxt.binance({
            'apiKey': '',
            'secret': '',
            'sandbox': False,
            'enableRateLimit': True,
        })
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        ohlcv = exchange.fetch_ohlcv(symbol, '1h', limit=200)
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        
        # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        df['ema_100'] = df['close'].ewm(span=100).mean()
        
        # –†–∞—Å—á–µ—Ç RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π
        try:
            scaler = joblib.load('models/scaler.pkl')
            min_detector = joblib.load('models/minimum_detector.pkl')
            max_detector = joblib.load('models/maximum_detector.pkl')
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ML
            features = df[['close', 'ema_20', 'ema_50', 'ema_100', 'rsi']].fillna(0)
            features_scaled = scaler.transform(features)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            min_prob = min_detector.predict_proba(features_scaled[-1:])[0][1]
            max_prob = max_detector.predict_proba(features_scaled[-1:])[0][1]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
            if max_prob > 0.7:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                strength_text = f"–í–æ–∑–º–æ–∂–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ {max_prob*100:.1f}%"
                profit_pct, loss_pct, _ = calculate_dynamic_percentages(max_prob, "SHORT")
                entry_price = df['close'].iloc[-1]
                take_profit = entry_price * (1 - profit_pct)
                stop_loss = entry_price * (1 + loss_pct)
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                
            elif min_prob > 0.7:
                signal_type = "üü¢ LONG"
                strength_text = f"–†–æ—Å—Ç {min_prob*100:.1f}%"
                profit_pct, loss_pct, _ = calculate_dynamic_percentages(min_prob, "LONG")
                entry_price = df['close'].iloc[-1]
                take_profit = entry_price * (1 + profit_pct)
                stop_loss = entry_price * (1 - loss_pct)
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                strength_text = "–ù–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"
                entry_price = df['close'].iloc[-1]
                take_profit = None
                stop_loss = None
                ml_status = "–ê–∫—Ç–∏–≤–Ω–∞"
                
        except Exception as e:
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É
            latest_close = df['close'].iloc[-1]
            ema_20_latest = df['ema_20'].iloc[-1]
            ema_50_latest = df['ema_50'].iloc[-1]
            
            if latest_close > ema_20_latest > ema_50_latest:
                signal_type = "üü¢ LONG"
                strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥"
                profit_pct, loss_pct, _ = calculate_dynamic_percentages(0.6, "LONG")
                entry_price = latest_close
                take_profit = entry_price * (1 + profit_pct)
                stop_loss = entry_price * (1 - loss_pct)
                ml_status = "Fallback"
            else:
                signal_type = "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
                strength_text = "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å"
                entry_price = latest_close
                take_profit = None
                stop_loss = None
                ml_status = "Fallback"
        
        return {
            'symbol': symbol,
            'signal_type': signal_type,
            'strength_text': strength_text,
            'entry_price': entry_price,
            'take_profit': take_profit,
            'stop_loss': stop_loss,
            'rsi': df['rsi'].iloc[-1],
            'ml_status': ml_status,
            'df': df
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
        return None

def create_advanced_trading_chart(symbol, df, signal_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Å—Ç–∏–ª–µ TradingView"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è TradingView
        plt.style.use('dark_background')
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10), 
                                      gridspec_kw={'height_ratios': [3, 1], 'hspace': 0.1})
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        ax1.set_facecolor('#1e1e1e')
        ax1.grid(True, alpha=0.3, color='#333333')
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        recent_df = df.tail(100)
        x_pos = range(len(recent_df))
        
        # –°–≤–µ—á–∏
        for i, (idx, row) in enumerate(recent_df.iterrows()):
            color = '#26a69a' if row['close'] >= row['open'] else '#ef5350'
            # –¢–µ–ª–æ —Å–≤–µ—á–∏
            body_height = abs(row['close'] - row['open'])
            body_bottom = min(row['open'], row['close'])
            ax1.bar(i, body_height, bottom=body_bottom, width=0.6, color=color, alpha=0.8)
            # –¢–µ–Ω–∏
            ax1.plot([i, i], [row['low'], row['high']], color=color, linewidth=1)
        
        # EMA –ª–∏–Ω–∏–∏
        ax1.plot(x_pos, recent_df['ema_20'], color='#ffeb3b', linewidth=2, label='EMA 20')
        ax1.plot(x_pos, recent_df['ema_50'], color='#ff9800', linewidth=2, label='EMA 50')
        ax1.plot(x_pos, recent_df['ema_100'], color='#e91e63', linewidth=2, label='EMA 100')
        
        # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        current_price = signal_data['entry_price']
        current_idx = len(recent_df) - 1
        
        if signal_data['signal_type'] == "üü¢ LONG":
            # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
            ax1.scatter(current_idx, current_price, color='#4caf50', s=100, marker='^', 
                       label='–í—Ö–æ–¥ LONG', zorder=5)
            
            if signal_data['take_profit']:
                # Take Profit –∑–æ–Ω–∞
                tp_price = signal_data['take_profit']
                ax1.axhline(y=tp_price, color='#4caf50', linestyle='--', alpha=0.7, label=f'TP: ${tp_price:.4f}')
                ax1.fill_between(x_pos, tp_price, tp_price * 1.001, alpha=0.3, color='#4caf50')
                
                # Stop Loss –∑–æ–Ω–∞
                if signal_data['stop_loss']:
                    sl_price = signal_data['stop_loss']
                    ax1.axhline(y=sl_price, color='#f44336', linestyle='--', alpha=0.7, label=f'SL: ${sl_price:.4f}')
                    ax1.fill_between(x_pos, sl_price * 0.999, sl_price, alpha=0.3, color='#f44336')
        
        # RSI –≥—Ä–∞—Ñ–∏–∫
        ax2.set_facecolor('#1e1e1e')
        ax2.grid(True, alpha=0.3, color='#333333')
        ax2.plot(x_pos, recent_df['rsi'], color='#9c27b0', linewidth=2)
        ax2.axhline(y=70, color='#f44336', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å')
        ax2.axhline(y=30, color='#4caf50', linestyle='--', alpha=0.7, label='–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å')
        ax2.set_ylim(0, 100)
        ax2.set_ylabel('RSI', color='white')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
        ax1.set_title(f'{symbol} - {signal_data["signal_type"]} {signal_data["strength_text"]}', 
                     color='white', fontsize=14, fontweight='bold')
        ax1.set_ylabel('–¶–µ–Ω–∞ ($)', color='white')
        ax1.legend(loc='upper left', framealpha=0.8)
        ax2.legend(loc='upper right', framealpha=0.8)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_text = f"""üìä –ê–Ω–∞–ª–∏–∑: {signal_data['ml_status']}
üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}
üìà RSI: {signal_data['rsi']:.1f}"""
        
        if signal_data['signal_type'] == "üü¢ LONG":
            info_text += f"""
üéØ Take Profit: ${signal_data['take_profit']:.4f}
üõ°Ô∏è Stop Loss: ${signal_data['stop_loss']:.4f}"""
        
        ax1.text(0.02, 0.98, info_text, transform=ax1.transAxes, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='#2d2d2d', alpha=0.8),
                verticalalignment='top', fontsize=9, color='white')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=150, bbox_inches='tight', 
                   facecolor='#1e1e1e', edgecolor='none')
        buffer.seek(0)
        plt.close()
        
        return buffer
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")
        return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_coin = "BTC/USDT"
auto_signals_enabled = False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –∫—Ä–∞—Å–∏–≤—ã–º –º–µ–Ω—é"""
    global current_coin
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Trading Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    global current_coin
    
    query = update.callback_query
    await query.answer()
    
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")  # –û—Ç–ª–∞–¥–∫–∞
    logger.info(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")
    
    try:
        if query.data == "menu_status":
            await handle_status_menu(query, context)
        elif query.data == "menu_coins":
            await handle_coins_menu(query, context)
        elif query.data == "menu_signals":
            await handle_signals_menu(query, context)
        elif query.data == "menu_analyze":
            await handle_analyze_menu(query, context)
        elif query.data == "menu_search":
            await handle_search_menu(query, context)
        elif query.data == "menu_auto":
            await handle_auto_menu(query, context)
        elif query.data.startswith("select_"):
            await handle_coin_selection(query, context)
        elif query.data == "back_to_main":
            await back_to_main_menu(query, context)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        try:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        except:
            pass

async def handle_status_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        status_message = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}
ü§ñ **–ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã:** {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if auto_signals_enabled else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/coins - –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
/signals - –°–∏–≥–Ω–∞–ª—ã –¥–ª—è {current_coin}
/analyze - –ê–Ω–∞–ª–∏–∑ {current_coin}
/search - –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def handle_coins_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç"""
    try:
        popular_coins = [
            "BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT", "SOL/USDT",
            "XRP/USDT", "DOT/USDT", "DOGE/USDT", "AVAX/USDT", "MATIC/USDT"
        ]
        
        keyboard = []
        for i in range(0, len(popular_coins), 2):
            row = []
            for j in range(2):
                if i + j < len(popular_coins):
                    coin = popular_coins[i + j]
                    row.append(InlineKeyboardButton(coin, callback_data=f"select_{coin}"))
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "ü™ô **–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:**"
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {str(e)}")

async def handle_signals_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        signal_data = analyze_coin_signal(current_coin)
        if not signal_data:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {current_coin}")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        chart_buffer = create_advanced_trading_chart(current_coin, signal_data['df'], signal_data)
        
        if chart_buffer:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.4f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            if signal_data['signal_type'] == "üü¢ LONG":
                message += f"""
üéØ **Take Profit:** ${signal_data['take_profit']:.4f}
üõ°Ô∏è **Stop Loss:** ${signal_data['stop_loss']:.4f}
                """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=chart_buffer,
                caption=message,
                reply_markup=reply_markup
            )
            await query.edit_message_text("üìà –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        else:
            # Fallback –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            message = f"""
üìà **–°–∏–≥–Ω–∞–ª –¥–ª—è {current_coin}**

{signal_data['signal_type']} - {signal_data['strength_text']}

üí∞ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:** ${signal_data['entry_price']:.4f}
üìä **RSI:** {signal_data['rsi']:.1f}
ü§ñ **ML —Å—Ç–∞—Ç—É—Å:** {signal_data['ml_status']}
            """
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(message, reply_markup=reply_markup)
            
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {str(e)}")

async def handle_analyze_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã"""
    await handle_signals_menu(query, context)  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É

async def handle_search_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç"""
    try:
        message = """
üîç **–ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç**

–î–ª—è –ø–æ–∏—Å–∫–∞ –º–æ–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
/search <–Ω–∞–∑–≤–∞–Ω–∏–µ>

–ü—Ä–∏–º–µ—Ä—ã:
/search BTC
/search ETH
/search BNB
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

async def handle_auto_menu(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã"""
    try:
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if auto_signals_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
        action = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if auto_signals_enabled else "–ó–∞–ø—É—Å—Ç–∏—Ç—å"
        callback = "auto_stop" if auto_signals_enabled else "auto_start"
        
        message = f"""
ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã**

**–°—Ç–∞—Ç—É—Å:** {status}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç —Å –ª—É—á—à–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton(f"üîÑ {action}", callback_data=callback)],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    except Exception as e:
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ —Å–∏–≥–Ω–∞–ª–∞–º–∏: {str(e)}")

async def handle_coin_selection(query, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω–µ—Ç—ã"""
    global current_coin
    coin = query.data.replace("select_", "")
    current_coin = coin
    
    await query.edit_message_text(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–Ω–µ—Ç–∞: {coin}")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑
    await asyncio.sleep(1)
    await handle_signals_menu(query, context)

async def back_to_main_menu(query, context):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    global current_coin
    
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
        [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
        [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç", callback_data="menu_search")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = f"""
ü§ñ **Trading Bot —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏!**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {current_coin}

**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:**
    """
    
    await query.edit_message_text(welcome_message, reply_markup=reply_markup)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –ß–ò–°–¢–û–ì–û ML Telegram Bot (–±–µ–∑ Mastra)")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config["telegram_token"]).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    print("‚úÖ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
