#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ°Ô∏è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ï–† –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø—Ä–æ—Å–∞–¥–∫–∏ –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
"""

import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import pickle
from typing import Dict, List, Tuple, Optional
import warnings
warnings.filterwarnings('ignore')

class OptimizedBacktester:
    def __init__(self):
        print("üõ°Ô∏è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ï–† –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.initial_balance = 10000
        self.commission = 0.001
        self.slippage = 0.0005
        self.stop_loss = 0.03
        self.take_profit = 0.06
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        self.max_drawdown_limit = 0.20  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 20%
        self.max_position_size = 0.05   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 5%
        self.min_position_size = 0.01   # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 1%
        self.correlation_threshold = 0.7  # –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.base_position_size = 0.03  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 3%
        self.drawdown_multiplier = 0.5   # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.trades = []
        self.balance_history = []
        self.drawdown_history = []
        self.position_sizes = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self.load_models()
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –º–∏–Ω–∏–º—É–º–æ–≤
            with open('historical_models/minimum_model.pkl', 'rb') as f:
                self.minimum_model = pickle.load(f)
            with open('historical_models/minimum_scaler.pkl', 'rb') as f:
                self.minimum_scaler = pickle.load(f)
            with open('historical_models/minimum_features.pkl', 'rb') as f:
                self.minimum_features = pickle.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –º–∞–∫—Å–∏–º—É–º–æ–≤
            with open('historical_models/maximum_model.pkl', 'rb') as f:
                self.maximum_model = pickle.load(f)
            with open('historical_models/maximum_scaler.pkl', 'rb') as f:
                self.maximum_scaler = pickle.load(f)
            with open('historical_models/maximum_features.pkl', 'rb') as f:
                self.maximum_features = pickle.load(f)
            
            print("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    def calculate_position_size(self, current_balance: float, max_balance: float, 
                              recent_trades: List[Dict]) -> float:
        """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = self.base_position_size
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        current_drawdown = (max_balance - current_balance) / max_balance
        
        if current_drawdown > 0.05:  # –ï—Å–ª–∏ –ø—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 5%
            position_size *= self.drawdown_multiplier
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        if len(recent_trades) >= 3:
            recent_losses = sum(1 for trade in recent_trades[-3:] if trade['profit_amount'] < 0)
            if recent_losses >= 2:  # –ï—Å–ª–∏ 2 –∏–∑ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ —É–±—ã—Ç–æ—á–Ω—ã–µ
                position_size *= 0.7
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = max(self.min_position_size, min(position_size, self.max_position_size))
        
        return position_size
    
    def check_correlation_limit(self, symbol: str, active_positions: List[Dict]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏"""
        if len(active_positions) == 0:
            return True
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–≤–æ–ª–æ–≤
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Ü–µ–Ω
        similar_symbols = 0
        for pos in active_positions:
            if pos['symbol'].split('/')[0] == symbol.split('/')[0]:
                similar_symbols += 1
        
        return similar_symbols < 2  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–µ
    
    def calculate_features(self, data: pd.DataFrame, index: int, feature_type: str) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏"""
        try:
            if index < 100:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA
                return None
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
            recent_data = data.iloc[index-100:index+1].copy()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            recent_data['EMA20'] = recent_data['close'].ewm(span=20).mean()
            recent_data['EMA50'] = recent_data['close'].ewm(span=50).mean()
            recent_data['EMA100'] = recent_data['close'].ewm(span=100).mean()
            
            current = recent_data.iloc[-1]
            prev = recent_data.iloc[-2]
            
            features = {}
            
            if feature_type == 'minimum':
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∏–Ω–∏–º—É–º–æ–≤
                features['price_velocity'] = (current['close'] - prev['close']) / prev['close']
                features['ema20_velocity'] = (current['EMA20'] - prev['EMA20']) / prev['EMA20']
                features['ema20_angle'] = np.arctan((current['EMA20'] - prev['EMA20']) / prev['EMA20']) * 180 / np.pi
                features['price_ema20_distance'] = (current['close'] - current['EMA20']) / current['EMA20']
                features['ema20_ema50_distance'] = (current['EMA20'] - current['EMA50']) / current['EMA50']
                features['ema50_ema100_distance'] = (current['EMA50'] - current['EMA100']) / current['EMA100']
                features['price_ema50_distance'] = (current['close'] - current['EMA50']) / current['EMA50']
                features['ema20_ema100_distance'] = (current['EMA20'] - current['EMA100']) / current['EMA100']
                features['price_ema100_distance'] = (current['close'] - current['EMA100']) / current['EMA100']
                
            elif feature_type == 'maximum':
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤
                features['price_velocity'] = (current['close'] - prev['close']) / prev['close']
                features['ema20_velocity'] = (current['EMA20'] - prev['EMA20']) / prev['EMA20']
                features['ema20_angle'] = np.arctan((current['EMA20'] - prev['EMA20']) / prev['EMA20']) * 180 / np.pi
                features['price_ema20_distance'] = (current['close'] - current['EMA20']) / current['EMA20']
                features['ema20_ema50_distance'] = (current['EMA20'] - current['EMA50']) / current['EMA50']
                features['ema50_ema100_distance'] = (current['EMA50'] - current['EMA100']) / current['EMA100']
                features['price_ema50_distance'] = (current['close'] - current['EMA50']) / current['EMA50']
                features['ema20_ema100_distance'] = (current['EMA20'] - current['EMA100']) / current['EMA100']
                features['price_ema100_distance'] = (current['close'] - current['EMA100']) / current['EMA100']
            
            return features
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None
    
    def predict_signal(self, features: Dict, signal_type: str) -> Tuple[bool, float]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not features:
                return False, 0.0
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
            feature_vector = []
            if signal_type == 'minimum':
                for feature_name in self.minimum_features:
                    feature_vector.append(features.get(feature_name, 0))
                feature_vector = self.minimum_scaler.transform([feature_vector])
                prediction = self.minimum_model.predict(feature_vector)[0]
                probability = self.minimum_model.predict_proba(feature_vector)[0]
            else:  # maximum
                for feature_name in self.maximum_features:
                    feature_vector.append(features.get(feature_name, 0))
                feature_vector = self.maximum_scaler.transform([feature_vector])
                prediction = self.maximum_model.predict(feature_vector)[0]
                probability = self.maximum_model.predict_proba(feature_vector)[0]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç "—Ö–æ—Ä–æ—à–∏–π" —Å–∏–≥–Ω–∞–ª
            is_good_signal = prediction == 1
            confidence = max(probability) if len(probability) > 0 else 0.0
            
            return is_good_signal, confidence
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return False, 0.0
    
    def run_optimized_backtest(self, symbols: List[str] = None, start_date: str = "2025-01-01", 
                             end_date: str = "2025-09-23") -> Dict:
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        print(f"\nüöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:,}")
        print(f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {self.max_drawdown_limit*100}%")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.base_position_size*100}% (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        current_balance = self.initial_balance
        max_balance = self.initial_balance
        active_positions = []
        total_trades = 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        if symbols is None:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            with open('data_batch_10.json', 'r', encoding='utf-8') as f:
                all_data = json.load(f)
            symbols = list(all_data.keys())
        
        for symbol in symbols:
            print(f"\nüìà –û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol}...")
            
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–∞
                data_file = f"data_batch_10.json"
                with open(data_file, 'r', encoding='utf-8') as f:
                    all_data = json.load(f)
                
                if symbol not in all_data:
                    print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    continue
                
                symbol_data = all_data[symbol]
                df = pd.DataFrame(symbol_data)
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                df = df.sort_values('timestamp').reset_index(drop=True)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
                start_dt = datetime.strptime(start_date, '%Y-%m-%d')
                end_dt = datetime.strptime(end_date, '%Y-%m-%d')
                df = df[(df['timestamp'] >= start_dt) & (df['timestamp'] <= end_dt)]
                
                if len(df) < 100:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                for i in range(100, len(df)):
                    current_time = df.iloc[i]['timestamp']
                    current_price = df.iloc[i]['close']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –≤—ã—Ö–æ–¥
                    positions_to_close = []
                    for pos in active_positions:
                        if pos['symbol'] == symbol:
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞
                            max_features = self.calculate_features(df, i, 'maximum')
                            is_exit_signal, exit_confidence = self.predict_signal(max_features, 'maximum')
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
                            should_exit = False
                            exit_reason = "signal"
                            
                            if is_exit_signal and exit_confidence > 0.6:
                                should_exit = True
                            elif current_price <= pos['entry_price'] * (1 - self.stop_loss):
                                should_exit = True
                                exit_reason = "stop_loss"
                            elif current_price >= pos['entry_price'] * (1 + self.take_profit):
                                should_exit = True
                                exit_reason = "take_profit"
                            
                            if should_exit:
                                positions_to_close.append((pos, exit_reason))
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
                    for pos, exit_reason in positions_to_close:
                        exit_price = current_price * (1 - self.slippage)
                        profit_loss = (exit_price - pos['entry_price']) / pos['entry_price']
                        profit_amount = pos['position_size'] * profit_loss
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é
                        profit_amount -= pos['position_size'] * self.commission
                        
                        current_balance += profit_amount
                        max_balance = max(max_balance, current_balance)
                        
                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                        trade = {
                            'symbol': pos['symbol'],
                            'entry_time': pos['entry_time'].strftime('%Y-%m-%d %H:%M:%S'),
                            'exit_time': current_time.strftime('%Y-%m-%d %H:%M:%S'),
                            'entry_price': pos['entry_price'],
                            'exit_price': exit_price,
                            'position_size': pos['position_size'],
                            'profit_loss': profit_loss,
                            'profit_amount': profit_amount,
                            'balance_after': current_balance,
                            'exit_reason': exit_reason,
                            'duration_hours': (current_time - pos['entry_time']).total_seconds() / 3600
                        }
                        
                        self.trades.append(trade)
                        total_trades += 1
                        
                        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                        active_positions.remove(pos)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
                    if len(active_positions) < 5:  # –ú–∞–∫—Å–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞
                        min_features = self.calculate_features(df, i, 'minimum')
                        is_entry_signal, entry_confidence = self.predict_signal(min_features, 'minimum')
                        
                        if is_entry_signal and entry_confidence > 0.6:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                            if self.check_correlation_limit(symbol, active_positions):
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
                                recent_trades = self.trades[-10:] if len(self.trades) >= 10 else self.trades
                                position_size_ratio = self.calculate_position_size(current_balance, max_balance, recent_trades)
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
                                current_drawdown = (max_balance - current_balance) / max_balance
                                if current_drawdown < self.max_drawdown_limit:
                                    position_size = current_balance * position_size_ratio
                                    entry_price = current_price * (1 + self.slippage)
                                    
                                    # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                                    position = {
                                        'symbol': symbol,
                                        'entry_time': current_time,
                                        'entry_price': entry_price,
                                        'position_size': position_size
                                    }
                                    
                                    active_positions.append(position)
                                    current_balance -= position_size * self.commission
                                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
                continue
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        for pos in active_positions:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
            exit_price = pos['entry_price'] * 0.99  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —É–±—ã—Ç–æ–∫
            profit_loss = (exit_price - pos['entry_price']) / pos['entry_price']
            profit_amount = pos['position_size'] * profit_loss
            profit_amount -= pos['position_size'] * self.commission
            
            current_balance += profit_amount
            
            trade = {
                'symbol': pos['symbol'],
                'entry_time': pos['entry_time'].strftime('%Y-%m-%d %H:%M:%S'),
                'exit_time': end_date + " 23:59:59",
                'entry_price': pos['entry_price'],
                'exit_price': exit_price,
                'position_size': pos['position_size'],
                'profit_loss': profit_loss,
                'profit_amount': profit_amount,
                'balance_after': current_balance,
                'exit_reason': "end_of_period",
                'duration_hours': 24
            }
            
            self.trades.append(trade)
            total_trades += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return self.calculate_final_statistics()
    
    def calculate_final_statistics(self) -> Dict:
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.trades:
            return {"error": "–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_return = (self.trades[-1]['balance_after'] - self.initial_balance) / self.initial_balance * 100
        winning_trades = [t for t in self.trades if t['profit_amount'] > 0]
        losing_trades = [t for t in self.trades if t['profit_amount'] < 0]
        
        win_rate = len(winning_trades) / len(self.trades) * 100 if self.trades else 0
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
        balances = [self.initial_balance]
        for trade in self.trades:
            balances.append(trade['balance_after'])
        
        max_drawdown = 0
        peak = self.initial_balance
        for balance in balances:
            if balance > peak:
                peak = balance
            drawdown = (peak - balance) / peak * 100
            max_drawdown = max(max_drawdown, drawdown)
        
        # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        avg_profit = np.mean([t['profit_amount'] for t in winning_trades]) if winning_trades else 0
        avg_loss = np.mean([t['profit_amount'] for t in losing_trades]) if losing_trades else 0
        avg_duration = np.mean([t['duration_hours'] for t in self.trades])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_stats = {}
        for trade in self.trades:
            symbol = trade['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'trades': 0, 'profit': 0, 'wins': 0}
            
            symbol_stats[symbol]['trades'] += 1
            symbol_stats[symbol]['profit'] += trade['profit_amount']
            if trade['profit_amount'] > 0:
                symbol_stats[symbol]['wins'] += 1
        
        return {
            "backtest_info": {
                "start_date": "2025-01-01",
                "end_date": "2025-09-23",
                "initial_balance": self.initial_balance,
                "final_balance": self.trades[-1]['balance_after'],
                "total_return": total_return,
                "total_trades": len(self.trades),
                "win_rate": win_rate,
                "max_drawdown": max_drawdown,
                "avg_profit": avg_profit,
                "avg_loss": avg_loss,
                "avg_duration_hours": avg_duration,
                "position_size": self.base_position_size,
                "max_drawdown_limit": self.max_drawdown_limit,
                "commission": self.commission,
                "slippage": self.slippage,
                "stop_loss": self.stop_loss,
                "take_profit": self.take_profit
            },
            "trades": self.trades,
            "symbol_stats": symbol_stats
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ°Ô∏è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ï–† –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
    backtester = OptimizedBacktester()
    
    # –°–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
    results = backtester.run_optimized_backtest(symbols)
    
    if "error" in results:
        print(f"‚ùå –û—à–∏–±–∫–∞: {results['error']}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    results_file = f"optimized_backtest_results_{timestamp}.json"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    info = results['backtest_info']
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê:")
    print("=" * 50)
    print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${info['initial_balance']:,}")
    print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${info['final_balance']:,.2f}")
    print(f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: {info['total_return']:.2f}%")
    print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {info['total_trades']}")
    print(f"‚úÖ Win Rate: {info['win_rate']:.1f}%")
    print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {info['max_drawdown']:.2f}%")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${info['avg_profit']:.2f}")
    print(f"üìä –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${info['avg_loss']:.2f}")
    print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['avg_duration_hours']:.1f} —á–∞—Å–æ–≤")
    print(f"üõ°Ô∏è –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {info['max_drawdown_limit']*100}%")
    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {info['position_size']*100}%")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_file = f"optimized_backtest_report_{timestamp}.md"
    create_optimized_report(results, report_file)
    
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

def create_optimized_report(results: Dict, filename: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É"""
    info = results['backtest_info']
    
    report = f"""# üõ°Ô∏è –û–¢–ß–ï–¢ –ü–û –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ú–£ –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–£

## üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

- **–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:** ${info['initial_balance']:,}
- **–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:** ${info['final_balance']:,.2f}
- **–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:** {info['total_return']:.2f}%
- **–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:** {info['total_trades']}
- **Win Rate:** {info['win_rate']:.1f}%
- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞:** {info['max_drawdown']:.2f}%

## üõ°Ô∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò

- **–õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏:** {info['max_drawdown_limit']*100}%
- **–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** {info['position_size']*100}% (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
- **Stop Loss:** {info['stop_loss']*100}%
- **Take Profit:** {info['take_profit']*100}%
- **–ö–æ–º–∏—Å—Å–∏—è:** {info['commission']*100}%
- **–ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ:** {info['slippage']*100}%

## üìà –°–†–ê–í–ù–ï–ù–ò–ï –° –û–ë–´–ß–ù–´–ú –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–û–ú

| –ú–µ—Ç—Ä–∏–∫–∞ | –û–±—ã—á–Ω—ã–π | –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π | –£–ª—É—á—à–µ–Ω–∏–µ |
|---------|---------|------------------|-----------|
| –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å | 1,941% | {info['total_return']:.1f}% | {'+' if info['total_return'] > 1941 else ''}{info['total_return'] - 1941:.1f}% |
| –ü—Ä–æ—Å–∞–¥–∫–∞ | 95.13% | {info['max_drawdown']:.2f}% | {'+' if info['max_drawdown'] < 95.13 else ''}{95.13 - info['max_drawdown']:.2f}% |
| Win Rate | 87.2% | {info['win_rate']:.1f}% | {'+' if info['win_rate'] > 87.2 else ''}{info['win_rate'] - 87.2:.1f}% |

## üéØ –ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø

1. **–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å–∞–¥–∫–∏:** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ {info['max_drawdown_limit']*100}%
2. **–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:** –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ—Å–∞–¥–∫–µ
3. **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:** –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–µ
4. **–£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:** –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥

## ‚úÖ –í–´–í–û–î–´

- **–ü—Ä–æ—Å–∞–¥–∫–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–∂–µ–Ω–∞** —Å 95.13% –¥–æ {info['max_drawdown']:.2f}%
- **–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π** –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π
- **–ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ**, –Ω–æ —Ä–∏—Å–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã
- **–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏** —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏

## üöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

1. **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é** –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
2. **–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Å–∞–¥–∫—É** –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
3. **–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
4. **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö** –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(report)

if __name__ == "__main__":
    main()
