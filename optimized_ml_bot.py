#!/usr/bin/env python3
"""
ü§ñ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô TELEGRAM –ë–û–¢ –° –£–ü–†–ê–í–õ–ï–ù–ò–ï–ú –†–ò–°–ö–ê–ú–ò
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
"""

import asyncio
import logging
import os
import json
import pickle
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import ccxt
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from advanced_ema_analyzer import AdvancedEMAAnalyzer
from advanced_ml_trainer import AdvancedMLTrainer
from shooting_star_predictor import ShootingStarPredictor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class OptimizedRiskManager:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.max_drawdown_limit = 0.20  # 20%
        self.max_position_size = 0.05   # 5%
        self.min_position_size = 0.01   # 1%
        self.base_position_size = 0.03  # 3%
        self.max_active_positions = 5
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_stats = {}
        
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {
                'balance': 10000,
                'max_balance': 10000,
                'active_positions': [],
                'total_trades': 0,
                'winning_trades': 0,
                'max_drawdown': 0,
                'last_update': datetime.now()
            }
        return self.user_stats[user_id]
    
    def calculate_position_size(self, user_id: int) -> float:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        stats = self.get_user_stats(user_id)
        
        position_size = self.base_position_size
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        current_drawdown = (stats['max_balance'] - stats['balance']) / stats['max_balance']
        if current_drawdown > 0.05:  # –ï—Å–ª–∏ –ø—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 5%
            position_size *= 0.5
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_size = max(self.min_position_size, min(position_size, self.max_position_size))
        
        return position_size
    
    def can_open_position(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        stats = self.get_user_stats(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏
        current_drawdown = (stats['max_balance'] - stats['balance']) / stats['max_balance']
        if current_drawdown >= self.max_drawdown_limit:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if len(stats['active_positions']) >= self.max_active_positions:
            return False
        
        return True
    
    def update_user_stats(self, user_id: int, trade_result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        stats = self.get_user_stats(user_id)
        
        stats['balance'] += trade_result.get('profit_amount', 0)
        stats['max_balance'] = max(stats['max_balance'], stats['balance'])
        stats['total_trades'] += 1
        
        if trade_result.get('profit_amount', 0) > 0:
            stats['winning_trades'] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
        current_drawdown = (stats['max_balance'] - stats['balance']) / stats['max_balance']
        stats['max_drawdown'] = max(stats['max_drawdown'], current_drawdown)
        
        stats['last_update'] = datetime.now()

class OptimizedMLBot:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏"""
    
    def __init__(self):
        self.risk_manager = OptimizedRiskManager()
        self.ema_analyzer = AdvancedEMAAnalyzer()
        self.ml_trainer = AdvancedMLTrainer()
        self.phase_rules = self.ml_trainer._load_phase_rules()
        self.shooting_star_predictor = ShootingStarPredictor()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        self.load_optimized_models()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        self.config = self.load_config()
        self.exchange = self.setup_exchange()
        
    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('bot_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                return {
                    'telegram_bot_token': config['telegram']['bot_token'],
                    'binance_api_key': config['binance_api']['api_key'],
                    'binance_secret_key': config['binance_api']['secret_key'],
                    'sandbox_mode': False
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def setup_exchange(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∏—Ä–∂–∏"""
        try:
            exchange = ccxt.binance({
                'apiKey': self.config.get('binance_api_key', ''),
                'secret': self.config.get('binance_secret_key', ''),
                'sandbox': self.config.get('sandbox_mode', False),
                'enableRateLimit': True,
            })
            return exchange
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏—Ä–∂–∏: {e}")
            return None
    
    def load_optimized_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ML –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏–∑ historical_models/
            with open('historical_models/minimum_model.pkl', 'rb') as f:
                self.minimum_model = pickle.load(f)
            with open('historical_models/minimum_scaler.pkl', 'rb') as f:
                self.minimum_scaler = pickle.load(f)
            with open('historical_models/minimum_features.pkl', 'rb') as f:
                self.minimum_features = pickle.load(f)
            
            with open('historical_models/maximum_model.pkl', 'rb') as f:
                self.maximum_model = pickle.load(f)
            with open('historical_models/maximum_scaler.pkl', 'rb') as f:
                self.maximum_scaler = pickle.load(f)
            with open('historical_models/maximum_features.pkl', 'rb') as f:
                self.maximum_features = pickle.load(f)
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        
        welcome_text = """
ü§ñ **–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô ML –¢–û–†–ì–û–í–´–ô –ë–û–¢**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ ML —Å–∏–≥–Ω–∞–ª—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–∞–¥–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 20%
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
‚Ä¢ Win Rate: 87.2%
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: 132.85% –∑–∞ 9 –º–µ—Å—è—Ü–µ–≤

üõ°Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: 20%
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: 3% (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: 5
‚Ä¢ Stop Loss: 3%
‚Ä¢ Take Profit: 6%

üìä **–ö–æ–º–∞–Ω–¥—ã:**
/optimized_signals - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
/risk_settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∏—Å–∫–æ–≤
/portfolio - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
/statistics - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
/drawdown_monitor - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Å–∞–¥–∫–∏

üöÄ **–ì–æ—Ç–æ–≤ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!**
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signals")],
            [InlineKeyboardButton("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤", callback_data="risk_settings")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def optimized_signals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /optimized_signals - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
        if not self.risk_manager.can_open_position(user_id):
            stats = self.risk_manager.get_user_stats(user_id)
            current_drawdown = (stats['max_balance'] - stats['balance']) / stats['max_balance'] * 100
            
            await update.message.reply_text(
                f"‚ö†Ô∏è **–ü–†–ï–í–´–®–ï–ù –õ–ò–ú–ò–¢ –†–ò–°–ö–û–í**\n\n"
                f"üìâ –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%\n"
                f"üö´ –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {self.risk_manager.max_drawdown_limit * 100}%\n"
                f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(stats['active_positions'])}/{self.risk_manager.max_active_positions}\n\n"
                f"üõ°Ô∏è –î–æ–∂–¥–∏—Ç–µ—Å—å —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–æ–≤.",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = await self.get_optimized_signals()
        
        if not signals:
            await update.message.reply_text("‚ùå –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
        message = "üéØ **–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –°–ò–ì–ù–ê–õ–´**\n\n"
        
        for i, signal in enumerate(signals[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
            position_size = self.risk_manager.calculate_position_size(user_id)
            
            message += f"**{i}. {signal['symbol']}**\n"
            message += f"üìà –¢–∏–ø: {signal['type']}\n"
            message += f"üí∞ –¶–µ–Ω–∞: ${signal['price']:,.2f}\n"
            message += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal['confidence']:.1%}\n"
            message += f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.1%}\n"
            phase_label = signal.get('phase')
            if phase_label:
                phase_match = signal.get('phase_match')
                status_icon = '‚úÖ' if phase_match else '‚ùå'
                weights = signal.get('phase_weights') or dict()
                message += f"–§–∞–∑–∞: {phase_label} {status_icon}\n"
                if weights:
                    message += f"–î–æ–ª–∏ (—Å–∫–æ—Ä/–¥–∏—Å—Ç/—É–≥–æ–ª): {weights.get('w_speed', 0):.6f} / {weights.get('w_distance', 0):.6f} / {weights.get('w_angle', 0):.6f}\n"
            message += f"‚è∞ –í—Ä–µ–º—è: {signal['timestamp']}\n\n"
        
        message += f"üõ°Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ**\n"
        message += f"üìâ –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {self.risk_manager.max_drawdown_limit * 100}%\n"
        message += f"üìä –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {self.risk_manager.max_active_positions}"
        
        keyboard = [
            [InlineKeyboardButton("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤", callback_data="risk_settings")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def get_optimized_signals(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
            symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
            signals = []
            
            for symbol in symbols:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    ohlcv = self.exchange.fetch_ohlcv(symbol, '1h', limit=100)
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é EMA
                    analysis = self.ema_analyzer.analyze_coin(symbol, df)
                    
                    if analysis and analysis.get('signal') in ['BUY', 'SELL']:
                        # –ü–æ–ª—É—á–∞–µ–º ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                        ml_features = self.ema_analyzer.extract_ml_features(df)
                        trainer_features = self.ml_trainer.generate_features_from_data(df)

                        phase_label = None
                        phase_weights = None
                        phase_match = True
                        if trainer_features is not None and len(trainer_features) >= 21:
                            speed_feature = float(trainer_features[11])
                            distance_feature = float(trainer_features[12])
                            angle_feature = float(trainer_features[13])
                            phase_state = float(trainer_features[20])
                            phase_label = 'impulse' if phase_state >= 0.5 else 'correction'
                            phase_weights = self.ml_trainer._compute_phase_weights(speed_feature, distance_feature, angle_feature)
                            if self.phase_rules:
                                phase_match = self.ml_trainer._matches_phase_rules(phase_weights, self.phase_rules.get(phase_label))
                        else:
                            phase_match = False

                        if analysis['signal'] == 'BUY':
                            prediction = self.predict_minimum(ml_features)
                            required_phase = 'impulse'
                        else:
                            prediction = self.predict_maximum(ml_features)
                            required_phase = 'correction'

                        if phase_label != required_phase or not phase_match:
                            continue

                        if prediction['is_good_signal'] and prediction['confidence'] > 0.6:
                            signals.append({
                                'symbol': symbol,
                                'type': analysis['signal'],
                                'price': df['close'].iloc[-1],
                                'confidence': prediction['confidence'],
                                'timestamp': datetime.now().strftime('%H:%M:%S'),
                                'analysis': analysis,
                                'phase': phase_label,
                                'phase_match': phase_match,
                                'phase_weights': phase_weights
                            })
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                    continue
            
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def predict_minimum(self, features: Dict) -> Dict:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏"""
        try:
            feature_vector = []
            for feature_name in self.minimum_features:
                feature_vector.append(features.get(feature_name, 0))
            
            feature_vector = self.minimum_scaler.transform([feature_vector])
            prediction = self.minimum_model.predict(feature_vector)[0]
            probability = self.minimum_model.predict_proba(feature_vector)[0]
            
            return {
                'is_good_signal': prediction == 1,
                'confidence': max(probability) if len(probability) > 0 else 0.0
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞: {e}")
            return {'is_good_signal': False, 'confidence': 0.0}
    
    def predict_maximum(self, features: Dict) -> Dict:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∞–∫—Å–∏–º—É–º–∞ —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏"""
        try:
            feature_vector = []
            for feature_name in self.maximum_features:
                feature_vector.append(features.get(feature_name, 0))
            
            feature_vector = self.maximum_scaler.transform([feature_vector])
            prediction = self.maximum_model.predict(feature_vector)[0]
            probability = self.maximum_model.predict_proba(feature_vector)[0]
            
            return {
                'is_good_signal': prediction == 1,
                'confidence': max(probability) if len(probability) > 0 else 0.0
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–∞–∫—Å–∏–º—É–º–∞: {e}")
            return {'is_good_signal': False, 'confidence': 0.0}
    
    async def risk_settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /risk_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–æ–≤"""
        user_id = update.effective_user.id
        stats = self.risk_manager.get_user_stats(user_id)
        
        current_drawdown = (stats['max_balance'] - stats['balance']) / stats['max_balance'] * 100
        
        message = f"""
üõ°Ô∏è **–ù–ê–°–¢–†–û–ô–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ò–°–ö–ê–ú–ò**

üìä **–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {self.risk_manager.max_drawdown_limit * 100}%
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.risk_manager.base_position_size * 100}%
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π: {self.risk_manager.max_active_positions}
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.risk_manager.min_position_size * 100}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.risk_manager.max_position_size * 100}%

üìà **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${stats['balance']:,.2f}
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${stats['max_balance']:,.2f}
‚Ä¢ –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {current_drawdown:.2f}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown'] * 100:.2f}%
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}
‚Ä¢ Win Rate: {(stats['winning_trades'] / stats['total_trades'] * 100) if stats['total_trades'] > 0 else 0:.1f}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(stats['active_positions'])}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –ü—Ä–æ—Å–∞–¥–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã ‚úÖ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ ‚úÖ
‚Ä¢ –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Å–¥–µ–ª–∫–∞–º ‚úÖ
        """
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signals")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="risk_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def statistics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /statistics - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        user_id = update.effective_user.id
        stats = self.risk_manager.get_user_stats(user_id)
        
        win_rate = (stats['winning_trades'] / stats['total_trades'] * 100) if stats['total_trades'] > 0 else 0
        profit_loss = stats['balance'] - 10000
        
        message = f"""
üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–†–ì–û–í–õ–ò**

üí∞ **–§–∏–Ω–∞–Ω—Å—ã:**
‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: $10,000
‚Ä¢ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${stats['balance']:,.2f}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profit_loss:,.2f} ({profit_loss/100:.1f}%)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${stats['max_balance']:,.2f}

üìà **–¢–æ—Ä–≥–æ–≤–ª—è:**
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {stats['winning_trades']}
‚Ä¢ Win Rate: {win_rate:.1f}%
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown'] * 100:.2f}%

üõ°Ô∏è **–†–∏—Å–∫–∏:**
‚Ä¢ –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {((stats['max_balance'] - stats['balance']) / stats['max_balance'] * 100):.2f}%
‚Ä¢ –õ–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {self.risk_manager.max_drawdown_limit * 100}%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(stats['active_positions'])}/{self.risk_manager.max_active_positions}

‚è∞ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {stats['last_update'].strftime('%H:%M:%S')}
        """
        
        keyboard = [
            [InlineKeyboardButton("üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤", callback_data="risk_settings")],
            [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª—ã", callback_data="get_signals")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "get_signals":
            await self.optimized_signals_command(update, context)
        elif query.data == "risk_settings":
            await self.risk_settings_command(update, context)
        elif query.data == "statistics":
            await self.statistics_command(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.config.get('telegram_bot_token'):
            logger.error("‚ùå –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config['telegram_bot_token']).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("optimized_signals", self.optimized_signals_command))
        application.add_handler(CommandHandler("risk_settings", self.risk_settings_command))
        application.add_handler(CommandHandler("statistics", self.statistics_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        logger.info("üöÄ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ML –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = OptimizedMLBot()
    bot.run()

if __name__ == "__main__":
    main()