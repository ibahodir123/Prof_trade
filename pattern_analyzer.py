#!/usr/bin/env python3
"""
–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–ê–¢–¢–ï–†–ù–û–í –î–õ–Ø LONG –ü–û–ó–ò–¶–ò–ô
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∏–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–µ–Ω–¥–æ–≤
–°–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
"""

import numpy as np
import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from enum import Enum
import ccxt

logger = logging.getLogger(__name__)

class TrendType(Enum):
    """–¢–∏–ø—ã —Ç—Ä–µ–Ω–¥–æ–≤"""
    DOWNTREND = "–Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
    SIDEWAYS = "–±–æ–∫–æ–≤–æ–π" 
    UPTREND = "–≤–æ—Å—Ö–æ–¥—è—â–∏–π"

class MovementType(Enum):
    """–¢–∏–ø—ã –¥–≤–∏–∂–µ–Ω–∏–π"""
    IMPULSE_DOWN = "–∏–º–ø—É–ª—å—Å_–≤–Ω–∏–∑"
    IMPULSE_UP = "–∏–º–ø—É–ª—å—Å_–≤–≤–µ—Ä—Ö"
    CORRECTION_UP = "–∫–æ—Ä—Ä–µ–∫—Ü–∏—è_–≤–≤–µ—Ä—Ö"
    CORRECTION_DOWN = "–∫–æ—Ä—Ä–µ–∫—Ü–∏—è_–≤–Ω–∏–∑"

@dataclass
class PatternPoint:
    """–¢–æ—á–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —Å 9 –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    timestamp: str
    trend_type: TrendType
    movement_type: MovementType
    phase: str  # "–Ω–∞—á–∞–ª–æ" –∏–ª–∏ "–∫–æ–Ω–µ—Ü"
    price: float
    
    # 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (27 –∑–Ω–∞—á–µ–Ω–∏–π)
    velocities: Dict[str, float]  # 4 –∑–Ω–∞—á–µ–Ω–∏—è: price, ema20, ema50, ema100
    accelerations: Dict[str, float]  # 4 –∑–Ω–∞—á–µ–Ω–∏—è
    velocity_ratios: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    distances: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    distance_changes: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    angles: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    angle_changes: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    ema_relationships: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    synchronizations: Dict[str, float]  # 3 –∑–Ω–∞—á–µ–Ω–∏—è
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–≤–∏–∂–µ–Ω–∏—è (–¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)
    price_change_percent: float  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–≤–∏–∂–µ–Ω–∏—è
    movement_duration_hours: int  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è

@dataclass
class MovementPattern:
    """–ü–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è (–Ω–∞—á–∞–ª–æ + –∫–æ–Ω–µ—Ü)"""
    start_point: PatternPoint
    end_point: PatternPoint
    trend_type: TrendType
    movement_type: MovementType
    profit_percent: float  # –ü—Ä–∏–±—ã–ª—å –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏
    duration_hours: int

class DetailedPatternAnalyzer:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    
    def __init__(self):
        self.patterns_database: List[MovementPattern] = []
        self.trend_detection_period = 30  # –£–º–µ–Ω—å—à–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        self.impulse_threshold = 0.008  # 0.8% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –∏–º–ø—É–ª—å—Å–∞ (–±—ã–ª–æ 1.5%)
        self.correction_threshold = 0.005  # 0.5% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ (–±—ã–ª–æ 0.8%)
        
    def analyze_historical_data(self, symbol: str, days: int = 90) -> bool:
        """–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –±–∞–∑—É –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            patterns_before = len(self.patterns_database)
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞—é –°–¢–†–£–ö–¢–£–†–ù–´–ô –∞–Ω–∞–ª–∏–∑ {symbol} —Å 01.01.2025...")
            print(f"üîç –î–ï–ë–ê–ì: –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {patterns_before}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å 01.01.2025
            df = self._get_historical_data(symbol, days)
            if df is None or len(df) < 100:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            df = self._prepare_all_features(df)
            if df is None:
                return False
            
            logger.info(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            # –ù–û–í–´–ô –ü–û–î–•–û–î: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            self._structural_analysis(df, symbol)
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(self.patterns_database)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è {symbol}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return False

    def _structural_analysis(self, df: pd.DataFrame, symbol: str):
        """–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã, –ø–æ—Ç–æ–º —Ç—Ä–µ–Ω–¥—ã, –ø–æ—Ç–æ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã"""
        try:
            logger.info("üîç –ò—â—É –≤—Å–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã...")
            print(f"üîç –î–ï–ë–ê–ì: –ù–∞—á–∏–Ω–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑. –î–∞–Ω–Ω—ã—Ö: {len(df)} —Å–≤–µ—á–µ–π")
            
            # 1. –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∑–Ω–∞—á–∏–º—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            major_highs, major_lows = self._find_major_extremes(df)
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(major_highs)} –º–∞–∫—Å–∏–º—É–º–æ–≤, {len(major_lows)} –º–∏–Ω–∏–º—É–º–æ–≤")
            print(f"üîç –î–ï–ë–ê–ì: –ù–∞–π–¥–µ–Ω–æ {len(major_highs)} –º–∞–∫—Å–∏–º—É–º–æ–≤, {len(major_lows)} –º–∏–Ω–∏–º—É–º–æ–≤")
            
            # 2. –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
            extremes_sequence = self._create_extremes_sequence(major_highs, major_lows)
            
            logger.info(f"üìà –°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ {len(extremes_sequence)} —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤")
            
            # 3. –†–∞–∑–º–µ—á–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –º–µ–∂–¥—É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞–º–∏
            trends = self._identify_trends_from_extremes(extremes_sequence, df)
            
            logger.info(f"üìä –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {len(trends)} —Ç—Ä–µ–Ω–¥–æ–≤")
            
            # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–Ω–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            for trend in trends:
                self._analyze_trend_patterns(trend, df, symbol)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")

    def _find_major_extremes(self, df: pd.DataFrame) -> Tuple[List[Dict], List[Dict]]:
        """–ü–æ–∏—Å–∫ –∑–Ω–∞—á–∏–º—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ (–Ω–µ –º–µ–ª–∫–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π)"""
        try:
            major_highs = []
            major_lows = []
            
            prices = df['close'].values
            min_significance = 0.01  # 1% –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ –¥–ª—è –∑–Ω–∞—á–∏–º–æ–≥–æ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞ (–±—ã–ª–æ 2%)
            lookback = 12  # 12 —á–∞—Å–æ–≤ lookback –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±—ã–ª–æ 24)
            
            for i in range(lookback, len(prices) - lookback):
                current_price = prices[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                is_major_high = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i:
                        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ –Ω–∞ –º–∏–Ω–∏–º—É–º 2%
                        if prices[j] >= current_price * (1 - min_significance):
                            is_major_high = False
                            break
                
                if is_major_high:
                    major_highs.append({
                        'idx': i,
                        'price': current_price,
                        'timestamp': df.index[i],
                        'type': 'high'
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                is_major_low = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i:
                        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∏–∂–µ –Ω–∞ –º–∏–Ω–∏–º—É–º 2%
                        if prices[j] <= current_price * (1 + min_significance):
                            is_major_low = False
                            break
                
                if is_major_low:
                    major_lows.append({
                        'idx': i,
                        'price': current_price,
                        'timestamp': df.index[i],
                        'type': 'low'
                    })
            
            return major_highs, major_lows
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {e}")
            return [], []

    def _create_extremes_sequence(self, highs: List[Dict], lows: List[Dict]) -> List[Dict]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            all_extremes = highs + lows
            all_extremes.sort(key=lambda x: x['idx'])
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º: —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            filtered_sequence = []
            last_type = None
            
            for extreme in all_extremes:
                if extreme['type'] != last_type:
                    filtered_sequence.append(extreme)
                    last_type = extreme['type']
                else:
                    # –ï—Å–ª–∏ —Ç–æ—Ç –∂–µ —Ç–∏–ø, –±–µ—Ä–µ–º –±–æ–ª–µ–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π
                    if extreme['type'] == 'high' and extreme['price'] > filtered_sequence[-1]['price']:
                        filtered_sequence[-1] = extreme
                    elif extreme['type'] == 'low' and extreme['price'] < filtered_sequence[-1]['price']:
                        filtered_sequence[-1] = extreme
            
            return filtered_sequence
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return []

    def _identify_trends_from_extremes(self, extremes: List[Dict], df: pd.DataFrame) -> List[Dict]:
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤"""
        try:
            trends = []
            
            for i in range(len(extremes) - 1):
                current_extreme = extremes[i]
                next_extreme = extremes[i + 1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–¥–∞
                if current_extreme['type'] == 'high' and next_extreme['type'] == 'low':
                    trend_type = TrendType.DOWNTREND
                elif current_extreme['type'] == 'low' and next_extreme['type'] == 'high':
                    trend_type = TrendType.UPTREND
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                price_change = (next_extreme['price'] - current_extreme['price']) / current_extreme['price'] * 100
                
                trend = {
                    'start_idx': current_extreme['idx'],
                    'end_idx': next_extreme['idx'],
                    'start_price': current_extreme['price'],
                    'end_price': next_extreme['price'],
                    'trend_type': trend_type,
                    'price_change_percent': price_change,
                    'duration_hours': next_extreme['idx'] - current_extreme['idx']
                }
                
                trends.append(trend)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–¥–æ–≤
            uptrends = sum(1 for t in trends if t['trend_type'] == TrendType.UPTREND)
            downtrends = sum(1 for t in trends if t['trend_type'] == TrendType.DOWNTREND)
            
            logger.info(f"üìä –¢—Ä–µ–Ω–¥—ã: {uptrends} –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö, {downtrends} –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö")
            print(f"üîç –î–ï–ë–ê–ì: –¢—Ä–µ–Ω–¥—ã: {uptrends} –≤–æ—Å—Ö–æ–¥—è—â–∏—Ö, {downtrends} –Ω–∏—Å—Ö–æ–¥—è—â–∏—Ö")
            
            return trends
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
            return []

    def _analyze_trend_patterns(self, trend: Dict, df: pd.DataFrame, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            start_idx = trend['start_idx']
            end_idx = trend['end_idx']
            trend_type = trend['trend_type']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–∞
            trend_df = df.iloc[start_idx:end_idx + 1].copy()
            
            if len(trend_df) < 5:  # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–µ–Ω–¥
                return
            
            # –ò—â–µ–º –∏–º–ø—É–ª—å—Å—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–Ω–¥–∞
            if trend_type == TrendType.UPTREND:
                self._find_uptrend_patterns(trend_df, start_idx, symbol, trend)
            elif trend_type == TrendType.DOWNTREND:
                self._find_downtrend_patterns(trend_df, start_idx, symbol, trend)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _find_uptrend_patterns(self, trend_df: pd.DataFrame, global_start_idx: int, symbol: str, trend: Dict):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –í –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º:
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö (–≤–µ—Å—å —Ç—Ä–µ–Ω–¥)
            # 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–Ω–∏–∑ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–Ω–¥–∞
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø—É–ª—å—Å
            if abs(trend['price_change_percent']) >= self.impulse_threshold * 100:
                pattern = self._create_movement_pattern(
                    trend_df, 0, len(trend_df) - 1,
                    TrendType.UPTREND, MovementType.IMPULSE_UP,
                    trend['price_change_percent'], symbol
                )
                if pattern:
                    self.patterns_database.append(pattern)
            
            # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            internal_highs, internal_lows = self._find_local_extremes(trend_df)
            
            for i in range(len(internal_highs) - 1):
                for low in internal_lows:
                    if internal_highs[i]['idx'] < low['idx'] < internal_highs[i + 1]['idx']:
                        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É
                        correction_change = (low['price'] - internal_highs[i]['price']) / internal_highs[i]['price'] * 100
                        
                        if abs(correction_change) >= self.correction_threshold * 100:
                            pattern = self._create_movement_pattern(
                                trend_df, internal_highs[i]['idx'], low['idx'],
                                TrendType.UPTREND, MovementType.CORRECTION_DOWN,
                                abs(correction_change), symbol
                            )
                            if pattern:
                                self.patterns_database.append(pattern)
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _find_downtrend_patterns(self, trend_df: pd.DataFrame, global_start_idx: int, symbol: str, trend: Dict):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –í –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º:
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑ (–≤–µ—Å—å —Ç—Ä–µ–Ω–¥)  
            # 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–≤–µ—Ä—Ö –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ–Ω–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è LONG)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑
            if abs(trend['price_change_percent']) >= self.impulse_threshold * 100:
                pattern = self._create_movement_pattern(
                    trend_df, 0, len(trend_df) - 1,
                    TrendType.DOWNTREND, MovementType.IMPULSE_DOWN,
                    abs(trend['price_change_percent']), symbol
                )
                if pattern:
                    self.patterns_database.append(pattern)
            
            # –ò—â–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–≤–µ—Ä—Ö (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
            internal_highs, internal_lows = self._find_local_extremes(trend_df)
            
            for i in range(len(internal_lows) - 1):
                for high in internal_highs:
                    if internal_lows[i]['idx'] < high['idx'] < internal_lows[i + 1]['idx']:
                        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ç –Ω–∏–∑–∫–æ–≥–æ –∫ –≤—ã—Å–æ–∫–æ–º—É (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
                        correction_profit = (high['price'] - internal_lows[i]['price']) / internal_lows[i]['price'] * 100
                        
                        if correction_profit >= self.correction_threshold * 100:
                            pattern = self._create_movement_pattern(
                                trend_df, internal_lows[i]['idx'], high['idx'],
                                TrendType.DOWNTREND, MovementType.CORRECTION_UP,
                                correction_profit, symbol
                            )
                            if pattern:
                                self.patterns_database.append(pattern)
                        break
                        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _classify_trend(self, df: pd.DataFrame, current_idx: int) -> TrendType:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ 9 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∏–Ω–¥–µ–∫—Å–∞
            if current_idx < 0 or current_idx >= len(df):
                return TrendType.SIDEWAYS
            
            # –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            current_row = df.iloc[current_idx]
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º EMA –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ema20_angle = current_row['ema20_angle']
            ema50_angle = current_row['ema50_angle'] 
            ema100_angle = current_row['ema100_angle']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
            price_velocity = current_row['price_velocity']
            ema20_velocity = current_row['ema20_velocity']
            ema50_velocity = current_row['ema50_velocity']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            sync_20 = current_row['price_ema20_sync']
            sync_50 = current_row['price_ema50_sync']
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (—Å–º—è–≥—á–µ–Ω–Ω—ã–µ)
            uptrend_signals = 0
            if ema20_angle > 5 or ema50_angle > 3: uptrend_signals += 1  # –°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏
            if price_velocity > 0.005 or ema20_velocity > 0.003: uptrend_signals += 1  # –°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏
            if sync_20 > 0.4 or sync_50 > 0.3: uptrend_signals += 1  # –°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏
            if current_row['ema20_to_ema50'] > 1.001: uptrend_signals += 1
            if current_row['price_to_ema20_distance'] > 0: uptrend_signals += 1  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ (—Å–º—è–≥—á–µ–Ω–Ω—ã–µ)
            downtrend_signals = 0
            if ema20_angle < -5 or ema50_angle < -3: downtrend_signals += 1  # –°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏
            if price_velocity < -0.005 or ema20_velocity < -0.003: downtrend_signals += 1  # –°–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏
            if sync_20 > 0.4 or sync_50 > 0.3: downtrend_signals += 1  # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–Ω–∏–∑
            if current_row['ema20_to_ema50'] < 0.999: downtrend_signals += 1
            if current_row['price_to_ema20_distance'] < 0: downtrend_signals += 1  # –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–¥–∞ (—Å–Ω–∏–∂–µ–Ω—ã –ø–æ—Ä–æ–≥–∏)
            if uptrend_signals >= 3:
                trend_result = TrendType.UPTREND
            elif downtrend_signals >= 3:
                trend_result = TrendType.DOWNTREND
            else:
                trend_result = TrendType.SIDEWAYS
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 100-–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if current_idx % 100 == 0:
                logger.info(f"üîç –ü–µ—Ä–∏–æ–¥ {current_idx}: {trend_result.value} (up:{uptrend_signals}, down:{downtrend_signals})")
            
            return trend_result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–∞: {e}")
            return TrendType.SIDEWAYS

    def _analyze_downtrend_movements(self, df: pd.DataFrame, current_idx: int, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –í –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º:
            # 1. –ò–º–ø—É–ª—å—Å—ã –≤–Ω–∏–∑ (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
            # 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–≤–µ—Ä—Ö (–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è LONG)
            
            window_start = max(0, current_idx - 20)
            window_end = min(len(df), current_idx + 10)
            window_df = df.iloc[window_start:window_end].copy()
            
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
            highs, lows = self._find_local_extremes(window_df)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            for i in range(len(lows) - 1):
                current_low = lows[i]
                next_high = None
                next_low = None
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞
                for high in highs:
                    if high['idx'] > current_low['idx']:
                        next_high = high
                        break
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º—É–º –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º—É–º–∞
                if next_high:
                    for low in lows:
                        if low['idx'] > next_high['idx']:
                            next_low = low
                            break
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤–≤–µ—Ä—Ö (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
                if next_high:
                    correction_up_profit = (next_high['price'] - current_low['price']) / current_low['price'] * 100
                    
                    if correction_up_profit >= self.correction_threshold * 100:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–≤–µ—Ä—Ö
                        pattern = self._create_movement_pattern(
                            window_df, current_low['idx'], next_high['idx'],
                            TrendType.DOWNTREND, MovementType.CORRECTION_UP,
                            correction_up_profit, symbol
                        )
                        if pattern:
                            self.patterns_database.append(pattern)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø—É–ª—å—Å –≤–Ω–∏–∑ (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
                if next_high and next_low:
                    impulse_down_change = (next_low['price'] - next_high['price']) / next_high['price'] * 100
                    
                    if abs(impulse_down_change) >= self.impulse_threshold * 100:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–ø—É–ª—å—Å–∞ –≤–Ω–∏–∑
                        pattern = self._create_movement_pattern(
                            window_df, next_high['idx'], next_low['idx'],
                            TrendType.DOWNTREND, MovementType.IMPULSE_DOWN,
                            impulse_down_change, symbol
                        )
                        if pattern:
                            self.patterns_database.append(pattern)
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _analyze_uptrend_movements(self, df: pd.DataFrame, current_idx: int, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –í –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º:
            # 1. –ò–º–ø—É–ª—å—Å—ã –≤–≤–µ—Ä—Ö (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
            # 2. –ö–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≤–Ω–∏–∑ (—Ç–æ—á–∫–∏ –¥–æ–ª–∏–≤–∫–∏ LONG)
            
            window_start = max(0, current_idx - 20)
            window_end = min(len(df), current_idx + 10)
            window_df = df.iloc[window_start:window_end].copy()
            
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
            highs, lows = self._find_local_extremes(window_df)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            for i in range(len(lows) - 1):
                current_low = lows[i]
                next_high = None
                next_low = None
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º
                for high in highs:
                    if high['idx'] > current_low['idx']:
                        next_high = high
                        break
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º—É–º
                if next_high:
                    for low in lows:
                        if low['idx'] > next_high['idx']:
                            next_low = low
                            break
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º–ø—É–ª—å—Å –≤–≤–µ—Ä—Ö (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
                if next_high:
                    impulse_up_profit = (next_high['price'] - current_low['price']) / current_low['price'] * 100
                    
                    if impulse_up_profit >= self.impulse_threshold * 100:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏–º–ø—É–ª—å—Å–∞ –≤–≤–µ—Ä—Ö
                        pattern = self._create_movement_pattern(
                            window_df, current_low['idx'], next_high['idx'],
                            TrendType.UPTREND, MovementType.IMPULSE_UP,
                            impulse_up_profit, symbol
                        )
                        if pattern:
                            self.patterns_database.append(pattern)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –≤–Ω–∏–∑ (—Ç–æ—á–∫–∞ –¥–æ–ª–∏–≤–∫–∏ LONG)
                if next_high and next_low:
                    correction_down_change = (next_low['price'] - next_high['price']) / next_high['price'] * 100
                    
                    if abs(correction_down_change) >= self.correction_threshold * 100:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—Ü –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–∞–∫ —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ LONG
                        pattern = self._create_movement_pattern(
                            window_df, next_high['idx'], next_low['idx'],
                            TrendType.UPTREND, MovementType.CORRECTION_DOWN,
                            abs(correction_down_change), symbol
                        )
                        if pattern:
                            self.patterns_database.append(pattern)
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _analyze_sideways_movements(self, df: pd.DataFrame, current_idx: int, symbol: str):
        """–ê–Ω–∞–ª–∏–∑ –¥–≤–∏–∂–µ–Ω–∏–π –≤ –±–æ–∫–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –í –±–æ–∫–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ –∏—â–µ–º:
            # 1. –ò–º–ø—É–ª—å—Å—ã –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏)
            # 2. –û—Ç–∫–∞—Ç—ã –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ LONG)
            
            window_start = max(0, current_idx - 30)  # –ë–æ–ª—å—à–µ –æ–∫–Ω–æ –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
            window_end = min(len(df), current_idx + 10)
            window_df = df.iloc[window_start:window_end].copy()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_level, resistance_level = self._find_support_resistance(window_df)
            
            if support_level is None or resistance_level is None:
                return
            
            # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
            highs, lows = self._find_local_extremes(window_df)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é
            for low in lows:
                if abs(low['price'] - support_level) / support_level < 0.01:  # –ë–ª–∏–∑–∫–æ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
                    
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –º–∞–∫—Å–∏–º—É–º
                    for high in highs:
                        if high['idx'] > low['idx'] and abs(high['price'] - resistance_level) / resistance_level < 0.015:
                            
                            # –î–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é (LONG –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å)
                            sideways_profit = (high['price'] - low['price']) / low['price'] * 100
                            
                            if sideways_profit >= self.correction_threshold * 100:
                                pattern = self._create_movement_pattern(
                                    window_df, low['idx'], high['idx'],
                                    TrendType.SIDEWAYS, MovementType.IMPULSE_UP,
                                    sideways_profit, symbol
                                )
                                if pattern:
                                    self.patterns_database.append(pattern)
                            break
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–æ–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞: {e}")

    def _find_local_extremes(self, df: pd.DataFrame) -> Tuple[List[Dict], List[Dict]]:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –º–∏–Ω–∏–º—É–º–æ–≤"""
        try:
            highs = []
            lows = []
            
            prices = df['close'].values
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            lookback = 2  # –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (–±—ã–ª–æ 3)
            
            for i in range(lookback, len(prices) - lookback):
                current_price = prices[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
                is_high = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i and prices[j] >= current_price:
                        is_high = False
                        break
                
                if is_high:
                    highs.append({
                        'idx': i,
                        'price': current_price,
                        'timestamp': df.index[i]
                    })
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
                is_low = True
                for j in range(i - lookback, i + lookback + 1):
                    if j != i and prices[j] <= current_price:
                        is_low = False
                        break
                
                if is_low:
                    lows.append({
                        'idx': i,
                        'price': current_price,
                        'timestamp': df.index[i]
                    })
            
            return highs, lows
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤: {e}")
            return [], []

    def _find_support_resistance(self, df: pd.DataFrame) -> Tuple[Optional[float], Optional[float]]:
        """–ü–æ–∏—Å–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–º —Ç—Ä–µ–Ω–¥–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if len(df) < 10:
                return None, None
                
            prices = df['close'].values
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
            if len(prices) == 0:
                return None, None
            
            # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: –∫–≤–∞–Ω—Ç–∏–ª–∏
            support_level = np.percentile(prices, 20)
            resistance_level = np.percentile(prices, 80)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–ª–µ–∫–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
            if (resistance_level - support_level) / support_level > 0.03:  # –ú–∏–Ω–∏–º—É–º 3% –∫–∞–Ω–∞–ª
                return support_level, resistance_level
            
            return None, None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è: {e}")
            return None, None

    def _create_movement_pattern(self, df: pd.DataFrame, start_idx: int, end_idx: int,
                                trend_type: TrendType, movement_type: MovementType,
                                profit_percent: float, symbol: str) -> Optional[MovementPattern]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Å 9 –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
        try:
            start_row = df.iloc[start_idx]
            end_row = df.iloc[end_idx]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è
            start_point = PatternPoint(
                timestamp=str(start_row.name),
                trend_type=trend_type,
                movement_type=movement_type,
                phase="–Ω–∞—á–∞–ª–æ",
                price=start_row['close'],
                velocities={
                    'price': start_row['price_velocity'],
                    'ema20': start_row['ema20_velocity'],
                    'ema50': start_row['ema50_velocity'],
                    'ema100': start_row['ema100_velocity']
                },
                accelerations={
                    'price': start_row['price_acceleration'],
                    'ema20': start_row['ema20_acceleration'],
                    'ema50': start_row['ema50_acceleration'],
                    'ema100': start_row['ema100_acceleration']
                },
                velocity_ratios={
                    'price_ema20': start_row['price_to_ema20_velocity_ratio'],
                    'price_ema50': start_row['price_to_ema50_velocity_ratio'],
                    'price_ema100': start_row['price_to_ema100_velocity_ratio']
                },
                distances={
                    'price_ema20': start_row['price_to_ema20_distance'],
                    'price_ema50': start_row['price_to_ema50_distance'],
                    'price_ema100': start_row['price_to_ema100_distance']
                },
                distance_changes={
                    'price_ema20': start_row['price_to_ema20_distance_change'],
                    'price_ema50': start_row['price_to_ema50_distance_change'],
                    'price_ema100': start_row['price_to_ema100_distance_change']
                },
                angles={
                    'ema20': start_row['ema20_angle'],
                    'ema50': start_row['ema50_angle'],
                    'ema100': start_row['ema100_angle']
                },
                angle_changes={
                    'ema20': start_row['ema20_angle_change'],
                    'ema50': start_row['ema50_angle_change'],
                    'ema100': start_row['ema100_angle_change']
                },
                ema_relationships={
                    'ema20_ema50': start_row['ema20_to_ema50'],
                    'ema20_ema100': start_row['ema20_to_ema100'],
                    'ema50_ema100': start_row['ema50_to_ema100']
                },
                synchronizations={
                    'price_ema20': start_row['price_ema20_sync'],
                    'price_ema50': start_row['price_ema50_sync'],
                    'price_ema100': start_row['price_ema100_sync']
                },
                price_change_percent=0.0,  # –ù–∞—á–∞–ª–æ –¥–≤–∏–∂–µ–Ω–∏—è
                movement_duration_hours=0
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –∫–æ–Ω—Ü–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            end_point = PatternPoint(
                timestamp=str(end_row.name),
                trend_type=trend_type,
                movement_type=movement_type,
                phase="–∫–æ–Ω–µ—Ü",
                price=end_row['close'],
                velocities={
                    'price': end_row['price_velocity'],
                    'ema20': end_row['ema20_velocity'],
                    'ema50': end_row['ema50_velocity'],
                    'ema100': end_row['ema100_velocity']
                },
                accelerations={
                    'price': end_row['price_acceleration'],
                    'ema20': end_row['ema20_acceleration'],
                    'ema50': end_row['ema50_acceleration'],
                    'ema100': end_row['ema100_acceleration']
                },
                velocity_ratios={
                    'price_ema20': end_row['price_to_ema20_velocity_ratio'],
                    'price_ema50': end_row['price_to_ema50_velocity_ratio'],
                    'price_ema100': end_row['price_to_ema100_velocity_ratio']
                },
                distances={
                    'price_ema20': end_row['price_to_ema20_distance'],
                    'price_ema50': end_row['price_to_ema50_distance'],
                    'price_ema100': end_row['price_to_ema100_distance']
                },
                distance_changes={
                    'price_ema20': end_row['price_to_ema20_distance_change'],
                    'price_ema50': end_row['price_to_ema50_distance_change'],
                    'price_ema100': end_row['price_to_ema100_distance_change']
                },
                angles={
                    'ema20': end_row['ema20_angle'],
                    'ema50': end_row['ema50_angle'],
                    'ema100': end_row['ema100_angle']
                },
                angle_changes={
                    'ema20': end_row['ema20_angle_change'],
                    'ema50': end_row['ema50_angle_change'],
                    'ema100': end_row['ema100_angle_change']
                },
                ema_relationships={
                    'ema20_ema50': end_row['ema20_to_ema50'],
                    'ema20_ema100': end_row['ema20_to_ema100'],
                    'ema50_ema100': end_row['ema50_to_ema100']
                },
                synchronizations={
                    'price_ema20': end_row['price_ema20_sync'],
                    'price_ema50': end_row['price_ema50_sync'],
                    'price_ema100': end_row['price_ema100_sync']
                },
                price_change_percent=profit_percent,
                movement_duration_hours=end_idx - start_idx
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–≤–∏–∂–µ–Ω–∏—è
            pattern = MovementPattern(
                start_point=start_point,
                end_point=end_point,
                trend_type=trend_type,
                movement_type=movement_type,
                profit_percent=profit_percent,
                duration_hours=end_idx - start_idx
            )
            
            return pattern
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {e}")
            return None

    def _get_historical_data(self, symbol: str, days: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å 01.01.2025"""
        try:
            exchange = ccxt.binance({'enableRateLimit': True})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: 01.01.2025 00:00:00 UTC
            from datetime import datetime
            start_date = datetime(2025, 1, 1, 0, 0, 0)
            since = int(start_date.timestamp() * 1000)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å 01.01.2025 –¥–æ —Å–µ–≥–æ–¥–Ω—è
            # –ù–∞ —Å–ª—É—á–∞–π –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö - –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            all_ohlcv = []
            current_since = since
            max_per_request = 1000  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞ –∑–∞–ø—Ä–æ—Å
            
            while True:
                ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=max_per_request)
                if not ohlcv or len(ohlcv) == 0:
                    break
                
                all_ohlcv.extend(ohlcv)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                current_since = ohlcv[-1][0] + 3600000  # +1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if current_since >= exchange.milliseconds():
                    break
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
                if len(all_ohlcv) > 20000:  # –ú–∞–∫—Å–∏–º—É–º ~2 –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
                    break
            
            ohlcv = all_ohlcv
            
            if not ohlcv:
                logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ohlcv)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} —Å 01.01.2025")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df.index[0]} - {df.index[-1]}")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

    def _prepare_all_features(self, df: pd.DataFrame) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö 27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            df['price_velocity'] = df['close'].pct_change()
            df['ema20_velocity'] = df['ema_20'].pct_change()
            df['ema50_velocity'] = df['ema_50'].pct_change()
            df['ema100_velocity'] = df['ema_100'].pct_change()
            
            # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
            df['price_acceleration'] = df['price_velocity'].pct_change()
            df['ema20_acceleration'] = df['ema20_velocity'].pct_change()
            df['ema50_acceleration'] = df['ema50_velocity'].pct_change()
            df['ema100_acceleration'] = df['ema100_velocity'].pct_change()
            
            # 3. Velocity ratios
            df['price_to_ema20_velocity_ratio'] = df['price_velocity'] / (df['ema20_velocity'] + 1e-8)
            df['price_to_ema50_velocity_ratio'] = df['price_velocity'] / (df['ema50_velocity'] + 1e-8)
            df['price_to_ema100_velocity_ratio'] = df['price_velocity'] / (df['ema100_velocity'] + 1e-8)
            
            # 4. Distance to EMAs
            df['price_to_ema20_distance'] = (df['close'] - df['ema_20']) / df['close']
            df['price_to_ema50_distance'] = (df['close'] - df['ema_50']) / df['close']
            df['price_to_ema100_distance'] = (df['close'] - df['ema_100']) / df['close']
            
            # 5. Distance change
            df['price_to_ema20_distance_change'] = df['price_to_ema20_distance'].diff()
            df['price_to_ema50_distance_change'] = df['price_to_ema50_distance'].diff()
            df['price_to_ema100_distance_change'] = df['price_to_ema100_distance'].diff()
            
            # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
            df['ema20_angle'] = np.arctan(df['ema20_velocity']) * 180 / np.pi
            df['ema50_angle'] = np.arctan(df['ema50_velocity']) * 180 / np.pi
            df['ema100_angle'] = np.arctan(df['ema100_velocity']) * 180 / np.pi
            
            # 7. Angle change
            df['ema20_angle_change'] = df['ema20_angle'].diff()
            df['ema50_angle_change'] = df['ema50_angle'].diff()
            df['ema100_angle_change'] = df['ema100_angle'].diff()
            
            # 8. EMA relationships
            df['ema20_to_ema50'] = df['ema_20'] / (df['ema_50'] + 1e-8)
            df['ema20_to_ema100'] = df['ema_20'] / (df['ema_100'] + 1e-8)
            df['ema50_to_ema100'] = df['ema_50'] / (df['ema_100'] + 1e-8)
            
            # 9. Price-EMA synchronization
            window_size = 20
            df['price_ema20_sync'] = df['close'].rolling(window_size).corr(df['ema_20'])
            df['price_ema50_sync'] = df['close'].rolling(window_size).corr(df['ema_50'])
            df['price_ema100_sync'] = df['close'].rolling(window_size).corr(df['ema_100'])
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.dropna()
            df = df.replace([np.inf, -np.inf], 0)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None

    def save_patterns_to_file(self, filename: str = "patterns_database.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            import json
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            patterns_data = []
            for pattern in self.patterns_database:
                pattern_dict = {
                    'trend_type': pattern.trend_type.value,
                    'movement_type': pattern.movement_type.value,
                    'profit_percent': pattern.profit_percent,
                    'duration_hours': pattern.duration_hours,
                    'start_point': {
                        'timestamp': pattern.start_point.timestamp,
                        'price': pattern.start_point.price,
                        'velocities': pattern.start_point.velocities,
                        'accelerations': pattern.start_point.accelerations,
                        'velocity_ratios': pattern.start_point.velocity_ratios,
                        'distances': pattern.start_point.distances,
                        'distance_changes': pattern.start_point.distance_changes,
                        'angles': pattern.start_point.angles,
                        'angle_changes': pattern.start_point.angle_changes,
                        'ema_relationships': pattern.start_point.ema_relationships,
                        'synchronizations': pattern.start_point.synchronizations
                    },
                    'end_point': {
                        'timestamp': pattern.end_point.timestamp,
                        'price': pattern.end_point.price,
                        'velocities': pattern.end_point.velocities,
                        'accelerations': pattern.end_point.accelerations,
                        'velocity_ratios': pattern.end_point.velocity_ratios,
                        'distances': pattern.end_point.distances,
                        'distance_changes': pattern.end_point.distance_changes,
                        'angles': pattern.end_point.angles,
                        'angle_changes': pattern.end_point.angle_changes,
                        'ema_relationships': pattern.end_point.ema_relationships,
                        'synchronizations': pattern.end_point.synchronizations
                    }
                }
                patterns_data.append(pattern_dict)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(patterns_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(patterns_data)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ {filename}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")
            return False

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º"""
        try:
            stats = {
                'total_patterns': len(self.patterns_database),
                'by_trend_type': {},
                'by_movement_type': {},
                'avg_profit_by_trend': {},
                'avg_duration_by_trend': {}
            }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–¥–æ–≤
            for trend_type in TrendType:
                trend_patterns = [p for p in self.patterns_database if p.trend_type == trend_type]
                stats['by_trend_type'][trend_type.value] = len(trend_patterns)
                
                if trend_patterns:
                    profits = [p.profit_percent for p in trend_patterns if p.profit_percent > 0]
                    durations = [p.duration_hours for p in trend_patterns]
                    
                    stats['avg_profit_by_trend'][trend_type.value] = np.mean(profits) if profits else 0
                    stats['avg_duration_by_trend'][trend_type.value] = np.mean(durations) if durations else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¥–≤–∏–∂–µ–Ω–∏–π
            for movement_type in MovementType:
                movement_patterns = [p for p in self.patterns_database if p.movement_type == movement_type]
                stats['by_movement_type'][movement_type.value] = len(movement_patterns)
            
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    analyzer = DetailedPatternAnalyzer()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç
    symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT']
    
    for symbol in symbols:
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
        success = analyzer.analyze_historical_data(symbol, days=365)  # –ì–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        if success:
            print(f"‚úÖ {symbol} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = analyzer.get_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['total_patterns']}")
    print(f"–ü–æ —Ç—Ä–µ–Ω–¥–∞–º: {stats['by_trend_type']}")
    print(f"–ü–æ –¥–≤–∏–∂–µ–Ω–∏—è–º: {stats['by_movement_type']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    analyzer.save_patterns_to_file()
    print("üíæ –ë–∞–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
