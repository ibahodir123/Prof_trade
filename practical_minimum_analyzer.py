#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ú–ò–ù–ò–ú–£–ú–û–í
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
from sklearn.ensemble import RandomForestClassifier
import pickle
import warnings
warnings.filterwarnings('ignore')

class PracticalMinimumAnalyzer:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        self.minimums_database = []
        
        # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        self.min_lookback = 6
        self.min_profit_threshold = 1.5  # –°–Ω–∏–∂–∞–µ–º –¥–æ 1.5%
        self.max_duration = 48
        self.verification_hours = 6
        
        print("üéØ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ú–ò–ù–ò–ú–£–ú–û–í")
        print("üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 50)
    
    def get_extended_data(self, symbol: str, days: int = 30) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é {symbol} –∑–∞ {days} –¥–Ω–µ–π...")
            exchange = ccxt.binance()
            
            end_time = datetime.now()
            start_time = end_time - timedelta(days=days)
            
            since = int(start_time.timestamp() * 1000)
            end_ts = int(end_time.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            print(f"   ‚úÖ {len(df)} —Å–≤–µ—á–µ–π")
            return df
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return pd.DataFrame()
    
    def analyze_minimum_features(self, df: pd.DataFrame, min_idx: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–∏–Ω–∏–º—É–º–∞"""
        try:
            if min_idx < 50 or min_idx >= len(df) - 6:
                return None
            
            # EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            
            current = df.iloc[min_idx]
            prev = df.iloc[min_idx - 1]
            
            # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            price_velocity = (current['close'] - prev['close']) / prev['close']
            ema20_velocity = (current['ema_20'] - prev['ema_20']) / prev['ema_20']
            ema50_velocity = (current['ema_50'] - prev['ema_50']) / prev['ema_50']
            
            # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!)
            price_distance_ema20 = (current['close'] - current['ema_20']) / current['ema_20']
            price_distance_ema50 = (current['close'] - current['ema_50']) / current['ema_50']
            
            # –£–≥–ª—ã
            ema20_angle = ema20_velocity * 100
            ema50_angle = ema50_velocity * 100
            
            # –û–±—ä–µ–º
            avg_volume = df['volume'].iloc[min_idx-20:min_idx].mean()
            volume_ratio = current['volume'] / avg_volume if avg_volume > 0 else 1
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            volatility = df['close'].iloc[min_idx-20:min_idx].std() / df['close'].iloc[min_idx-20:min_idx].mean()
            
            features = {
                'price_velocity': price_velocity,
                'ema20_velocity': ema20_velocity,
                'ema50_velocity': ema50_velocity,
                'price_distance_ema20': price_distance_ema20,
                'price_distance_ema50': price_distance_ema50,
                'ema20_angle': ema20_angle,
                'ema50_angle': ema50_angle,
                'volume_ratio': volume_ratio,
                'volatility': volatility
            }
            
            return features
            
        except Exception:
            return None
    
    def find_practical_minimums(self, df: pd.DataFrame, symbol: str):
        """–ü–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–Ω–∏–º—É–º–æ–≤"""
        print(f"üîç –ò—â—É –º–∏–Ω–∏–º—É–º—ã –≤ {symbol}...")
        
        minimums_found = 0
        
        for i in range(50, len(df) - 6):
            try:
                current_low = df.iloc[i]['low']
                current_time = df.index[i]
                
                # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞
                is_minimum = True
                for j in range(max(0, i-self.min_lookback), min(len(df), i+self.min_lookback+1)):
                    if j != i and df.iloc[j]['low'] <= current_low:
                        is_minimum = False
                        break
                
                if not is_minimum:
                    continue
                
                # –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞ –≤ –±—É–¥—É—â–µ–º
                max_price = current_low
                max_idx = i
                max_time = current_time
                
                for j in range(i+1, min(len(df), i+49)):
                    if df.iloc[j]['high'] > max_price:
                        max_price = df.iloc[j]['high']
                        max_idx = j
                        max_time = df.index[j]
                
                movement_percent = ((max_price - current_low) / current_low) * 100
                duration_hours = (max_time - current_time).total_seconds() / 3600
                
                # –ú—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
                if movement_percent >= self.min_profit_threshold and duration_hours <= self.max_duration:
                    features = self.analyze_minimum_features(df, i)
                    
                    if features:
                        minimum = {
                            'symbol': symbol,
                            'entry_time': current_time,
                            'exit_time': max_time,
                            'entry_price': current_low,
                            'exit_price': max_price,
                            'movement_percent': movement_percent,
                            'duration_hours': duration_hours,
                            'features': features,
                            'is_profitable': movement_percent >= 2.0,
                            'data_age_hours': (datetime.now() - current_time).total_seconds() / 3600
                        }
                        
                        self.minimums_database.append(minimum)
                        minimums_found += 1
                        
            except Exception:
                continue
        
        print(f"   ‚úÖ {minimums_found} –º–∏–Ω–∏–º—É–º–æ–≤")
    
    def collect_practical_data(self):
        """–°–±–æ—Ä –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìö –°–ë–û–† –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
        print("-" * 35)
        
        self.minimums_database = []
        
        for i, symbol in enumerate(self.symbols):
            print(f"[{i+1}/{len(self.symbols)}] {symbol}")
            df = self.get_extended_data(symbol, days=30)  # 30 –¥–Ω–µ–π
            if not df.empty:
                self.find_practical_minimums(df, symbol)
            time.sleep(0.5)
        
        print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û: {len(self.minimums_database)} –º–∏–Ω–∏–º—É–º–æ–≤")
        
        if self.minimums_database:
            profits = [m['movement_percent'] for m in self.minimums_database]
            durations = [m['duration_hours'] for m in self.minimums_database]
            profitable = [m for m in self.minimums_database if m['is_profitable']]
            
            print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {np.mean(profits):.2f}%")
            print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {np.mean(durations):.1f} —á–∞—Å–æ–≤")
            print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {np.max(profits):.2f}%")
            print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤: {len(profitable)} ({len(profitable)/len(self.minimums_database)*100:.1f}%)")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
            symbol_stats = {}
            for minimum in self.minimums_database:
                symbol = minimum['symbol']
                if symbol not in symbol_stats:
                    symbol_stats[symbol] = {'count': 0, 'avg_profit': 0, 'profitable': 0, 'max_profit': 0}
                symbol_stats[symbol]['count'] += 1
                symbol_stats[symbol]['avg_profit'] += minimum['movement_percent']
                if minimum['is_profitable']:
                    symbol_stats[symbol]['profitable'] += 1
                if minimum['movement_percent'] > symbol_stats[symbol]['max_profit']:
                    symbol_stats[symbol]['max_profit'] = minimum['movement_percent']
            
            print(f"\nüèÜ –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
            for symbol, stats in sorted(symbol_stats.items(), key=lambda x: x[1]['avg_profit'], reverse=True):
                avg_profit = stats['avg_profit'] / stats['count']
                profit_rate = stats['profitable'] / stats['count'] * 100
                print(f"   {symbol}:")
                print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {stats['count']} –º–∏–Ω–∏–º—É–º–æ–≤")
                print(f"     –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f}%")
                print(f"     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['max_profit']:.2f}%")
                print(f"     –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profit_rate:.1f}%")
                print()
    
    def analyze_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ï–ô")
        print("-" * 30)
        
        if len(self.minimums_database) < 5:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π")
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_stats = {}
        feature_names = list(self.minimums_database[0]['features'].keys())
        
        for feature_name in feature_names:
            profitable_values = []
            unprofitable_values = []
            
            for minimum in self.minimums_database:
                value = minimum['features'][feature_name]
                if minimum['is_profitable']:
                    profitable_values.append(value)
                else:
                    unprofitable_values.append(value)
            
            if profitable_values and unprofitable_values:
                feature_stats[feature_name] = {
                    'profitable_mean': np.mean(profitable_values),
                    'profitable_std': np.std(profitable_values),
                    'unprofitable_mean': np.mean(unprofitable_values),
                    'unprofitable_std': np.std(unprofitable_values),
                    'difference': abs(np.mean(profitable_values) - np.mean(unprofitable_values))
                }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏ (–≤–∞–∂–Ω–æ—Å—Ç–∏)
        feature_importance = sorted(feature_stats.items(), key=lambda x: x[1]['difference'], reverse=True)
        
        print("üèÜ –í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í (–ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏ –∏ —É–±—ã—Ç–æ—á–Ω—ã–º–∏):")
        for feature_name, stats in feature_importance:
            print(f"   {feature_name}:")
            print(f"     –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã: {stats['profitable_mean']:.4f} ¬± {stats['profitable_std']:.4f}")
            print(f"     –£–±—ã—Ç–æ—á–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã: {stats['unprofitable_mean']:.4f} ¬± {stats['unprofitable_std']:.4f}")
            print(f"     –†–∞–∑–Ω–æ—Å—Ç—å: {stats['difference']:.4f}")
            print()
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        print("‚è∞ –í–†–ï–ú–ï–ù–ù–´–ï –ó–ê–ö–û–ù–û–ú–ï–†–ù–û–°–¢–ò:")
        
        # –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        day_stats = {}
        for minimum in self.minimums_database:
            day = minimum['entry_time'].strftime('%A')
            if day not in day_stats:
                day_stats[day] = {'count': 0, 'total_profit': 0, 'profitable': 0}
            day_stats[day]['count'] += 1
            day_stats[day]['total_profit'] += minimum['movement_percent']
            if minimum['is_profitable']:
                day_stats[day]['profitable'] += 1
        
        print("   –ü–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
        for day, stats in sorted(day_stats.items(), key=lambda x: x[1]['total_profit']/x[1]['count'], reverse=True):
            avg_profit = stats['total_profit'] / stats['count']
            profit_rate = stats['profitable'] / stats['count'] * 100
            print(f"     {day}: {stats['count']} –º–∏–Ω–∏–º—É–º–æ–≤, {avg_profit:.2f}% —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å, {profit_rate:.1f}% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö")
        
        # –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        hour_stats = {}
        for minimum in self.minimums_database:
            hour = minimum['entry_time'].hour
            hour_range = f"{hour:02d}:00-{(hour+1)%24:02d}:00"
            if hour_range not in hour_stats:
                hour_stats[hour_range] = {'count': 0, 'total_profit': 0, 'profitable': 0}
            hour_stats[hour_range]['count'] += 1
            hour_stats[hour_range]['total_profit'] += minimum['movement_percent']
            if minimum['is_profitable']:
                hour_stats[hour_range]['profitable'] += 1
        
        print("\n   –ü–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (—Ç–æ–ø-5):")
        top_hours = sorted(hour_stats.items(), key=lambda x: x[1]['total_profit']/x[1]['count'], reverse=True)[:5]
        for hour_range, stats in top_hours:
            avg_profit = stats['total_profit'] / stats['count']
            profit_rate = stats['profitable'] / stats['count'] * 100
            print(f"     {hour_range}: {stats['count']} –º–∏–Ω–∏–º—É–º–æ–≤, {avg_profit:.2f}% —Å—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å, {profit_rate:.1f}% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö")
    
    def train_practical_model(self):
        """–û–±—É—á–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏"""
        print("\nüß† –û–ë–£–ß–ï–ù–ò–ï –ü–†–ê–ö–¢–ò–ß–ï–°–ö–û–ô –ú–û–î–ï–õ–ò")
        print("-" * 35)
        
        if len(self.minimums_database) < 10:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(self.minimums_database)} –º–∏–Ω–∏–º—É–º–æ–≤")
            print(f"   –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º: 10 –º–∏–Ω–∏–º—É–º–æ–≤")
            return None
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        X = []
        y = []
        
        feature_names = list(self.minimums_database[0]['features'].keys())
        
        for minimum in self.minimums_database:
            features_list = [minimum['features'][name] for name in feature_names]
            X.append(features_list)
            y.append(1 if minimum['is_profitable'] else 0)
        
        X = np.array(X)
        y = np.array(y)
        
        print(f"üìä –î–∞–Ω–Ω—ã—Ö: {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤, {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {sum(y)} ({sum(y)/len(y)*100:.1f}%)")
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        model = RandomForestClassifier(n_estimators=100, random_state=42, max_depth=8)
        model.fit(X, y)
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importances = model.feature_importances_
        feature_importance = list(zip(feature_names, importances))
        feature_importance.sort(key=lambda x: x[1], reverse=True)
        
        print(f"\nüèÜ –í–ê–ñ–ù–û–°–¢–¨ –ü–†–ò–ó–ù–ê–ö–û–í (ML –º–æ–¥–µ–ª—å):")
        for name, importance in feature_importance:
            print(f"   {name}: {importance:.4f}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        model_filename = f'practical_model_{timestamp}.pkl'
        feature_filename = f'practical_features_{timestamp}.pkl'
        
        with open(model_filename, 'wb') as f:
            pickle.dump(model, f)
        
        with open(feature_filename, 'wb') as f:
            pickle.dump(feature_names, f)
        
        print(f"\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_filename}")
        print(f"üíæ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {feature_filename}")
        
        return model, feature_names
    
    def run_practical_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ú–ò–ù–ò–ú–£–ú–û–í")
        print("=" * 50)
        
        # 1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        self.collect_practical_data()
        
        if not self.minimums_database:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–µ–π
        self.analyze_patterns()
        
        # 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model_result = self.train_practical_model()
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –º–∏–Ω–∏–º—É–º–æ–≤
        minimums_for_json = []
        for minimum in self.minimums_database:
            minimum_copy = minimum.copy()
            minimum_copy['entry_time'] = minimum['entry_time'].isoformat()
            minimum_copy['exit_time'] = minimum['exit_time'].isoformat()
            minimums_for_json.append(minimum_copy)
        
        with open(f'practical_minimums_{timestamp}.json', 'w', encoding='utf-8') as f:
            json.dump(minimums_for_json, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.minimums_database)} –º–∏–Ω–∏–º—É–º–æ–≤")
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ practical_minimums_{timestamp}.json")
        
        if model_result:
            print(f"üß† –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")

if __name__ == "__main__":
    analyzer = PracticalMinimumAnalyzer()
    analyzer.run_practical_analysis()
