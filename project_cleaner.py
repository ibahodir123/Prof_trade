#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê –û–¢ –ù–ï–ù–£–ñ–ù–´–• –§–ê–ô–õ–û–í
–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import shutil
from datetime import datetime

class ProjectCleaner:
    def __init__(self):
        print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê –û–¢ –ù–ï–ù–£–ñ–ù–´–• –§–ê–ô–õ–û–í")
        print("=" * 45)
        
        # –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, —Ç–µ—Å—Ç–æ–≤—ã–µ, –¥—É–±–ª–∏–∫–∞—Ç—ã)
        self.files_to_delete = [
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Python
            'python',
            '__pycache__',
            
            # –î–µ–º–æ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            'demo_minimum_trainer.py',
            'demo_results.json',
            'demo_minimums_analysis.png',
            'demo_top_minimums.png',
            'DEMO_README.md',
            'run_demo.py',
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            'test_adaptive_learning.py',
            'test_contacts_button.py',
            'test_ml_models.py',
            'test_multilang.py',
            'test_signal_analysis.py',
            'test_uzbek_translations.py',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            'drawdown_analyzer.py',
            'drawdown_optimization_demo.py',
            'real_optimized_tester.py',
            'timeframe_analyzer.py',
            
            # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤
            'ml_bot_binance_backup.py',
            'ml_bot_binance_backup_20250920_124640.py',
            'ml_bot_binance_fixed.py',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ)
            'clean_maximum_features_20250923_054703.pkl',
            'clean_maximum_model_20250923_054703.pkl',
            'fast_maximum_features_20250923_062911.pkl',
            'fast_maximum_model_20250923_062911.pkl',
            'fast_maximum_scaler_20250923_062911.pkl',
            'fast_minimum_features_20250923_062911.pkl',
            'fast_minimum_model_20250923_062911.pkl',
            'fast_minimum_scaler_20250923_062911.pkl',
            'historical_maximum_features_20250923_062225.pkl',
            'historical_maximum_model_20250923_062225.pkl',
            'historical_maximum_scaler_20250923_062225.pkl',
            'historical_minimum_features_20250923_062225.pkl',
            'historical_minimum_model_20250923_062225.pkl',
            'historical_minimum_scaler_20250923_062225.pkl',
            'practical_features_20250923_053051.pkl',
            'practical_model_20250923_053051.pkl',
            'pure_ema_maximum_features_20250923_055329.pkl',
            'pure_ema_maximum_model_20250923_055329.pkl',
            'real_maximums_20250923_054159.json',
            'real_maximum_features_20250923_054159.pkl',
            'real_maximum_model_20250923_054159.pkl',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'fast_training_metadata_20250923_062911.json',
            'historical_training_metadata_20250923_062225.json',
            'historical_training_metadata_20250923_062633.json',
            'practical_minimums_20250923_053051.json',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            'demo_minimums_analysis.png',
            'demo_top_minimums.png',
            'maximum_detector_profitability.png',
            'minimum_detector_profitability.png',
            'real_market_analysis.png',
            'sideways_bollinger_analysis.png',
            'sideways_detector_analysis.png',
            'sideways_profitability_analysis.png',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            'backtest_2025_report_20250923_063851.md',
            'BACKTEST_2025_SUMMARY.md',
            'CLEAN_MAXIMUM_RESULTS.md',
            'DRAWDOWN_OPTIMIZATION_REPORT.md',
            'HISTORICAL_TRAINING_RESULTS.md',
            'MAXIMUM_ANALYSIS_RESULTS.md',
            'PURE_EMA_MAXIMUM_RESULTS.md',
            'REAL_ANALYSIS_RESULTS.md',
            'REAL_BACKTEST_SUMMARY.md',
            'SAVE_RESULTS.md',
            'VALIDATION_RESULTS.md',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            'backtest_2025_results_20250923_063851.json',
            'real_backtest_results_20250923_064511.json',
            
            # –ü—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            'backtest_results.log',
            
            # –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ)
            '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.docx',
            '–ö—É–ª–ª–∞–Ω–º–∞.docx',
        ]
        
        # –ü–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.folders_to_delete = [
            '__pycache__',
        ]
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Å–Ω–æ–≤–Ω—ã–µ)
        self.essential_files = [
            'ml_bot_binance.py',  # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            'advanced_ema_analyzer.py',
            'advanced_ml_trainer.py',
            'shooting_star_predictor.py',
            'bot_config.json',
            'requirements.txt',
            'ML_SIGNALS_GUIDE.md',
            'historical_models/',  # –ü–∞–ø–∫–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            'models/',  # –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏
            'data_batch_10.json',  # –î–∞–Ω–Ω—ã–µ
            'movements_database.json',
            'patterns_database.json',
        ]
    
    def analyze_files(self):
        """–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í:")
        print("-" * 20)
        
        total_size = 0
        files_found = 0
        
        for file_path in self.files_to_delete:
            if os.path.exists(file_path):
                if os.path.isfile(file_path):
                    size = os.path.getsize(file_path)
                    total_size += size
                    files_found += 1
                    print(f"üóëÔ∏è  {file_path:<50} ({size:,} bytes)")
                elif os.path.isdir(file_path):
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏
                    folder_size = self.get_folder_size(file_path)
                    total_size += folder_size
                    files_found += 1
                    print(f"üóëÔ∏è  {file_path:<50} (–ø–∞–ø–∫–∞, {folder_size:,} bytes)")
        
        print(f"\nüìä –ò–¢–û–ì–û –ù–ê–ô–î–ï–ù–û:")
        print(f"‚Ä¢ –§–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫: {files_found}")
        print(f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} bytes ({total_size / 1024 / 1024:.1f} MB)")
        
        return files_found, total_size
    
    def get_folder_size(self, folder_path):
        """–ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–ø–∫–∏"""
        total_size = 0
        try:
            for dirpath, dirnames, filenames in os.walk(folder_path):
                for filename in filenames:
                    filepath = os.path.join(dirpath, filename)
                    if os.path.exists(filepath):
                        total_size += os.path.getsize(filepath)
        except Exception:
            pass
        return total_size
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_folder = f"backup_before_cleanup_{timestamp}"
        
        print(f"\nüíæ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–û–ô –ö–û–ü–ò–ò: {backup_folder}")
        
        try:
            os.makedirs(backup_folder, exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file_path in self.essential_files:
                if os.path.exists(file_path):
                    if os.path.isfile(file_path):
                        shutil.copy2(file_path, backup_folder)
                    elif os.path.isdir(file_path):
                        shutil.copytree(file_path, os.path.join(backup_folder, file_path))
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_folder}")
            return backup_folder
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return None
    
    def clean_files(self, create_backup=True):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        if create_backup:
            backup_folder = self.create_backup()
            if not backup_folder:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return False
        
        print(f"\nüßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£:")
        print("-" * 25)
        
        deleted_count = 0
        deleted_size = 0
        
        for file_path in self.files_to_delete:
            if os.path.exists(file_path):
                try:
                    if os.path.isfile(file_path):
                        size = os.path.getsize(file_path)
                        os.remove(file_path)
                        deleted_count += 1
                        deleted_size += size
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
                    elif os.path.isdir(file_path):
                        size = self.get_folder_size(file_path)
                        shutil.rmtree(file_path)
                        deleted_count += 1
                        deleted_size += size
                        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {file_path}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ß–ò–°–¢–ö–ò:")
        print(f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫: {deleted_count}")
        print(f"‚Ä¢ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {deleted_size:,} bytes ({deleted_size / 1024 / 1024:.1f} MB)")
        
        return True
    
    def show_remaining_files(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ñ–∞–π–ª—ã"""
        print(f"\nüìÅ –û–°–¢–ê–í–®–ò–ï–°–Ø –§–ê–ô–õ–´:")
        print("-" * 25)
        
        remaining_files = []
        for item in os.listdir('.'):
            if os.path.isfile(item):
                size = os.path.getsize(item)
                remaining_files.append((item, size))
            elif os.path.isdir(item) and not item.startswith('.'):
                size = self.get_folder_size(item)
                remaining_files.append((item, size))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
        remaining_files.sort(key=lambda x: x[1], reverse=True)
        
        for file_name, size in remaining_files:
            if size > 1024 * 1024:  # –ë–æ–ª—å—à–µ 1MB
                print(f"üìÑ {file_name:<40} ({size / 1024 / 1024:.1f} MB)")
            elif size > 1024:  # –ë–æ–ª—å—à–µ 1KB
                print(f"üìÑ {file_name:<40} ({size / 1024:.1f} KB)")
            else:
                print(f"üìÑ {file_name:<40} ({size} bytes)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    cleaner = ProjectCleaner()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
    files_count, total_size = cleaner.analyze_files()
    
    if files_count == 0:
        print("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return
    
    print(f"\n‚ùì –£–¥–∞–ª–∏—Ç—å {files_count} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫ ({total_size / 1024 / 1024:.1f} MB)?")
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
    
    try:
        input()
    except KeyboardInterrupt:
        print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
    if cleaner.clean_files():
        cleaner.show_remaining_files()
        print(f"\n‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("üéØ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ Telegram –±–æ—Ç!")
    else:
        print("‚ùå –û—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")

if __name__ == "__main__":
    main()
