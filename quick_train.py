#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
"""
import os
import json
import numpy as np
import pandas as pd
from neural_network_predictor import ShootingStarPredictor
from data_collector import HistoricalDataCollector

def optimize_data_for_training(data, max_samples_per_coin=1000):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤"""
    optimized_data = {}
    
    for symbol, df_data in data.items():
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ –≤ DataFrame
        if isinstance(df_data, str):
            df = pd.read_json(df_data, orient='records')
        else:
            df = pd.DataFrame(df_data)
        
        if df.empty or 'is_shooting_star' not in df.columns:
            continue
            
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
        if len(df) > max_samples_per_coin:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_samples_per_coin –∑–∞–ø–∏—Å–µ–π
            df_optimized = df.tail(max_samples_per_coin).copy()
        else:
            df_optimized = df.copy()
        
        optimized_data[symbol] = df_optimized
        print(f"   {symbol}: {len(df_optimized)} –æ–±—Ä–∞–∑—Ü–æ–≤ (–±—ã–ª–æ {len(df)})")
    
    return optimized_data

def quick_train():
    """–ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    print("üöÄ –ë–´–°–¢–†–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data_files = [f for f in os.listdir(".") if f.startswith("data_batch_")]
    
    if not data_files:
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_shooting_star_model.py --quick")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    with open(data_files[0], 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    if not data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –º–æ–Ω–µ—Ç")
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    optimized_data = optimize_data_for_training(data, max_samples_per_coin=500)
    
    if not optimized_data:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return False
    
    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(optimized_data)} –º–æ–Ω–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    print("\nüß† –û–±—É—á–∞—é –º–æ–¥–µ–ª—å...")
    predictor = ShootingStarPredictor(
        sequence_length=12,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        prediction_horizon=12  # –£–º–µ–Ω—å—à–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    )
    
    try:
        success = predictor.train(optimized_data)
        
        if success:
            print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            predictor.save_model("shooting_star_model_quick")
            
            print("\nüíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
            print("   - shooting_star_model_quick.h5")
            print("   - shooting_star_model_quick_scaler.pkl")
            print("   - shooting_star_model_quick_metadata.json")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
            test_symbol = list(optimized_data.keys())[0]
            test_df = optimized_data[test_symbol]
            
            prediction = predictor.predict(test_df)
            
            if prediction:
                print(f"\nüéØ –¢–ï–°–¢–û–í–û–ï –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï ({test_symbol}):")
                print(f"   - –ö–ª–∞—Å—Å: {prediction['predicted_class']}")
                print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.1%}")
                print(f"   - –°—Ç—Ä–µ–ª—è—é—â–∞—è –º–æ–Ω–µ—Ç–∞: {prediction['shooting_star_probability']:.1%}")
                print(f"   - –í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç: {prediction['high_growth_probability']:.1%}")
            
            print("\nüéâ –ì–û–¢–û–í–û! –ú–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!")
            print("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
            print("   - python demo_saved_model.py (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)")
            print("   - python shooting_star_bot.py (–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞)")
            
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß† –ë–´–°–¢–†–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –°–¢–†–ï–õ–Ø–Æ–©–ò–• –ú–û–ù–ï–¢")
    print("=" * 60)
    
    success = quick_train()
    
    if success:
        print("\n‚úÖ –£–°–ü–ï–®–ù–û! –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –û–ë–£–ß–ï–ù–ò–ï –ù–ï –£–î–ê–õ–û–°–¨")

if __name__ == "__main__":
    main()

