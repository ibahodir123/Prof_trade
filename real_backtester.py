#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üéØ –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ï–†
–ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import pickle
import json
import warnings
warnings.filterwarnings('ignore')

class RealBacktester:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self.minimum_model = None
        self.maximum_model = None
        self.minimum_scaler = None
        self.maximum_scaler = None
        self.minimum_features = None
        self.maximum_features = None
        
        # –†–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.initial_balance = 10000      # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å $10,000
        self.position_size = 0.1         # 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        self.commission = 0.001          # –ö–æ–º–∏—Å—Å–∏—è Binance 0.1%
        self.slippage = 0.0005           # –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ 0.05%
        self.max_drawdown = 0.2          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 20%
        self.stop_loss = 0.03            # –°—Ç–æ–ø-–ª–æ—Å—Å 3%
        self.take_profit = 0.06          # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 6%
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.trades = []
        self.balance_history = []
        self.current_balance = self.initial_balance
        self.max_balance = self.initial_balance
        self.max_drawdown_reached = 0
        
        print("üéØ –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ï–†")
        print("üìä –° —É—á–µ—Ç–æ–º —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π")
        print("=" * 50)
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π"""
        print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏...")
        
        try:
            with open('historical_models/minimum_model.pkl', 'rb') as f:
                self.minimum_model = pickle.load(f)
            
            with open('historical_models/maximum_model.pkl', 'rb') as f:
                self.maximum_model = pickle.load(f)
            
            with open('historical_models/minimum_scaler.pkl', 'rb') as f:
                self.minimum_scaler = pickle.load(f)
            
            with open('historical_models/maximum_scaler.pkl', 'rb') as f:
                self.maximum_scaler = pickle.load(f)
            
            with open('historical_models/minimum_features.pkl', 'rb') as f:
                self.minimum_features = pickle.load(f)
            
            with open('historical_models/maximum_features.pkl', 'rb') as f:
                self.maximum_features = pickle.load(f)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def get_real_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é {symbol} —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}...")
            exchange = ccxt.binance()
            
            since = int(start_date.timestamp() * 1000)
            end_ts = int(end_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            print(f"   ‚úÖ {len(df)} —Å–≤–µ—á–µ–π")
            return df
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return pd.DataFrame()
    
    def prepare_features(self, df: pd.DataFrame, idx: int, is_minimum: bool = True) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            if idx < 50 or idx >= len(df) - 6:
                return None
            
            current = df.iloc[idx]
            prev = df.iloc[idx - 1]
            prev_2 = df.iloc[idx - 2]
            
            if is_minimum:
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞
                features = {
                    'price_velocity': (current['close'] - prev['close']) / prev['close'],
                    'ema20_velocity': (current['ema_20'] - prev['ema_20']) / prev['ema_20'],
                    'ema50_velocity': (current['ema_50'] - prev['ema_50']) / prev['ema_50'],
                    'ema100_velocity': (current['ema_100'] - prev['ema_100']) / prev['ema_100'],
                    'price_acceleration': ((current['close'] - prev['close']) / prev['close']) - 
                                       ((prev['close'] - prev_2['close']) / prev_2['close']),
                    'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                    'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                    'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                    'ema20_angle': ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) * 100,
                    'ema50_angle': ((current['ema_50'] - prev['ema_50']) / prev['ema_50']) * 100,
                    'ema100_angle': ((current['ema_100'] - prev['ema_100']) / prev['ema_100']) * 100,
                    'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean(),
                    'volume_ratio': current['volume'] / df['volume'].iloc[idx-20:idx].mean() if df['volume'].iloc[idx-20:idx].mean() > 0 else 1,
                    'distance_change_ema20': (current['close'] - current['ema_20']) / current['ema_20'] - 
                                           (prev['close'] - prev['ema_20']) / prev['ema_20'],
                    'distance_change_ema50': (current['close'] - current['ema_50']) / current['ema_50'] - 
                                           (prev['close'] - prev['ema_50']) / prev['ema_50'],
                    'velocity_ratio_price_ema20': (current['close'] - prev['close']) / prev['close'] / 
                                                ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) if (current['ema_20'] - prev['ema_20']) / prev['ema_20'] != 0 else 0,
                    'velocity_ratio_ema20_ema50': ((current['ema_20'] - prev['ema_20']) / prev['ema_20']) / 
                                                ((current['ema_50'] - prev['ema_50']) / prev['ema_50']) if (current['ema_50'] - prev['ema_50']) / prev['ema_50'] != 0 else 0,
                    'ema20_to_ema50': (current['ema_20'] - current['ema_50']) / current['ema_50'],
                    'ema50_to_ema100': (current['ema_50'] - current['ema_100']) / current['ema_100'],
                    'ema20_to_ema100': (current['ema_20'] - current['ema_100']) / current['ema_100']
                }
            else:
                # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
                price_velocity = (current['close'] - prev['close']) / prev['close']
                ema20_velocity = (current['ema_20'] - prev['ema_20']) / prev['ema_20']
                ema50_velocity = (current['ema_50'] - prev['ema_50']) / prev['ema_50']
                ema100_velocity = (current['ema_100'] - prev['ema_100']) / prev['ema_100']
                
                features = {
                    'price_velocity': price_velocity,
                    'ema20_velocity': ema20_velocity,
                    'ema50_velocity': ema50_velocity,
                    'ema100_velocity': ema100_velocity,
                    'price_acceleration': price_velocity - ((prev['close'] - prev_2['close']) / prev_2['close']),
                    'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                    'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                    'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                    'ema20_angle': ema20_velocity * 100,
                    'ema50_angle': ema50_velocity * 100,
                    'ema100_angle': ema100_velocity * 100,
                    'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean(),
                    'volume_ratio': current['volume'] / df['volume'].iloc[idx-20:idx].mean() if df['volume'].iloc[idx-20:idx].mean() > 0 else 1,
                    'distance_change_ema20': (current['close'] - current['ema_20']) / current['ema_20'] - 
                                           (prev['close'] - prev['ema_20']) / prev['ema_20'],
                    'distance_change_ema50': (current['close'] - current['ema_50']) / current['ema_50'] - 
                                           (prev['close'] - prev['ema_50']) / prev['ema_50'],
                    'velocity_ratio_price_ema20': price_velocity / ema20_velocity if ema20_velocity != 0 else 0,
                    'velocity_ratio_ema20_ema50': ema20_velocity / ema50_velocity if ema50_velocity != 0 else 0,
                    'velocity_ratio_ema50_ema100': ema50_velocity / ema100_velocity if ema100_velocity != 0 else 0,
                    'ema20_to_ema50': (current['ema_20'] - current['ema_50']) / current['ema_50'],
                    'ema50_to_ema100': (current['ema_50'] - current['ema_100']) / current['ema_100'],
                    'ema20_to_ema100': (current['ema_20'] - current['ema_100']) / current['ema_100'],
                    'ema20_slope': (current['ema_20'] - df.iloc[idx-5]['ema_20']) / 5,
                    'ema50_slope': (current['ema_50'] - df.iloc[idx-5]['ema_50']) / 5,
                    'ema100_slope': (current['ema_100'] - df.iloc[idx-5]['ema_100']) / 5,
                    'ema20_ema50_ratio': current['ema_20'] / current['ema_50'],
                    'ema50_ema100_ratio': current['ema_50'] / current['ema_100'],
                    'ema20_ema100_ratio': current['ema_20'] / current['ema_100']
                }
            
            return features
            
        except Exception:
            return None
    
    def predict_signal(self, features_dict, is_minimum: bool = True):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if is_minimum:
                features_list = [features_dict.get(name, 0) for name in self.minimum_features]
                features_array = np.array(features_list).reshape(1, -1)
                features_scaled = self.minimum_scaler.transform(features_array)
                prediction = self.minimum_model.predict(features_scaled)[0]
                probability = self.minimum_model.predict_proba(features_scaled)[0]
            else:
                features_list = [features_dict.get(name, 0) for name in self.maximum_features]
                features_array = np.array(features_list).reshape(1, -1)
                features_scaled = self.maximum_scaler.transform(features_array)
                prediction = self.maximum_model.predict(features_scaled)[0]
                probability = self.maximum_model.predict_proba(features_scaled)[0]
            
            return {
                'prediction': prediction,
                'confidence': max(probability),
                'is_good_signal': prediction == 1
            }
        except Exception:
            return None
    
    def calculate_position_size(self):
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        return self.current_balance * self.position_size
    
    def apply_costs(self, price: float, is_entry: bool = True) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–π –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è"""
        if is_entry:
            # –ü—Ä–∏ –≤—Ö–æ–¥–µ: —Ü–µ–Ω–∞ + –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ + –∫–æ–º–∏—Å—Å–∏—è
            return price * (1 + self.slippage + self.commission)
        else:
            # –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ: —Ü–µ–Ω–∞ - –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ - –∫–æ–º–∏—Å—Å–∏—è
            return price * (1 - self.slippage - self.commission)
    
    def check_risk_management(self, entry_price: float, current_price: float) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        if current_price <= entry_price * (1 - self.stop_loss):
            return 'stop_loss'
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if current_price >= entry_price * (1 + self.take_profit):
            return 'take_profit'
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        current_drawdown = (self.max_balance - self.current_balance) / self.max_balance
        if current_drawdown >= self.max_drawdown:
            return 'max_drawdown'
        
        return 'continue'
    
    def simulate_real_trading(self, df: pd.DataFrame, symbol: str):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        print(f"üéØ –°–∏–º—É–ª–∏—Ä—É—é —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é {symbol}...")
        
        current_position = None
        symbol_trades = []
        
        for i in range(100, len(df) - 10):
            current_time = df.index[i]
            current_price = df.iloc[i]['close']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if self.current_balance > self.max_balance:
                self.max_balance = self.current_balance
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
            if current_position:
                risk_action = self.check_risk_management(current_position['entry_price'], current_price)
                
                if risk_action != 'continue':
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥
                    exit_price = self.apply_costs(current_price, is_entry=False)
                    position_size = current_position['position_size']
                    
                    profit_loss = (exit_price - current_position['entry_price']) / current_position['entry_price']
                    profit_amount = position_size * profit_loss
                    
                    self.current_balance += profit_amount
                    
                    trade = {
                        'symbol': symbol,
                        'entry_time': current_position['entry_time'],
                        'exit_time': current_time,
                        'entry_price': current_position['entry_price'],
                        'exit_price': exit_price,
                        'position_size': position_size,
                        'profit_loss': profit_loss,
                        'profit_amount': profit_amount,
                        'balance_after': self.current_balance,
                        'exit_reason': risk_action,
                        'duration_hours': (current_time - current_position['entry_time']).total_seconds() / 3600
                    }
                    
                    symbol_trades.append(trade)
                    current_position = None
            
            # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –≤—Ö–æ–¥–∞
            if current_position is None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
                is_minimum = True
                for j in range(max(0, i-5), min(len(df), i+6)):
                    if j != i and df.iloc[j]['low'] <= df.iloc[i]['low']:
                        is_minimum = False
                        break
                
                if is_minimum:
                    features = self.prepare_features(df, i, is_minimum=True)
                    if features:
                        prediction = self.predict_signal(features, is_minimum=True)
                        if prediction and prediction['is_good_signal'] and prediction['confidence'] > 0.7:
                            # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é
                            entry_price = self.apply_costs(current_price, is_entry=True)
                            position_size = self.calculate_position_size()
                            
                            if position_size > 0:
                                current_position = {
                                    'entry_time': current_time,
                                    'entry_price': entry_price,
                                    'position_size': position_size,
                                    'confidence': prediction['confidence']
                                }
            
            # –ü–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –≤—ã—Ö–æ–¥–∞
            if current_position:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º
                is_maximum = True
                for j in range(max(0, i-5), min(len(df), i+6)):
                    if j != i and df.iloc[j]['high'] >= df.iloc[i]['high']:
                        is_maximum = False
                        break
                
                if is_maximum:
                    features = self.prepare_features(df, i, is_minimum=False)
                    if features:
                        prediction = self.predict_signal(features, is_minimum=False)
                        if prediction and prediction['is_good_signal'] and prediction['confidence'] > 0.7:
                            # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
                            exit_price = self.apply_costs(current_price, is_entry=False)
                            position_size = current_position['position_size']
                            
                            profit_loss = (exit_price - current_position['entry_price']) / current_position['entry_price']
                            profit_amount = position_size * profit_loss
                            
                            self.current_balance += profit_amount
                            
                            trade = {
                                'symbol': symbol,
                                'entry_time': current_position['entry_time'],
                                'exit_time': current_time,
                                'entry_price': current_position['entry_price'],
                                'exit_price': exit_price,
                                'position_size': position_size,
                                'profit_loss': profit_loss,
                                'profit_amount': profit_amount,
                                'balance_after': self.current_balance,
                                'exit_reason': 'signal',
                                'duration_hours': (current_time - current_position['entry_time']).total_seconds() / 3600
                            }
                            
                            symbol_trades.append(trade)
                            current_position = None
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞
            self.balance_history.append({
                'time': current_time,
                'balance': self.current_balance,
                'symbol': symbol
            })
        
        print(f"   ‚úÖ {len(symbol_trades)} —Å–¥–µ–ª–æ–∫")
        return symbol_trades
    
    def run_real_backtest(self, start_date: datetime, end_date: datetime):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ò–ù–ì–ê")
        print("=" * 50)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if not self.load_models():
            return
        
        # 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        self.current_balance = self.initial_balance
        self.max_balance = self.initial_balance
        self.balance_history = []
        self.trades = []
        
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:,}")
        print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.position_size*100}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞")
        print(f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {self.commission*100}%")
        print(f"üìâ –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ: {self.slippage*100}%")
        print(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {self.stop_loss*100}%")
        print(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.take_profit*100}%")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
        for i, symbol in enumerate(self.symbols):
            print(f"\n[{i+1}/{len(self.symbols)}] {symbol}")
            
            df = self.get_real_data(symbol, start_date, end_date)
            if df.empty:
                print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
            
            trades = self.simulate_real_trading(df, symbol)
            self.trades.extend(trades)
            
            time.sleep(1)
        
        # 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results()
        
        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()
        
        print(f"\n‚úÖ –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù!")
    
    def analyze_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print("-" * 30)
        
        if not self.trades:
            print("‚ùå –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(self.trades)
        profitable_trades = [t for t in self.trades if t['profit_amount'] > 0]
        losing_trades = [t for t in self.trades if t['profit_amount'] < 0]
        
        win_rate = len(profitable_trades) / total_trades * 100
        total_profit = sum(t['profit_amount'] for t in self.trades)
        total_return = (self.current_balance - self.initial_balance) / self.initial_balance * 100
        
        avg_profit = np.mean([t['profit_amount'] for t in self.trades])
        avg_duration = np.mean([t['duration_hours'] for t in self.trades])
        
        max_profit = max(t['profit_amount'] for t in self.trades)
        max_loss = min(t['profit_amount'] for t in self.trades)
        
        # –ü—Ä–æ—Å–∞–¥–∫–∞
        max_drawdown = (self.max_balance - min(h['balance'] for h in self.balance_history)) / self.max_balance * 100
        
        print(f"üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.current_balance:,.2f}")
        print(f"üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${total_profit:,.2f}")
        print(f"üìä –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2f}%")
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable_trades)} ({win_rate:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {len(losing_trades)} ({100-win_rate:.1f}%)")
        print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.1f} —á–∞—Å–æ–≤")
        print(f"üéØ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${max_profit:.2f}")
        print(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${max_loss:.2f}")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print(f"\nüìä –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        symbol_stats = {}
        for trade in self.trades:
            symbol = trade['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'trades': 0, 'profit': 0, 'profitable': 0}
            symbol_stats[symbol]['trades'] += 1
            symbol_stats[symbol]['profit'] += trade['profit_amount']
            if trade['profit_amount'] > 0:
                symbol_stats[symbol]['profitable'] += 1
        
        for symbol, stats in symbol_stats.items():
            win_rate_symbol = stats['profitable'] / stats['trades'] * 100
            print(f"   {symbol}: {stats['trades']} —Å–¥–µ–ª–æ–∫, ${stats['profit']:.2f} –ø—Ä–∏–±—ã–ª—å, {win_rate_symbol:.1f}% win rate")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        results = {
            'backtest_info': {
                'start_date': '2025-01-01',
                'end_date': '2025-09-23',
                'initial_balance': self.initial_balance,
                'final_balance': self.current_balance,
                'total_return': (self.current_balance - self.initial_balance) / self.initial_balance * 100,
                'total_trades': len(self.trades),
                'position_size': self.position_size,
                'commission': self.commission,
                'slippage': self.slippage,
                'stop_loss': self.stop_loss,
                'take_profit': self.take_profit
            },
            'trades': self.trades,
            'balance_history': self.balance_history
        }
        
        results_file = f'real_backtest_results_{timestamp}.json'
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")

if __name__ == "__main__":
    backtester = RealBacktester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ –¥–∞–Ω–Ω—ã—Ö 2025 –≥–æ–¥–∞
    start_date = datetime(2025, 1, 1)
    end_date = datetime(2025, 9, 23)
    
    backtester.run_real_backtest(start_date, end_date)
