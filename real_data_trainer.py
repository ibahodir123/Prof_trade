#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –û–ë–£–ß–ï–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
–û–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª—å –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json

class RealDataTrainer:
    def __init__(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.base_url = "https://api.binance.com/api/v3/klines"
        
        # üß† –í–µ—Å–∞ –¥–ª—è –º–∏–Ω–∏–º—É–º–æ–≤ (–∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
        self.weights_minimums = {
            'priceVelocity': 0.037,
            'ema20Velocity': 0.031,
            'ema20Angle': 0.217,
            'priceDistance': 0.715
        }
        
        # üß† –í–µ—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        self.weights_maximums = {
            'priceVelocity': 0.037,
            'ema20Velocity': 0.031,
            'ema20Angle': 0.217,
            'priceDistance': 0.715
        }
        
        print("üöÄ –¢–†–ï–ù–ï–† –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù")
        print("üìä –ë—É–¥–µ–º –æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
    
    def get_real_data(self, symbol='BTC/USDT', timeframe='1h', limit=500):
        """üìà –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            url = self.base_url
            params = {
                'symbol': symbol.replace('/', ''),
                'interval': timeframe,
                'limit': limit
            }
            
            response = requests.get(url, params=params)
            data = response.json()
            
            if not data:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None
            
            # üìä –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_base',
                'taker_buy_quote', 'ignore'
            ])
            
            # üîß –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def find_real_minimums(self, df):
        """üîç –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
        minimums = []
        
        for i in range(2, len(df) - 2):
            current = df.iloc[i]
            prev1 = df.iloc[i-1]
            prev2 = df.iloc[i-2]
            next1 = df.iloc[i+1]
            next2 = df.iloc[i+2]
            
            # üîª –£—Å–ª–æ–≤–∏–µ –º–∏–Ω–∏–º—É–º–∞: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö
            if (current['low'] < prev1['low'] and 
                current['low'] < prev2['low'] and
                current['low'] < next1['low'] and 
                current['low'] < next2['low']):
                
                minimums.append({
                    'index': i,
                    'price': current['low'],
                    'time': current['timestamp'],
                    'ema20': current['ema20']
                })
        
        return minimums
    
    def find_real_maximums(self, df):
        """üî∫ –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
        maximums = []
        
        for i in range(2, len(df) - 2):
            current = df.iloc[i]
            prev1 = df.iloc[i-1]
            prev2 = df.iloc[i-2]
            next1 = df.iloc[i+1]
            next2 = df.iloc[i+2]
            
            # üî∫ –£—Å–ª–æ–≤–∏–µ –º–∞–∫—Å–∏–º—É–º–∞: —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–æ–ª—å—à–µ —Å–æ—Å–µ–¥–Ω–∏—Ö
            if (current['high'] > prev1['high'] and 
                current['high'] > prev2['high'] and
                current['high'] > next1['high'] and 
                current['high'] > next2['high']):
                
                maximums.append({
                    'index': i,
                    'price': current['high'],
                    'time': current['timestamp'],
                    'ema20': current['ema20']
                })
        
        return maximums
    
    def calculate_features(self, df, index):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ç–æ—á–∫–∏"""
        if index < 20:
            return None
        
        current = df.iloc[index]
        previous = df.iloc[:index]
        
        if len(previous) < 2:
            return None
        
        current_price = current['close']
        current_ema20 = current['ema20']
        prev_price = previous['close'].iloc[-1]
        prev_ema20 = previous['ema20'].iloc[-1]
        
        features = {
            'priceVelocity': abs(current_price - prev_price) / prev_price,
            'ema20Velocity': abs(current_ema20 - prev_ema20) / prev_ema20,
            'ema20Angle': abs(np.degrees(np.arctan((current_ema20 - prev_ema20) / prev_ema20))),
            'priceDistance': abs(current_price - current_ema20) / current_ema20
        }
        
        return features
    
    def train_on_real_data(self, symbol='BTC/USDT'):
        """üéì –û–±—É—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüéì –û–ë–£–ß–ï–ù–ò–ï –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•: {symbol}")
        print("=" * 60)
        
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_real_data(symbol, limit=500)
        if df is None:
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        
        # üîç –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
        minimums = self.find_real_minimums(df)
        maximums = self.find_real_maximums(df)
        
        print(f"üîª –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º–æ–≤: {len(minimums)}")
        print(f"üî∫ –ù–∞–π–¥–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º–æ–≤: {len(maximums)}")
        
        # üìö –°–æ–±–∏—Ä–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        training_data = []
        
        # üîª –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º—ã
        for min_point in minimums:
            features = self.calculate_features(df, min_point['index'])
            if features:
                training_data.append({
                    'type': 'minimum',
                    'features': features,
                    'price': min_point['price'],
                    'time': min_point['time']
                })
        
        # üî∫ –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º—ã
        for max_point in maximums:
            features = self.calculate_features(df, max_point['index'])
            if features:
                training_data.append({
                    'type': 'maximum',
                    'features': features,
                    'price': max_point['price'],
                    'time': max_point['time']
                })
        
        print(f"üìö –í—Å–µ–≥–æ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: {len(training_data)}")
        
        # üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        self.analyze_patterns(training_data)
        
        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        self.save_trained_model(training_data)
        
        return training_data
    
    def analyze_patterns(self, training_data):
        """üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüß† –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í")
        print("=" * 40)
        
        minimums = [d for d in training_data if d['type'] == 'minimum']
        maximums = [d for d in training_data if d['type'] == 'maximum']
        
        print(f"üîª –ú–∏–Ω–∏–º—É–º—ã: {len(minimums)}")
        print(f"üî∫ –ú–∞–∫—Å–∏–º—É–º—ã: {len(maximums)}")
        
        # üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–∏–Ω–∏–º—É–º–æ–≤
        if minimums:
            print(f"\nüîª –ê–ù–ê–õ–ò–ó –ú–ò–ù–ò–ú–£–ú–û–í:")
            for feature in ['priceVelocity', 'ema20Velocity', 'ema20Angle', 'priceDistance']:
                values = [m['features'][feature] for m in minimums]
                print(f"  {feature}: –º–∏–Ω={min(values):.4f}, –º–∞–∫—Å={max(values):.4f}, —Å—Ä={np.mean(values):.4f}")
        
        # üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–∞–∫—Å–∏–º—É–º–æ–≤
        if maximums:
            print(f"\nüî∫ –ê–ù–ê–õ–ò–ó –ú–ê–ö–°–ò–ú–£–ú–û–í:")
            for feature in ['priceVelocity', 'ema20Velocity', 'ema20Angle', 'priceDistance']:
                values = [m['features'][feature] for m in maximums]
                print(f"  {feature}: –º–∏–Ω={min(values):.4f}, –º–∞–∫—Å={max(values):.4f}, —Å—Ä={np.mean(values):.4f}")
    
    def save_trained_model(self, training_data):
        """üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        model_data = {
            'weights_minimums': self.weights_minimums,
            'weights_maximums': self.weights_maximums,
            'training_data': training_data,
            'timestamp': datetime.now().isoformat()
        }
        
        with open('real_trained_model.json', 'w', encoding='utf-8') as f:
            json.dump(model_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ real_trained_model.json")
    
    def test_multiple_symbols(self):
        """üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö"""
        symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
        
        print(f"\nüß™ –û–ë–£–ß–ï–ù–ò–ï –ù–ê –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–ê–•")
        print("=" * 60)
        
        all_training_data = []
        
        for symbol in symbols:
            print(f"\nüìä –û–±—É—á–∞–µ–º—Å—è –Ω–∞ {symbol}...")
            training_data = self.train_on_real_data(symbol)
            if training_data:
                all_training_data.extend(training_data)
        
        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é –º–æ–¥–µ–ª—å
        if all_training_data:
            self.save_trained_model(all_training_data)
            print(f"\n‚úÖ –û–ë–©–ê–Ø –ú–û–î–ï–õ–¨ –°–û–•–†–ê–ù–ï–ù–ê!")
            print(f"üìö –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(all_training_data)}")

if __name__ == "__main__":
    trainer = RealDataTrainer()
    trainer.test_multiple_symbols()






