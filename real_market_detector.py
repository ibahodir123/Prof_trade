#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìà –†–ï–ê–õ–¨–ù–´–ô –î–ï–¢–ï–ö–¢–û–† –†–´–ù–ö–ê
============================

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance API –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
- –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç EMA20
- –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—à–∏ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è
- –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-01-22
"""

import ccxt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import time
import warnings
warnings.filterwarnings('ignore')

class RealMarketDetector:
    """üìà –†–µ–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–∫–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        print("üìà –†–µ–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance
        self.exchange = ccxt.binance({
            'apiKey': '',  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            'secret': '',  # –ù–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            'sandbox': False,  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'enableRateLimit': True,
        })
        
        # üéØ –ù–∞—à–∏ –≤–µ—Å–∞ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        self.weights_minimums = {
            'priceVelocity': 0.037,     # 3.7% - —Å–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
            'ema20Velocity': 0.031,     # 3.1% - —Å–∫–æ—Ä–æ—Å—Ç—å EMA20
            'ema20Angle': 0.217,        # 21.7% - —É–≥–æ–ª EMA20
            'priceDistance': 0.715      # 71.5% - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20
        }
        
        self.weights_maximums = {
            'priceVelocity': 0.715,     # 71.5% - –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            'ema20Velocity': 0.217,     # 21.7% - –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            'ema20Angle': 0.031,        # 3.1% - –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
            'priceDistance': 0.037      # 3.7% - –∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        }
        
        # üìä –ü–æ—Ä–æ–≥–∏
        self.confidence_threshold = 0.25  # 25%
        
        print(f"‚öñÔ∏è –í–µ—Å–∞ –º–∏–Ω–∏–º—É–º–æ–≤: Distance={self.weights_minimums['priceDistance']:.1%}")
        print(f"‚öñÔ∏è –í–µ—Å–∞ –º–∞–∫—Å–∏–º—É–º–æ–≤: Distance={self.weights_maximums['priceDistance']:.1%}")
    
    def get_real_data(self, symbol='BTC/USDT', timeframe='1h', limit=100):
        """üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            print(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} ({timeframe})...")
            
            # üìà –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            # üìä –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def calculate_features(self, current, previous):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è"""
        if previous is None or len(previous) < 2:
            return None
        
        # üìà –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        current_price = current['close']
        current_ema20 = current['ema20']
        prev_price = previous['close'].iloc[-1]
        prev_ema20 = previous['ema20'].iloc[-1]
        
        # üßÆ –ù–∞—à–∏ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è
        features = {
            'priceVelocity': abs(current_price - prev_price) / prev_price,
            'ema20Velocity': abs(current_ema20 - prev_ema20) / prev_ema20,
            'ema20Angle': abs(np.degrees(np.arctan((current_ema20 - prev_ema20) / prev_ema20))),
            'priceDistance': abs(current_price - current_ema20) / current_ema20
        }
        
        return features
    
    def predict_minimum(self, features):
        """üîª –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º"""
        if not features:
            return 0.0
        
        # üßÆ –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        weighted_score = 0.0
        for feature, weight in self.weights_minimums.items():
            weighted_score += weight * features[feature]
        
        # üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = min(1.0, weighted_score * 10.0)
        
        return confidence
    
    def predict_maximum(self, features):
        """üî∫ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º"""
        if not features:
            return 0.0
        
        # üßÆ –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        weighted_score = 0.0
        for feature, weight in self.weights_maximums.items():
            weighted_score += weight * features[feature]
        
        # üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = min(1.0, weighted_score * 10.0)
        
        return confidence
    
    def analyze_real_market(self, symbol='BTC/USDT', timeframe='1h'):
        """üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫"""
        print(f"\nüöÄ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ì–û –†–´–ù–ö–ê: {symbol}")
        print("=" * 60)
        
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_real_data(symbol, timeframe)
        if df is None:
            return
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df)} —Å–≤–µ—á–µ–π...")
        
        # üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
        minimums = []
        maximums = []
        
        for i in range(20, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 20-–π —Å–≤–µ—á–∏ (–¥–ª—è EMA20)
            current = df.iloc[i]
            previous = df.iloc[:i]
            
            # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.calculate_features(current, previous)
            if not features:
                continue
            
            # üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º
            min_confidence = self.predict_minimum(features)
            if min_confidence >= self.confidence_threshold:
                minimums.append({
                    'timestamp': current['timestamp'],
                    'price': current['close'],
                    'confidence': min_confidence,
                    'features': features
                })
                print(f"üîª –ú–ò–ù–ò–ú–£–ú: ${current['close']:.0f} ({current['timestamp']}) - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.1%}")
            
            # üî∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º
            max_confidence = self.predict_maximum(features)
            if max_confidence >= self.confidence_threshold:
                maximums.append({
                    'timestamp': current['timestamp'],
                    'price': current['close'],
                    'confidence': max_confidence,
                    'features': features
                })
                print(f"üî∫ –ú–ê–ö–°–ò–ú–£–ú: ${current['close']:.0f} ({current['timestamp']}) - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_confidence:.1%}")
        
        # üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –†–´–ù–ö–ê")
        print("=" * 50)
        print(f"üîª –ú–∏–Ω–∏–º—É–º–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(minimums)}")
        print(f"üî∫ –ú–∞–∫—Å–∏–º—É–º–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(maximums)}")
        
        if minimums:
            avg_min_confidence = np.mean([m['confidence'] for m in minimums])
            print(f"üìà –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º—É–º–æ–≤: {avg_min_confidence:.1%}")
        
        if maximums:
            avg_max_confidence = np.mean([m['confidence'] for m in maximums])
            print(f"üìâ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–∞–∫—Å–∏–º—É–º–æ–≤: {avg_max_confidence:.1%}")
        
        # üìä –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ (–æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏)
        # self.create_real_chart(df, minimums, maximums)
        
        return minimums, maximums
    
    def create_real_chart(self, df, minimums, maximums):
        """üìä –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        fig, ax = plt.subplots(figsize=(15, 8))
        
        # üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        ax.plot(df['timestamp'], df['close'], 'b-', linewidth=1, label='–¶–µ–Ω–∞')
        ax.plot(df['timestamp'], df['ema20'], 'orange', linewidth=1, alpha=0.7, label='EMA20')
        
        # üîª –ú–∏–Ω–∏–º—É–º—ã
        if minimums:
            min_times = [m['timestamp'] for m in minimums]
            min_prices = [m['price'] for m in minimums]
            ax.scatter(min_times, min_prices, color='green', s=100, marker='^', 
                      label=f'–ú–∏–Ω–∏–º—É–º—ã ({len(minimums)})', zorder=5)
        
        # üî∫ –ú–∞–∫—Å–∏–º—É–º—ã
        if maximums:
            max_times = [m['timestamp'] for m in maximums]
            max_prices = [m['price'] for m in maximums]
            ax.scatter(max_times, max_prices, color='red', s=100, marker='v', 
                      label=f'–ú–∞–∫—Å–∏–º—É–º—ã ({len(maximums)})', zorder=5)
        
        ax.set_title('üìà –†–µ–∞–ª—å–Ω—ã–π –ê–Ω–∞–ª–∏–∑ –†—ã–Ω–∫–∞', fontsize=16, fontweight='bold')
        ax.set_xlabel('–í—Ä–µ–º—è')
        ax.set_ylabel('–¶–µ–Ω–∞')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig('real_market_analysis.png', dpi=150, bbox_inches='tight')
        print("üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: real_market_analysis.png")
    
    def test_multiple_symbols(self, symbols=['BTC/USDT', 'ETH/USDT', 'SOL/USDT']):
        """üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤"""
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í")
        print("=" * 60)
        
        results = {}
        
        for symbol in symbols:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol}...")
            minimums, maximums = self.analyze_real_market(symbol)
            
            results[symbol] = {
                'minimums': len(minimums),
                'maximums': len(maximums),
                'total_signals': len(minimums) + len(maximums)
            }
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 50)
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 50)
        
        for symbol, result in results.items():
            print(f"{symbol}: {result['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤ ({result['minimums']} –º–∏–Ω, {result['maximums']} –º–∞–∫—Å)")

if __name__ == "__main__":
    detector = RealMarketDetector()
    
    # üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
    # detector.analyze_real_market('BTC/USDT', '1h')
    
    # üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    detector.test_multiple_symbols()
