#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –†–ï–ê–õ–¨–ù–ê–Ø ML –°–ò–°–¢–ï–ú–ê
–û–±—É—á–∞–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —è–Ω–≤–∞—Ä—è, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–µ–≤—Ä–∞–ª—è
"""

import requests
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import os

class RealMLSystem:
    def __init__(self):
        """üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π ML —Å–∏—Å—Ç–µ–º—ã"""
        self.base_url = "https://api.binance.com/api/v3/klines"
        
        # üß† –ù–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ (–±—É–¥—É—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è)
        self.weights_minimums = {
            'priceVelocity': 0.25,
            'ema20Velocity': 0.25,
            'ema20Angle': 0.25,
            'priceDistance': 0.25
        }
        
        self.weights_maximums = {
            'priceVelocity': 0.25,
            'ema20Velocity': 0.25,
            'ema20Angle': 0.25,
            'priceDistance': 0.25
        }
        
        # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        self.training_stats = {
            'patterns_learned': 0,
            'minimums_found': 0,
            'maximums_found': 0,
            'accuracy': 0.0
        }
        
        # üí∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.commission = 0.001
        self.confidence_threshold = 0.28  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.max_confidence_threshold = 0.18  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.stop_loss = 0.04  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
        self.take_profit = 0.02  # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 2%
        self.initial_capital = 10000
        
        print("üöÄ –†–ï–ê–õ–¨–ù–ê–Ø ML –°–ò–°–¢–ï–ú–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê")
        print("üìÖ –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —è–Ω–≤–∞—Ä—è")
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–µ–≤—Ä–∞–ª—è")
    
    def get_real_data(self, symbol='BTC/USDT', timeframe='1h', limit=500):
        """üìà –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            url = self.base_url
            params = {
                'symbol': symbol.replace('/', ''),
                'interval': timeframe,
                'limit': limit
            }
            
            response = requests.get(url, params=params)
            data = response.json()
            
            if not data:
                return None
            
            # üìä –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_volume', 'trades', 'taker_buy_base',
                'taker_buy_quote', 'ignore'
            ])
            
            # üîß –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def find_real_minimums(self, df):
        """üîç –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã"""
        minimums = []
        
        for i in range(2, len(df) - 2):
            current = df.iloc[i]
            prev1 = df.iloc[i-1]
            prev2 = df.iloc[i-2]
            next1 = df.iloc[i+1]
            next2 = df.iloc[i+2]
            
            # üîª –£—Å–ª–æ–≤–∏–µ –º–∏–Ω–∏–º—É–º–∞
            if (current['low'] < prev1['low'] and 
                current['low'] < prev2['low'] and
                current['low'] < next1['low'] and 
                current['low'] < next2['low']):
                
                minimums.append({
                    'index': i,
                    'price': current['low'],
                    'time': current['timestamp'],
                    'ema20': current['ema20']
                })
        
        return minimums
    
    def find_real_maximums(self, df):
        """üî∫ –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã"""
        maximums = []
        
        for i in range(2, len(df) - 2):
            current = df.iloc[i]
            prev1 = df.iloc[i-1]
            prev2 = df.iloc[i-2]
            next1 = df.iloc[i+1]
            next2 = df.iloc[i+2]
            
            # üî∫ –£—Å–ª–æ–≤–∏–µ –º–∞–∫—Å–∏–º—É–º–∞
            if (current['high'] > prev1['high'] and 
                current['high'] > prev2['high'] and
                current['high'] > next1['high'] and 
                current['high'] > next2['high']):
                
                maximums.append({
                    'index': i,
                    'price': current['high'],
                    'time': current['timestamp'],
                    'ema20': current['ema20']
                })
        
        return maximums
    
    def calculate_features(self, df, index):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        if index < 20:
            return None
        
        current = df.iloc[index]
        previous = df.iloc[:index]
        
        if len(previous) < 2:
            return None
        
        current_price = current['close']
        current_ema20 = current['ema20']
        prev_price = previous['close'].iloc[-1]
        prev_ema20 = previous['ema20'].iloc[-1]
        
        features = {
            'priceVelocity': abs(current_price - prev_price) / prev_price,
            'ema20Velocity': abs(current_ema20 - prev_ema20) / prev_ema20,
            'ema20Angle': abs(np.degrees(np.arctan((current_ema20 - prev_ema20) / prev_ema20))),
            'priceDistance': abs(current_price - current_ema20) / current_ema20
        }
        
        return features
    
    def predict_minimum(self, features):
        """üîª –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º"""
        if not features:
            return 0.0
        
        weighted_score = 0.0
        for feature, weight in self.weights_minimums.items():
            weighted_score += weight * features[feature]
        
        confidence = min(1.0, weighted_score * 10.0)
        
        # üéØ –£–ú–ù–´–ï –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê
        if features['priceDistance'] < 0.003:  # –°–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ EMA20
            confidence *= 0.7  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
        if features['ema20Angle'] < 0.05:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É–≥–æ–ª
            confidence *= 0.8  # –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
        
        # üöÄ –ë–û–ù–£–°–´ –î–õ–Ø –°–ò–õ–¨–ù–´–• –°–ò–ì–ù–ê–õ–û–í
        if features['priceDistance'] > 0.01:  # –î–∞–ª–µ–∫–æ –æ—Ç EMA20
            confidence += 0.05
        if features['ema20Angle'] > 0.2:  # –ë–æ–ª—å—à–æ–π —É–≥–æ–ª
            confidence += 0.05
        
        return confidence
    
    def predict_maximum(self, features):
        """üî∫ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º"""
        if not features:
            return 0.0
        
        weighted_score = 0.0
        for feature, weight in self.weights_maximums.items():
            weighted_score += weight * features[feature]
        
        confidence = min(1.0, weighted_score * 10.0)
        return confidence
    
    def adapt_weights_for_minimum(self, features):
        """üß† –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –¥–ª—è –º–∏–Ω–∏–º—É–º–∞"""
        print("üß† –ê–î–ê–ü–¢–ê–¶–ò–Ø –í–ï–°–û–í –î–õ–Ø –ú–ò–ù–ò–ú–£–ú–ê...")
        
        # üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –º–∏–Ω–∏–º—É–º–∞
        total_impact = sum(features.values())
        
        if total_impact > 0:
            # üéØ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å —Å–∞–º–æ–≥–æ –∑–Ω–∞—á–∏–º–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
            max_feature = max(features, key=features.get)
            max_value = features[max_feature]
            
            # üìà –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞
            for feature in features:
                if feature == max_feature:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞
                    self.weights_minimums[feature] = min(0.8, 
                        self.weights_minimums[feature] + max_value * 0.1)
                else:
                    # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    self.weights_minimums[feature] = max(0.05, 
                        self.weights_minimums[feature] - max_value * 0.05)
            
            # üîß –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
            total_weight = sum(self.weights_minimums.values())
            for feature in self.weights_minimums:
                self.weights_minimums[feature] /= total_weight
            
            print(f"‚úÖ –í–µ—Å–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –º–∏–Ω–∏–º—É–º–∞")
            print(f"üéØ –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫: {max_feature} = {self.weights_minimums[max_feature]:.3f}")
    
    def train_on_january_data(self, symbol='BTC/USDT'):
        """üéì –û–±—É—á–∞–µ–º—Å—è –Ω–∞ —è–Ω–≤–∞—Ä—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüéì –û–ë–£–ß–ï–ù–ò–ï –ù–ê –Ø–ù–í–ê–†–°–ö–ò–• –î–ê–ù–ù–´–•: {symbol}")
        print("=" * 60)
        
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_real_data(symbol, limit=500)
        if df is None:
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        
        # üîç –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
        minimums = self.find_real_minimums(df)
        maximums = self.find_real_maximums(df)
        
        print(f"üîª –ù–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º–æ–≤: {len(minimums)}")
        print(f"üî∫ –ù–∞–π–¥–µ–Ω–æ –º–∞–∫—Å–∏–º—É–º–æ–≤: {len(maximums)}")
        
        # üß† –û–±—É—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –º–∏–Ω–∏–º—É–º–µ
        for i, min_point in enumerate(minimums):
            features = self.calculate_features(df, min_point['index'])
            if features:
                print(f"üîª –ò–∑—É—á–∞–µ–º –º–∏–Ω–∏–º—É–º #{i+1}: {min_point['time']} - ${min_point['price']:.0f}")
                self.adapt_weights_for_minimum(features)
                self.training_stats['minimums_found'] += 1
                self.training_stats['patterns_learned'] += 1
        
        # üß† –û–±—É—á–∞–µ–º—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º –º–∞–∫—Å–∏–º—É–º–µ
        for i, max_point in enumerate(maximums):
            features = self.calculate_features(df, max_point['index'])
            if features:
                print(f"üî∫ –ò–∑—É—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º #{i+1}: {max_point['time']} - ${max_point['price']:.0f}")
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤ (–∑–µ—Ä–∫–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
                self.adapt_weights_for_minimum(features)  # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
                self.training_stats['maximums_found'] += 1
                self.training_stats['patterns_learned'] += 1
        
        print(f"\n‚úÖ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print(f"üìö –ò–∑—É—á–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {self.training_stats['patterns_learned']}")
        print(f"üîª –ú–∏–Ω–∏–º—É–º–æ–≤: {self.training_stats['minimums_found']}")
        print(f"üî∫ –ú–∞–∫—Å–∏–º—É–º–æ–≤: {self.training_stats['maximums_found']}")
        
        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        self.save_trained_model()
    
    def save_trained_model(self):
        """üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        model_data = {
            'weights_minimums': self.weights_minimums,
            'weights_maximums': self.weights_maximums,
            'training_stats': self.training_stats,
            'timestamp': datetime.now().isoformat()
        }
        
        with open('real_ml_model.json', 'w', encoding='utf-8') as f:
            json.dump(model_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ real_ml_model.json")
    
    def load_trained_model(self):
        """üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å"""
        if os.path.exists('real_ml_model.json'):
            with open('real_ml_model.json', 'r', encoding='utf-8') as f:
                model_data = json.load(f)
            
            self.weights_minimums = model_data['weights_minimums']
            self.weights_maximums = model_data['weights_maximums']
            self.training_stats = model_data['training_stats']
            
            print("‚úÖ –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            return True
        
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É!")
        return False
    
    def test_on_february_data(self, symbol='BTC/USDT'):
        """üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ñ–µ–≤—Ä–∞–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê –§–ï–í–†–ê–õ–¨–°–ö–ò–• –î–ê–ù–ù–´–•: {symbol}")
        print("=" * 60)
        
        # üìä –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = self.get_real_data(symbol, limit=500)
        if df is None:
            return
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        capital = self.initial_capital
        position = None
        entry_price = None
        entry_time = None
        trades = []
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df)} —Å–≤–µ—á–µ–π...")
        
        # üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
        for i in range(20, len(df)):
            current = df.iloc[i]
            previous = df.iloc[:i]
            
            current_price = current['close']
            current_time = current['timestamp']
            
            features = self.calculate_features(df, i)
            if not features:
                continue
            
            # üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º (–≤—Ö–æ–¥ –≤ –ª–æ–Ω–≥)
            if position is None:
                min_confidence = self.predict_minimum(features)
                if min_confidence >= self.confidence_threshold:
                    position = 'long'
                    entry_price = current_price
                    entry_time = current_time
                    print(f"üü¢ –í–•–û–î –í –õ–û–ù–ì: ${entry_price:.0f} ({current_time}) - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.1%}")
            
            # üî∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º (–≤—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞)
            elif position == 'long':
                max_confidence = self.predict_maximum(features)
                current_loss = (entry_price - current_price) / entry_price
                
                # üéØ –£–ú–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ò–°–ö–ê–ú–ò
                current_profit = (current_price - entry_price) / entry_price
                
                # üöÄ –ü–†–ò–û–†–ò–¢–ï–¢: –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç > –ú–∞–∫—Å–∏–º—É–º > –°—Ç–æ–ø-–ª–æ—Å—Å
                should_exit = False
                exit_reason = ""
                
                if current_profit >= self.take_profit:
                    should_exit = True
                    exit_reason = "–¢–ï–ô–ö-–ü–†–û–§–ò–¢"
                elif max_confidence >= self.max_confidence_threshold:
                    should_exit = True
                    exit_reason = "–ú–ê–ö–°–ò–ú–£–ú"
                elif current_loss >= self.stop_loss:
                    should_exit = True
                    exit_reason = "–°–¢–û–ü-–õ–û–°–°"
                
                if should_exit:
                    # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                    profit_pct = (current_price - entry_price) / entry_price
                    profit_pct_after_commission = profit_pct - (2 * self.commission)
                    
                    profit_amount = capital * profit_pct_after_commission
                    capital += profit_amount
                    
                    # üìä –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                    trades.append({
                        'entry_time': entry_time,
                        'exit_time': current_time,
                        'entry_price': entry_price,
                        'exit_price': current_price,
                        'profit_pct': profit_pct_after_commission,
                        'profit_amount': profit_amount,
                        'capital_after': capital,
                        'min_confidence': min_confidence if 'min_confidence' in locals() else 0,
                        'max_confidence': max_confidence
                    })
                    
                    print(f"üî¥ –í–´–•–û–î –ò–ó –õ–û–ù–ì–ê: ${current_price:.0f} ({current_time}) - {exit_reason} - –ü—Ä–∏–±—ã–ª—å: {profit_pct_after_commission:.2%} (${profit_amount:.0f})")
                    
                    position = None
                    entry_price = None
                    entry_time = None
            
            # üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –∫–æ–Ω—Ü–µ
            if i == len(df) - 1 and position == 'long':
                profit_pct = (current_price - entry_price) / entry_price
                profit_pct_after_commission = profit_pct - (2 * self.commission)
                profit_amount = capital * profit_pct_after_commission
                capital += profit_amount
                
                trades.append({
                    'entry_time': entry_time,
                    'exit_time': current_time,
                    'entry_price': entry_price,
                    'exit_price': current_price,
                    'profit_pct': profit_pct_after_commission,
                    'profit_amount': profit_amount,
                    'capital_after': capital,
                    'min_confidence': min_confidence if 'min_confidence' in locals() else 0,
                    'max_confidence': 0
                })
                
                print(f"üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–•–û–î: ${current_price:.0f} - –ü—Ä–∏–±—ã–ª—å: {profit_pct_after_commission:.2%} (${profit_amount:.0f})")
        
        # üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.analyze_results(trades, capital)
        
        return trades
    
    def analyze_results(self, trades, final_capital):
        """üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"\nüí∞ –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 40)
        
        if not trades:
            print("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ")
            return
        
        profitable_trades = [t for t in trades if t['profit_pct'] > 0]
        losing_trades = [t for t in trades if t['profit_pct'] <= 0]
        
        total_profit_pct = (final_capital - self.initial_capital) / self.initial_capital
        
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable_trades)} ({len(profitable_trades)/len(trades)*100:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {len(losing_trades)} ({len(losing_trades)/len(trades)*100:.1f}%)")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit_pct:.2%}")
        print(f"üíµ –ö–∞–ø–∏—Ç–∞–ª: ${self.initial_capital:,.0f} ‚Üí ${final_capital:,.0f}")
        
        if profitable_trades:
            avg_profit = np.mean([t['profit_pct'] for t in profitable_trades])
            best_trade = max(profitable_trades, key=lambda x: x['profit_pct'])
            print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2%}")
            print(f"üöÄ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {best_trade['profit_pct']:.2%}")
        
        if losing_trades:
            avg_loss = np.mean([t['profit_pct'] for t in losing_trades])
            worst_trade = min(losing_trades, key=lambda x: x['profit_pct'])
            print(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2%}")
            print(f"üí• –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {worst_trade['profit_pct']:.2%}")
        
        # üéØ –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if total_profit_pct > 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞!")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–±—ã—Ç–æ—á–Ω–∞")
    
    def run_full_system(self, symbol='BTC/USDT'):
        """üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É: –æ–±—É—á–µ–Ω–∏–µ + —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        print(f"üöÄ –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ML: {symbol}")
        print("=" * 60)
        
        # üéì –≠—Ç–∞–ø 1: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —è–Ω–≤–∞—Ä—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.train_on_january_data(symbol)
        
        # üß™ –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–µ–≤—Ä–∞–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        self.test_on_february_data(symbol)

if __name__ == "__main__":
    system = RealMLSystem()
    system.run_full_system('BTC/USDT')
