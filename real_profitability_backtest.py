#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üí∞ –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢ –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò
=====================================

–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –Ω–∞—à–∏—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤:
- –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
- –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
- –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-01-22
"""

import ccxt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import time
import warnings
warnings.filterwarnings('ignore')

class RealProfitabilityBacktest:
    """üí∞ –†–µ–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        print("üí∞ –†–µ–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance
        self.exchange = ccxt.binance({
            'apiKey': '',
            'secret': '',
            'sandbox': False,
            'enableRateLimit': True,
        })
        
        # üéØ –ù–∞—à–∏ –≤–µ—Å–∞
        self.weights_minimums = {
            'priceVelocity': 0.037,
            'ema20Velocity': 0.031,
            'ema20Angle': 0.217,
            'priceDistance': 0.715
        }
        
        self.weights_maximums = {
            'priceVelocity': 0.715,
            'ema20Velocity': 0.217,
            'ema20Angle': 0.031,
            'priceDistance': 0.037
        }
        
        # üí∞ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.commission = 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
        self.confidence_threshold = 0.25  # 25% –¥–ª—è –º–∏–Ω–∏–º—É–º–æ–≤
        self.max_confidence_threshold = 0.05  # 5% –¥–ª—è –º–∞–∫—Å–∏–º—É–º–æ–≤ (–ï–©–Å –°–ù–ò–ñ–ê–ï–ú!)
        self.stop_loss = 0.05  # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
        self.initial_capital = 10000  # $10,000 –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${self.initial_capital:,}")
        print(f"‚öñÔ∏è –ö–æ–º–∏—Å—Å–∏—è: {self.commission:.1%}")
        print(f"üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {self.confidence_threshold:.1%}")
    
    def get_real_data(self, symbol='BTC/USDT', timeframe='1h', limit=200):
        """üìä –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            print(f"üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ {symbol} ({timeframe})...")
            
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def calculate_features(self, current, previous):
        """üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—à–∏ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è"""
        if previous is None or len(previous) < 2:
            return None
        
        current_price = current['close']
        current_ema20 = current['ema20']
        prev_price = previous['close'].iloc[-1]
        prev_ema20 = previous['ema20'].iloc[-1]
        
        features = {
            'priceVelocity': abs(current_price - prev_price) / prev_price,
            'ema20Velocity': abs(current_ema20 - prev_ema20) / prev_ema20,
            'ema20Angle': abs(np.degrees(np.arctan((current_ema20 - prev_ema20) / prev_ema20))),
            'priceDistance': abs(current_price - current_ema20) / current_ema20
        }
        
        return features
    
    def predict_minimum(self, features):
        """üîª –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º—É–º"""
        if not features:
            return 0.0
        
        weighted_score = 0.0
        for feature, weight in self.weights_minimums.items():
            weighted_score += weight * features[feature]
        
        confidence = min(1.0, weighted_score * 10.0)
        return confidence
    
    def predict_maximum(self, features):
        """üî∫ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º"""
        if not features:
            return 0.0
        
        weighted_score = 0.0
        for feature, weight in self.weights_maximums.items():
            weighted_score += weight * features[feature]
        
        # üöÄ –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ú–ê–ö–°–ò–ú–£–ú–û–í
        confidence = min(1.0, weighted_score * 20.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 10.0 –¥–æ 20.0
        
        # üéØ –ë–û–ù–£–°–´ –î–õ–Ø –ú–ê–ö–°–ò–ú–£–ú–û–í
        if features['priceDistance'] > 0.02:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –¥–∞–ª–µ–∫–æ –æ—Ç EMA20
            confidence += 0.1
        if features['ema20Angle'] > 1.0:  # –ï—Å–ª–∏ —É–≥–æ–ª EMA20 –±–æ–ª—å—à–æ–π
            confidence += 0.1
        
        return min(1.0, confidence)
    
    def run_backtest(self, symbol='BTC/USDT', timeframe='1h'):
        """üí∞ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç"""
        print(f"\nüí∞ –†–ï–ê–õ–¨–ù–´–ô –ë–≠–ö–¢–ï–°–¢: {symbol}")
        print("=" * 60)
        
        # üìä –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = self.get_real_data(symbol, timeframe, limit=200)
        if df is None:
            return
        
        # üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
        capital = self.initial_capital
        position = None
        entry_price = None
        entry_time = None
        trades = []
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df)} —Å–≤–µ—á–µ–π...")
        
        # üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
        for i in range(20, len(df)):
            current = df.iloc[i]
            previous = df.iloc[:i]
            
            # üìä –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = self.calculate_features(current, previous)
            if not features:
                continue
            
            current_price = current['close']
            current_time = current['timestamp']
            
            # üîª –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º (–≤—Ö–æ–¥ –≤ –ª–æ–Ω–≥)
            if position is None:
                min_confidence = self.predict_minimum(features)
                if min_confidence >= self.confidence_threshold:
                    position = 'long'
                    entry_price = current_price
                    entry_time = current_time
                    print(f"üü¢ –í–•–û–î –í –õ–û–ù–ì: ${entry_price:.0f} ({current_time}) - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {min_confidence:.1%}")
            
            # üî∫ –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º (–≤—ã—Ö–æ–¥ –∏–∑ –ª–æ–Ω–≥–∞)
            elif position == 'long':
                max_confidence = self.predict_maximum(features)
                
                # üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
                current_loss = (entry_price - current_price) / entry_price
                
                # üîç –û–¢–õ–ê–î–ö–ê –ú–ê–ö–°–ò–ú–£–ú–û–í
                if i % 20 == 0:  # –ö–∞–∂–¥—ã–µ 20 —Å–≤–µ—á–µ–π
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–≤–µ—á–∞ {i}, –ú–∞–∫—Å. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {max_confidence:.1%}, –ü–æ—Ä–æ–≥: {self.max_confidence_threshold:.1%}, –£–±—ã—Ç–æ–∫: {current_loss:.1%}")
                
                if max_confidence >= self.max_confidence_threshold or current_loss >= self.stop_loss:
                    # üí∞ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                    profit_pct = (current_price - entry_price) / entry_price
                    profit_pct_after_commission = profit_pct - (2 * self.commission)  # –í—Ö–æ–¥ + –≤—ã—Ö–æ–¥
                    
                    profit_amount = capital * profit_pct_after_commission
                    capital += profit_amount
                    
                    trades.append({
                        'entry_time': entry_time,
                        'exit_time': current_time,
                        'entry_price': entry_price,
                        'exit_price': current_price,
                        'profit_pct': profit_pct_after_commission,
                        'profit_amount': profit_amount,
                        'capital_after': capital,
                        'min_confidence': min_confidence if 'min_confidence' in locals() else 0,
                        'max_confidence': max_confidence
                    })
                    
                    exit_reason = "–°–¢–û–ü-–õ–û–°–°" if current_loss >= self.stop_loss else "–ú–ê–ö–°–ò–ú–£–ú"
                    print(f"üî¥ –í–´–•–û–î –ò–ó –õ–û–ù–ì–ê: ${current_price:.0f} ({current_time}) - {exit_reason} - –ü—Ä–∏–±—ã–ª—å: {profit_pct_after_commission:.2%} (${profit_amount:.0f})")
                    
                    position = None
                    entry_price = None
                    entry_time = None
        
        # üö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –∫–æ–Ω—Ü–µ
        if position == 'long':
            final_price = df['close'].iloc[-1]
            profit_pct = (final_price - entry_price) / entry_price
            profit_pct_after_commission = profit_pct - (2 * self.commission)
            profit_amount = capital * profit_pct_after_commission
            capital += profit_amount
            
            trades.append({
                'entry_time': entry_time,
                'exit_time': df['timestamp'].iloc[-1],
                'entry_price': entry_price,
                'exit_price': final_price,
                'profit_pct': profit_pct_after_commission,
                'profit_amount': profit_amount,
                'capital_after': capital,
                'min_confidence': 0,
                'max_confidence': 0
            })
            
            print(f"üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–´–•–û–î: ${final_price:.0f} - –ü—Ä–∏–±—ã–ª—å: {profit_pct_after_commission:.2%} (${profit_amount:.0f})")
        
        # üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_results(trades, capital)
        
        return trades, capital
    
    def analyze_results(self, trades, final_capital):
        """üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        print("\n" + "=" * 60)
        print("üí∞ –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)
        
        if not trades:
            print("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ")
            return
        
        # üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(trades)
        profitable_trades = [t for t in trades if t['profit_pct'] > 0]
        losing_trades = [t for t in trades if t['profit_pct'] < 0]
        
        win_rate = (len(profitable_trades) / total_trades) * 100
        total_profit_pct = ((final_capital - self.initial_capital) / self.initial_capital) * 100
        
        print(f"üéØ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable_trades)} ({win_rate:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {len(losing_trades)} ({100-win_rate:.1f}%)")
        print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit_pct:.2f}%")
        print(f"üíµ –ö–∞–ø–∏—Ç–∞–ª: ${self.initial_capital:,} ‚Üí ${final_capital:,.0f}")
        
        # üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if profitable_trades:
            avg_profit = np.mean([t['profit_pct'] for t in profitable_trades])
            best_trade = max(profitable_trades, key=lambda x: x['profit_pct'])
            print(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f}%")
            print(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {best_trade['profit_pct']:.2f}%")
        
        if losing_trades:
            avg_loss = np.mean([t['profit_pct'] for t in losing_trades])
            worst_trade = min(losing_trades, key=lambda x: x['profit_pct'])
            print(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2f}%")
            print(f"üí• –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {worst_trade['profit_pct']:.2f}%")
        
        # üìä –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        avg_min_confidence = np.mean([t['min_confidence'] for t in trades if t['min_confidence'] > 0])
        avg_max_confidence = np.mean([t['max_confidence'] for t in trades if t['max_confidence'] > 0])
        
        print(f"üîª –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {avg_min_confidence:.1f}%")
        print(f"üî∫ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {avg_max_confidence:.1f}%")
        
        # üìä –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        if total_profit_pct > 10:
            print("üèÜ –°–ò–°–¢–ï–ú–ê –í–´–°–û–ö–û–ü–†–ò–ë–´–õ–¨–ù–ê!")
        elif total_profit_pct > 5:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞!")
        elif total_profit_pct > 0:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–ª–∞–±–æ–ø—Ä–∏–±—ã–ª—å–Ω–∞")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —É–±—ã—Ç–æ—á–Ω–∞")
    
    def test_multiple_symbols(self, symbols=['BTC/USDT', 'ETH/USDT', 'SOL/USDT']):
        """üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤"""
        print(f"\nüß™ –ë–≠–ö–¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–ò–ú–í–û–õ–û–í")
        print("=" * 60)
        
        results = {}
        
        for symbol in symbols:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol}...")
            trades, final_capital = self.run_backtest(symbol)
            
            if trades:
                total_profit = ((final_capital - self.initial_capital) / self.initial_capital) * 100
                results[symbol] = {
                    'trades': len(trades),
                    'profit_pct': total_profit,
                    'final_capital': final_capital
                }
            else:
                results[symbol] = {
                    'trades': 0,
                    'profit_pct': 0,
                    'final_capital': self.initial_capital
                }
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò")
        print("=" * 60)
        
        total_profit = 0
        for symbol, result in results.items():
            print(f"{symbol}: {result['trades']} —Å–¥–µ–ª–æ–∫, {result['profit_pct']:.2f}% –ø—Ä–∏–±—ã–ª—å")
            total_profit += result['profit_pct']
        
        avg_profit = total_profit / len(symbols)
        print(f"\nüìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å: {avg_profit:.2f}%")
        
        if avg_profit > 5:
            print("üèÜ –°–ò–°–¢–ï–ú–ê –í–°–ï–ì–û –í–´–°–û–ö–û–ü–†–ò–ë–´–õ–¨–ù–ê!")
        elif avg_profit > 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º –ø—Ä–∏–±—ã–ª—å–Ω–∞!")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤ —Ü–µ–ª–æ–º —É–±—ã—Ç–æ—á–Ω–∞")

if __name__ == "__main__":
    backtest = RealProfitabilityBacktest()
    
    # üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
    # backtest.run_backtest('BTC/USDT', '1h')
    
    # üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤
    backtest.test_multiple_symbols()
