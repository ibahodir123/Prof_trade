#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ML –±–æ—Ç —Å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç—å—é –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
"""
import asyncio
import logging
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞
from ml_bot_binance import (
    load_config, get_binance_data, prepare_ml_features,
    calculate_dynamic_percentages, create_advanced_trading_chart
)

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
from neural_network_predictor import ShootingStarPredictor
from data_collector import HistoricalDataCollector

# Telegram bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ShootingStarBot:
    """–ë–æ—Ç —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç"""
    
    def __init__(self):
        self.config = load_config()
        self.current_coin = "BTC/USDT"
        self.predictor = ShootingStarPredictor()
        self.data_collector = HistoricalDataCollector()
        self.shooting_stars_cache = {}
        self.last_update = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.load_predictor_model()
    
    def load_predictor_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            if self.predictor.load_model():
                logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="menu_status")],
            [InlineKeyboardButton("ü™ô –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç", callback_data="menu_coins")],
            [InlineKeyboardButton("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_signals")],
            [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="menu_analyze")],
            [InlineKeyboardButton("üöÄ –°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã", callback_data="menu_shooting_stars")],
            [InlineKeyboardButton("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", callback_data="menu_training")],
            [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ —Å–∏–≥–Ω–∞–ª—ã", callback_data="menu_auto")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"""ü§ñ **Shooting Star Trading Bot**

ü™ô **–¢–µ–∫—É—â–∞—è –º–æ–Ω–µ—Ç–∞:** {self.current_coin}
üß† **–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:** {'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' if self.predictor.is_trained else '‚ùå –ù–µ –æ–±—É—á–µ–Ω–∞'}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/analyze` - –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ `/shooting_stars` - –ù–∞–π—Ç–∏ —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã
‚Ä¢ `/train_model` - –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å
‚Ä¢ `/collect_data` - –°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
        
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def shooting_stars_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç"""
        if not self.predictor.is_trained:
            await update.message.reply_text(
                "‚ùå **–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ:\n"
                "`/train_model` - –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å\n"
                "`/collect_data` - —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_text("üîç –ò—â—É —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            coins = self.get_popular_coins()[:20]  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-20
            
            shooting_stars = []
            
            for coin in coins:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = get_binance_data(coin, timeframe='1h', limit=500)
                    if df is None or df.empty:
                        continue
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                    df = self.add_technical_indicators(df)
                    
                    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                    prediction = self.predictor.predict(df)
                    
                    if prediction and prediction['shooting_star_probability'] > 0.3:
                        shooting_stars.append({
                            'coin': coin,
                            'probability': prediction['shooting_star_probability'],
                            'class': prediction['predicted_class'],
                            'confidence': prediction['confidence'],
                            'high_growth_prob': prediction['high_growth_probability']
                        })
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {coin}: {e}")
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            shooting_stars.sort(key=lambda x: x['probability'], reverse=True)
            
            if shooting_stars:
                message = "üöÄ **–°–¢–†–ï–õ–Ø–Æ–©–ò–ï –ú–û–ù–ï–¢–´** (—Å–ª–µ–¥—É—é—â–∏–µ 24 —á–∞—Å–∞)\n\n"
                
                for i, star in enumerate(shooting_stars[:5], 1):
                    message += f"**{i}. {star['coin']}**\n"
                    message += f"   üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {star['probability']:.1%}\n"
                    message += f"   üìà –ö–ª–∞—Å—Å: {star['class']}\n"
                    message += f"   üî• –í—ã—Å–æ–∫–∏–π —Ä–æ—Å—Ç: {star['high_growth_prob']:.1%}\n"
                    message += f"   ‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {star['confidence']:.1%}\n\n"
                
                message += "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:** –≠—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –ò–ò. –¢–æ—Ä–≥—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                keyboard = []
                for star in shooting_stars[:3]:
                    keyboard.append([InlineKeyboardButton(
                        f"üìä –ê–Ω–∞–ª–∏–∑ {star['coin']}", 
                        callback_data=f"analyze_shooting_{star['coin']}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')
            else:
                await update.message.reply_text(
                    "üò¥ **–°—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ**\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–¥–µ–ª—å –Ω–µ –≤–∏–¥–∏—Ç –º–æ–Ω–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —Ä–æ—Å—Ç–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞.",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç")
    
    async def train_model_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        await update.message.reply_text(
            "üß† **–û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò**\n\n"
            "–î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ:\n"
            "1. üìä –°–æ–±—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "2. üß† –û–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å\n"
            "3. ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç!\n\n"
            "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="collect_data")],
                [InlineKeyboardButton("üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="train_neural_network")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]),
            parse_mode='Markdown'
        )
    
    async def collect_data_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        await update.message.reply_text(
            "üìä **–°–ë–û–† –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•**\n\n"
            "–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç —Å 1 —è–Ω–≤–∞—Ä—è 2025 –≥–æ–¥–∞...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-20 –º–∏–Ω—É—Ç.\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.collect_data_background(update))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def collect_data_background(self, update: Update):
        """–§–æ–Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ)
            data = self.data_collector.collect_all_data(max_pairs=30)
            
            if data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                self.data_collector.save_data(data, "historical_data.json")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total_records = sum(len(df) for df in data.values())
                shooting_stars = sum(
                    df['is_shooting_star'].sum() 
                    for df in data.values() 
                    if 'is_shooting_star' in df.columns
                )
                
                message = f"""‚úÖ **–î–ê–ù–ù–´–ï –°–û–ë–†–ê–ù–´ –£–°–ü–ï–®–ù–û!**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ú–æ–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data)}
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records:,}
‚Ä¢ –°—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {shooting_stars:,}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö: {(shooting_stars/total_records*100):.2f}%

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—É—á–∞—Ç—å –º–æ–¥–µ–ª—å!"""
                
                await update.message.reply_text(
                    message,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="train_neural_network")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def train_neural_network_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üß† **–û–ë–£–ß–ï–ù–ò–ï –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò**\n\n"
            "–û–±—É—á–∞—é –º–æ–¥–µ–ª—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç.\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        )
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.train_model_background(query))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
    
    async def train_model_background(self, query):
        """–§–æ–Ω–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self.data_collector.load_data("historical_data.json")
            
            if not data:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            success = self.predictor.train(data)
            
            if success:
                await query.edit_message_text(
                    "‚úÖ **–ú–û–î–ï–õ–¨ –û–ë–£–ß–ï–ù–ê –£–°–ü–ï–®–ù–û!**\n\n"
                    "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã!\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/shooting_stars`",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üöÄ –ù–∞–π—Ç–∏ —Å—Ç—Ä–µ–ª—è—é—â–∏–µ", callback_data="menu_shooting_stars")],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ]),
                    parse_mode='Markdown'
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏")
    
    def add_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º"""
        try:
            # EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # RSI
            delta = df['close'].diff()
            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
            rs = gain / loss
            df['rsi'] = 100 - (100 / (1 + rs))
            
            # Bollinger Bands
            df['bb_middle'] = df['close'].rolling(window=20).mean()
            bb_std = df['close'].rolling(window=20).std()
            df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
            df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
            
            # MACD
            exp1 = df['close'].ewm(span=12).mean()
            exp2 = df['close'].ewm(span=26).mean()
            df['macd'] = exp1 - exp2
            df['macd_signal'] = df['macd'].ewm(span=9).mean()
            df['macd_histogram'] = df['macd'] - df['macd_signal']
            
            # Volume
            df['volume_ma'] = df['volume'].rolling(window=20).mean()
            df['volume_ratio'] = df['volume'] / df['volume_ma']
            
            # Volatility
            df['volatility'] = df['close'].rolling(window=24).std()
            
            return df.dropna()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def get_popular_coins(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç"""
        return [
            "BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT", "SOL/USDT",
            "XRP/USDT", "DOT/USDT", "AVAX/USDT", "MATIC/USDT", "LINK/USDT",
            "UNI/USDT", "LTC/USDT", "ATOM/USDT", "NEAR/USDT", "ALGO/USDT",
            "VET/USDT", "FIL/USDT", "TRX/USDT", "ETC/USDT", "XLM/USDT"
        ]
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "menu_shooting_stars":
            await self.shooting_stars_command(query)
        elif data == "menu_training":
            await self.train_model_command(query)
        elif data == "collect_data":
            await self.collect_data_command(query)
        elif data == "train_neural_network":
            await self.train_neural_network_callback(update, context)
        elif data == "back_to_main":
            await self.start_command(query, context)
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        application = Application.builder().token(self.config['telegram_token']).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("shooting_stars", self.shooting_stars_command))
        application.add_handler(CommandHandler("train_model", self.train_model_command))
        application.add_handler(CommandHandler("collect_data", self.collect_data_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Shooting Star Bot...")
        application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = ShootingStarBot()
    bot.run()

if __name__ == "__main__":
    main()


