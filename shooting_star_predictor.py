#!/usr/bin/env python3
"""
–ü—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –æ–Ω–∏ "–≤—ã—Å—Ç—Ä–µ–ª—è—Ç" (—Ä–µ–∑–∫–æ –≤—ã—Ä–∞—Å—Ç—É—Ç)
"""

import pandas as pd
import numpy as np
import ccxt
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class ShootingStarPredictor:
    def __init__(self):
        self.exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
        })
        
    def get_binance_data(self, symbol: str, timeframe: str = '1h', limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            return df.dropna()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None
    
    def analyze_shooting_potential(self, symbol: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–æ–Ω–µ—Ç—ã –¥–ª—è "–≤—ã—Å—Ç—Ä–µ–ª–∞" """
        try:
            df = self.get_binance_data(symbol, '1h', 100)
            if df is None or len(df) < 50:
                return None
            
            current_price = df['close'].iloc[-1]
            
            # –†–∞—Å—á–µ—Ç EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            
            ema20 = df['ema_20'].iloc[-1]
            ema50 = df['ema_50'].iloc[-1]
            
            # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (–±–æ–∫–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ)
            recent_high = df['high'].iloc[-10:].max()
            recent_low = df['low'].iloc[-10:].min()
            consolidation_range = (recent_high - recent_low) / current_price
            
            # 2. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            avg_volume = df['volume'].iloc[-20:].mean()
            recent_volume = df['volume'].iloc[-3:].mean()
            volume_ratio = recent_volume / avg_volume if avg_volume > 0 else 1
            
            # 3. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = df['close'].iloc[-10:].std() / df['close'].iloc[-10:].mean()
            
            # 4. –ê–Ω–∞–ª–∏–∑ EMA —Å–±–ª–∏–∂–µ–Ω–∏—è
            ema_distance = abs(ema20 - ema50) / current_price
            
            # 5. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            support_strength = (current_price - recent_low) / (recent_high - recent_low)
            
            # 6. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
            price_change_5 = (current_price - df['close'].iloc[-5]) / df['close'].iloc[-5]
            price_change_10 = (current_price - df['close'].iloc[-10]) / df['close'].iloc[-10]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å "–≤—ã—Å—Ç—Ä–µ–ª–∞"
            probability = 0.0
            conditions = []
            
            # –ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞
            if consolidation_range < 0.05:  # –£–∑–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
                probability += 0.2
                conditions.append("‚úÖ –£–∑–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è")
            else:
                conditions.append(f"‚ùå –®–∏—Ä–æ–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è ({consolidation_range:.3f})")
            
            if volume_ratio < 0.8:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                probability += 0.2
                conditions.append("‚úÖ –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º")
            else:
                conditions.append(f"‚ùå –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º ({volume_ratio:.2f})")
            
            if volatility < 0.03:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                probability += 0.2
                conditions.append("‚úÖ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
            else:
                conditions.append(f"‚ùå –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å ({volatility:.3f})")
            
            if ema_distance < 0.02:  # EMA –±–ª–∏–∑–∫–æ
                probability += 0.2
                conditions.append("‚úÖ EMA —Å–±–ª–∏–∂–µ–Ω—ã")
            else:
                conditions.append(f"‚ùå EMA –¥–∞–ª–µ–∫–æ ({ema_distance:.3f})")
            
            if support_strength > 0.3:  # –•–æ—Ä–æ—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                probability += 0.2
                conditions.append("‚úÖ –°–∏–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
            else:
                conditions.append(f"‚ùå –°–ª–∞–±–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ({support_strength:.2f})")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            if price_change_5 > -0.02:  # –ù–µ –ø–∞–¥–∞–µ—Ç —Å–∏–ª—å–Ω–æ
                probability += 0.1
                conditions.append("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
            
            if current_price > ema20 > ema50:  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
                probability += 0.1
                conditions.append("‚úÖ –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            probability = min(1.0, probability)
            
            return {
                'symbol': symbol,
                'current_price': current_price,
                'probability': probability,
                'conditions': conditions,
                'consolidation_range': consolidation_range,
                'volume_ratio': volume_ratio,
                'volatility': volatility,
                'ema_distance': ema_distance,
                'support_strength': support_strength,
                'predicted_change': f"+{probability*50:.0f}%"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None
    
    def find_shooting_stars(self, symbols: List[str], min_probability: float = 0.4) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –º–æ–Ω–µ—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –≤—ã—Å—Ç—Ä–µ–ª–∞"""
        shooting_stars = []
        
        for symbol in symbols:
            try:
                result = self.analyze_shooting_potential(symbol)
                if result and result['probability'] >= min_probability:
                    shooting_stars.append(result)
                    logger.info(f"üöÄ {symbol}: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Å—Ç—Ä–µ–ª–∞ {result['probability']:.2f}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        shooting_stars.sort(key=lambda x: x['probability'], reverse=True)
        return shooting_stars
    
    def get_available_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö USDT –ø–∞—Ä"""
        try:
            markets = self.exchange.load_markets()
            usdt_pairs = []
            for symbol, market in markets.items():
                if market['quote'] == 'USDT' and market['active']:
                    usdt_pairs.append(symbol)
            return sorted(usdt_pairs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä: {e}")
            return []

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    predictor = ShootingStarPredictor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç
    symbols = predictor.get_available_pairs()[:20]  # –ü–µ—Ä–≤—ã–µ 20 –º–æ–Ω–µ—Ç
    
    # –ò—â–µ–º —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –∑–≤–µ–∑–¥—ã
    shooting_stars = predictor.find_shooting_stars(symbols)
    
    print(f"\nüöÄ –ù–∞–π–¥–µ–Ω–æ {len(shooting_stars)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –∑–≤–µ–∑–¥:")
    for star in shooting_stars:
        print(f"\n{star['symbol']} - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {star['probability']:.2f}")
        print(f"–¶–µ–Ω–∞: ${star['current_price']:.6f}")
        print("–£—Å–ª–æ–≤–∏—è:")
        for condition in star['conditions']:
            print(f"  {condition}")
