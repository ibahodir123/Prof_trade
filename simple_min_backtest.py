#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–æ–π –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–æ–≤
–û–±—É—á–µ–Ω–∏–µ: —è–Ω–≤–∞—Ä—å 2025
–¢–µ—Å—Ç: —Ñ–µ–≤—Ä–∞–ª—å 2025
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import pickle
from typing import Dict, Any
import warnings
warnings.filterwarnings('ignore')

class SimpleMinimumBacktest:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        self.model = None
        self.feature_names = None
        self.feature_weights = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.initial_balance = 1000.0
        self.current_balance = self.initial_balance
        self.position_size_percent = 0.2  # 20% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        self.max_positions = 2
        
        self.trades = []
        self.positions = {}
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã TP/SL
        self.take_profit_percent = 5.0  # 5% –ø—Ä–∏–±—ã–ª–∏
        self.stop_loss_percent = 2.0    # 2% —É–±—ã—Ç–∫–∞
        
    def load_model(self, model_filename: str = "minimum_detector_model.pkl") -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            print(f"üß† –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å {model_filename}")
            
            with open(model_filename, 'rb') as f:
                self.model = pickle.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_filename = model_filename.replace('.pkl', '_metadata.json')
            with open(metadata_filename, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            self.feature_names = metadata['feature_names']
            self.feature_weights = metadata['feature_weights']
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"üìä –ü—Ä–∏–∑–Ω–∞–∫–∏: {', '.join(self.feature_names)}")
            print(f"‚öñÔ∏è –í–µ—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def get_test_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ {symbol}")
            exchange = ccxt.binance()
            since = int(start_date.timestamp() * 1000)
            end_ts = int(end_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    filtered_ohlcv = [candle for candle in ohlcv if candle[0] <= end_ts]
                    all_ohlcv.extend(filtered_ohlcv)
                    
                    if not ohlcv:
                        break
                        
                    current_since = ohlcv[-1][0] + 1
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            seen = set()
            unique_ohlcv = []
            for candle in all_ohlcv:
                if candle[0] not in seen:
                    seen.add(candle[0])
                    unique_ohlcv.append(candle)
            
            df = pd.DataFrame(unique_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            df = df.sort_index()
            
            print(f"   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_4_criteria(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–µ)"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            # 1. –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
            df['price_velocity'] = df['close'].pct_change() * 100
            
            # 2. –°–∫–æ—Ä–æ—Å—Ç—å EMA20
            df['ema20_velocity'] = df['ema20'].pct_change() * 100
            
            # 3. –£–≥–æ–ª EMA20
            df['ema20_angle'] = ((df['ema20'] / df['ema20'].shift(10)) - 1) * 100
            
            # 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω–∞-EMA20
            df['distance_to_ema20'] = ((df['close'] - df['ema20']) / df['ema20']) * 100
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return df
    
    def predict_minimum(self, criteria_values: dict) -> Dict[str, Any]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_vector = []
            for name in self.feature_names:
                value = criteria_values.get(name, 0.0)
                if np.isnan(value) or np.isinf(value):
                    value = 0.0
                feature_vector.append(value)
            
            feature_vector = np.array(feature_vector).reshape(1, -1)
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.model.predict(feature_vector)[0]
            probabilities = self.model.predict_proba(feature_vector)[0]
            
            return {
                'is_minimum': bool(prediction),
                'probability': float(probabilities[1]),
                'criteria': criteria_values
            }
            
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}'}
    
    def analyze_signal(self, symbol: str, df: pd.DataFrame, current_idx: int) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç"""
        try:
            # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            if current_idx < 20:
                return {'signal': 'WAIT', 'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}
            
            # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            historical_data = df.iloc[:current_idx + 1].copy()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
            historical_data = self.calculate_4_criteria(historical_data)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            current_data = historical_data.iloc[-1]
            
            criteria = {
                'price_velocity': current_data['price_velocity'],
                'ema20_velocity': current_data['ema20_velocity'],
                'ema20_angle': current_data['ema20_angle'], 
                'distance_to_ema20': current_data['distance_to_ema20']
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if any(pd.isna(value) for value in criteria.values()):
                return {'signal': 'WAIT', 'reason': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞
            prediction = self.predict_minimum(criteria)
            
            if 'error' in prediction:
                return {'signal': 'WAIT', 'reason': prediction['error']}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = 'WAIT'
            confidence = prediction['probability']
            
            # –£—Å–ª–æ–≤–∏—è –¥–ª—è LONG —Å–∏–≥–Ω–∞–ª–∞:
            # 1. –ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º—É–º
            # 2. –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20 (–ø–∞–¥–µ–Ω–∏–µ)
            # 3. –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (>60%)
            if (prediction['is_minimum'] and 
                criteria['distance_to_ema20'] < -1.0 and  # –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20 –º–∏–Ω–∏–º—É–º –Ω–∞ 1%
                confidence > 0.6):
                signal = 'LONG'
            
            return {
                'signal': signal,
                'confidence': confidence,
                'price': float(current_data['close']),
                'criteria': criteria,
                'prediction': prediction
            }
            
        except Exception as e:
            return {'signal': 'WAIT', 'reason': f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}'}
    
    def run_backtest(self, start_date: datetime, end_date: datetime) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        print(f"\\nüß™ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
        print("=" * 50)
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.current_balance = self.initial_balance
        self.trades = []
        self.positions = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signals_stats = {
            'total_analyzed': 0,
            'long_signals': 0,
            'wait_signals': 0,
            'positions_opened': 0,
            'positions_closed': 0
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        all_data = {}
        for symbol in self.symbols:
            df = self.get_test_data(symbol, start_date, end_date)
            if not df.empty:
                all_data[symbol] = df
            time.sleep(1)
        
        if not all_data:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'}
        
        # –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        all_timestamps = set()
        for df in all_data.values():
            all_timestamps.update(df.index)
        timestamps = sorted(list(all_timestamps))
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(timestamps)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∞
        for i, timestamp in enumerate(timestamps):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if i % 100 == 0:
                progress = (i / len(timestamps)) * 100
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –ë–∞–ª–∞–Ω—Å: ${self.current_balance:.2f} | –ü–æ–∑–∏—Ü–∏–π: {len(self.positions)}")
            
            for symbol, df in all_data.items():
                if timestamp not in df.index:
                    continue
                
                current_price = float(df.loc[timestamp, 'close'])
                current_idx = df.index.get_loc(timestamp)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
                if symbol in self.positions:
                    position = self.positions[symbol]
                    should_close = False
                    close_reason = ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TP/SL
                    if current_price >= position['take_profit']:
                        should_close = True
                        close_reason = "Take Profit"
                    elif current_price <= position['stop_loss']:
                        should_close = True
                        close_reason = "Stop Loss"
                    
                    if should_close:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        pnl = (current_price - position['entry_price']) * position['size']
                        self.current_balance += pnl
                        
                        pnl_percent = (pnl / (position['entry_price'] * position['size'])) * 100
                        
                        trade = {
                            'symbol': symbol,
                            'entry_time': position['entry_time'],
                            'exit_time': timestamp,
                            'entry_price': position['entry_price'],
                            'exit_price': current_price,
                            'size': position['size'],
                            'pnl': pnl,
                            'pnl_percent': pnl_percent,
                            'close_reason': close_reason
                        }
                        
                        self.trades.append(trade)
                        del self.positions[symbol]
                        signals_stats['positions_closed'] += 1
                
                # –ò—â–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                if symbol not in self.positions and len(self.positions) < self.max_positions:
                    signal_data = self.analyze_signal(symbol, df, current_idx)
                    signals_stats['total_analyzed'] += 1
                    
                    if signal_data['signal'] == 'LONG':
                        signals_stats['long_signals'] += 1
                        
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        position_value = self.current_balance * self.position_size_percent
                        size = position_value / current_price
                        
                        take_profit = current_price * (1 + self.take_profit_percent / 100)
                        stop_loss = current_price * (1 - self.stop_loss_percent / 100)
                        
                        self.positions[symbol] = {
                            'entry_time': timestamp,
                            'entry_price': current_price,
                            'size': size,
                            'take_profit': take_profit,
                            'stop_loss': stop_loss,
                            'confidence': signal_data['confidence']
                        }
                        
                        signals_stats['positions_opened'] += 1
                        
                    else:
                        signals_stats['wait_signals'] += 1
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
        for symbol in list(self.positions.keys()):
            if symbol in all_data:
                last_price = float(all_data[symbol].iloc[-1]['close'])
                position = self.positions[symbol]
                
                pnl = (last_price - position['entry_price']) * position['size']
                self.current_balance += pnl
                pnl_percent = (pnl / (position['entry_price'] * position['size'])) * 100
                
                trade = {
                    'symbol': symbol,
                    'entry_time': position['entry_time'],
                    'exit_time': timestamps[-1],
                    'entry_price': position['entry_price'],
                    'exit_price': last_price,
                    'size': position['size'],
                    'pnl': pnl,
                    'pnl_percent': pnl_percent,
                    'close_reason': 'End of period'
                }
                
                self.trades.append(trade)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return self.calculate_results(signals_stats)
    
    def calculate_results(self, signals_stats: dict) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.trades:
            return {
                'error': '–°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ',
                'signals_stats': signals_stats
            }
        
        total_trades = len(self.trades)
        winning_trades = len([t for t in self.trades if t['pnl'] > 0])
        win_rate = (winning_trades / total_trades) * 100
        total_return = ((self.current_balance - self.initial_balance) / self.initial_balance) * 100
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_stats = {}
        for trade in self.trades:
            symbol = trade['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'trades': 0, 'pnl': 0, 'wins': 0}
            symbol_stats[symbol]['trades'] += 1
            symbol_stats[symbol]['pnl'] += trade['pnl']
            if trade['pnl'] > 0:
                symbol_stats[symbol]['wins'] += 1
        
        return {
            'total_trades': total_trades,
            'winning_trades': winning_trades,
            'losing_trades': total_trades - winning_trades,
            'win_rate': win_rate,
            'initial_balance': self.initial_balance,
            'final_balance': self.current_balance,
            'total_return': total_return,
            'total_pnl': self.current_balance - self.initial_balance,
            'trades': self.trades,
            'signals_stats': signals_stats,
            'symbol_stats': symbol_stats
        }
    
    def print_results(self, results: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if 'error' in results:
            print(f"\\n‚ùå {results['error']}")
            if 'signals_stats' in results:
                stats = results['signals_stats']
                print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
                print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_analyzed']}")
                print(f"   LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['long_signals']}")
                print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {stats['positions_opened']}")
            return
        
        print(f"\\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê")
        print("=" * 40)
        print(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${results['initial_balance']:,.2f}")
        print(f"üíµ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${results['final_balance']:,.2f}")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return']:+.2f}%")
        print(f"üí∏ P&L: ${results['total_pnl']:+,.2f}")
        print()
        print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['total_trades']}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {results['winning_trades']} ({results['win_rate']:.1f}%)")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {results['losing_trades']} ({100-results['win_rate']:.1f}%)")
        
        print(f"\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        stats = results['signals_stats']
        print(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {stats['total_analyzed']}")
        print(f"   LONG —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['long_signals']}")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –æ—Ç–∫—Ä—ã—Ç–æ: {stats['positions_opened']}")
        print(f"   –ü–æ–∑–∏—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–æ: {stats['positions_closed']}")
        
        if results['symbol_stats']:
            print(f"\\nüèÜ –ü–æ —Å–∏–º–≤–æ–ª–∞–º:")
            for symbol, stats in results['symbol_stats'].items():
                wr = (stats['wins'] / stats['trades']) * 100 if stats['trades'] > 0 else 0
                print(f"   {symbol}: {stats['trades']} —Å–¥–µ–ª–æ–∫, ${stats['pnl']:+.2f}, WR: {wr:.1f}%")

if __name__ == "__main__":
    backtest = SimpleMinimumBacktest()
    
    print("üß™ –ü–†–û–°–¢–û–ô –ë–≠–ö–¢–ï–°–¢ –î–ï–¢–ï–ö–¢–û–†–ê –ú–ò–ù–ò–ú–£–ú–û–í")
    print("üéØ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –Ω–∞ —è–Ω–≤–∞—Ä–µ, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ñ–µ–≤—Ä–∞–ª–µ")
    print("=" * 55)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if backtest.load_model():
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ñ–µ–≤—Ä–∞–ª–µ 2025
        start_date = datetime(2025, 2, 1)
        end_date = datetime(2025, 2, 28, 23, 59, 59)
        
        results = backtest.run_backtest(start_date, end_date)
        backtest.print_results(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('minimum_backtest_results.json', 'w', encoding='utf-8') as f:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è JSON
            results_copy = results.copy()
            if 'trades' in results_copy:
                for trade in results_copy['trades']:
                    if 'entry_time' in trade:
                        trade['entry_time'] = trade['entry_time'].isoformat()
                    if 'exit_time' in trade:
                        trade['exit_time'] = trade['exit_time'].isoformat()
            
            json.dump(results_copy, f, ensure_ascii=False, indent=2)
        
        print(f"\\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ minimum_backtest_results.json")
        
    else:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. simple_min_detector.py (—Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö)")
        print("2. weighted_ml_trainer.py (–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏)")






