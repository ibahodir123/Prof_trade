#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –º–∏–Ω–∏–º—É–º–æ–≤ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π
–¢–æ–ª—å–∫–æ 4 –∫—Ä–∏—Ç–µ—Ä–∏—è —Å EMA20:
1. –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
2. –°–∫–æ—Ä–æ—Å—Ç—å EMA20  
3. –£–≥–æ–ª EMA20
4. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω–∞-EMA20
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import warnings
warnings.filterwarnings('ignore')

class SimpleMinDetector:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        self.minimums_database = []
        
    def get_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é {symbol} —Å {start_date.date()} –ø–æ {end_date.date()}")
            exchange = ccxt.binance()
            since = int(start_date.timestamp() * 1000)
            end_ts = int(end_date.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
                    filtered_ohlcv = [candle for candle in ohlcv if candle[0] <= end_ts]
                    all_ohlcv.extend(filtered_ohlcv)
                    
                    if not ohlcv:
                        break
                        
                    current_since = ohlcv[-1][0] + 1
                    time.sleep(0.1)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            seen = set()
            unique_ohlcv = []
            for candle in all_ohlcv:
                if candle[0] not in seen:
                    seen.add(candle[0])
                    unique_ohlcv.append(candle)
            
            df = pd.DataFrame(unique_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            df = df.sort_index()
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_4_criteria(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Å EMA20"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            # 1. –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å –≤ %)
            df['price_velocity'] = df['close'].pct_change() * 100
            
            # 2. –°–∫–æ—Ä–æ—Å—Ç—å EMA20 (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å –≤ %)
            df['ema20_velocity'] = df['ema20'].pct_change() * 100
            
            # 3. –£–≥–æ–ª EMA20 (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 10 —á–∞—Å–æ–≤ –≤ %)
            df['ema20_angle'] = ((df['ema20'] / df['ema20'].shift(10)) - 1) * 100
            
            # 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ü–µ–Ω–∞-EMA20 (–≤ %)
            df['distance_to_ema20'] = ((df['close'] - df['ema20']) / df['ema20']) * 100
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return df
    
    def find_local_minimums(self, df: pd.DataFrame, lookback: int = 12) -> list:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤"""
        minimums = []
        
        for i in range(lookback, len(df) - lookback):
            current_low = df.iloc[i]['low']
            is_minimum = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–∞–º–∞—è –Ω–∏–∑–∫–∞—è —Ç–æ—á–∫–∞ –≤ –æ–∫–Ω–µ
            for j in range(i - lookback, i + lookback + 1):
                if j != i and df.iloc[j]['low'] <= current_low:
                    is_minimum = False
                    break
            
            if is_minimum:
                minimums.append(i)
        
        return minimums
    
    def analyze_minimum(self, df: pd.DataFrame, min_idx: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑ –º–∏–Ω–∏–º—É–º–∞ –∏ –∏–º–ø—É–ª—å—Å–∞ –ø–µ—Ä–µ–¥ –Ω–∏–º"""
        try:
            min_time = df.index[min_idx]
            min_price = df.iloc[min_idx]['low']
            
            # –ò—â–µ–º –Ω–∞—á–∞–ª–æ –∏–º–ø—É–ª—å—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–¥ –º–∏–Ω–∏–º—É–º–æ–º)
            impulse_start_idx = min_idx
            max_price = min_price
            
            # –ò—â–µ–º –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö 48 —á–∞—Å–∞—Ö
            for i in range(max(0, min_idx - 48), min_idx):
                if df.iloc[i]['high'] > max_price:
                    max_price = df.iloc[i]['high']
                    impulse_start_idx = i
            
            # –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–¥–µ–Ω–∏—è
            fall_percent = ((min_price - max_price) / max_price) * 100
            
            # –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞–¥–µ–Ω–∏—è (–±–æ–ª—å—à–µ 2%)
            if fall_percent > -2:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤ –º–æ–º–µ–Ω—Ç –º–∏–Ω–∏–º—É–º–∞
            min_data = df.iloc[min_idx]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
            if pd.isna(min_data['ema20']) or pd.isna(min_data['price_velocity']):
                return None
            
            criteria = {
                'price_velocity': min_data['price_velocity'],
                'ema20_velocity': min_data['ema20_velocity'], 
                'ema20_angle': min_data['ema20_angle'],
                'distance_to_ema20': min_data['distance_to_ema20']
            }
            
            # –£–±–∏—Ä–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
            for key, value in criteria.items():
                if pd.isna(value) or np.isinf(value):
                    criteria[key] = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –Ω–∏–∂–µ EMA20 (–ø—Ä–∏–∑–Ω–∞–∫ –ø–∞–¥–µ–Ω–∏—è)
            if criteria['distance_to_ema20'] > 0:
                return None
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –ø–æ—Å–ª–µ –º–∏–Ω–∏–º—É–º–∞ (–ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å)
            future_profit = 0
            if min_idx + 24 < len(df):
                future_max = df.iloc[min_idx:min_idx+24]['high'].max()
                future_profit = ((future_max - min_price) / min_price) * 100
            
            minimum_data = {
                'symbol': None,  # –ó–∞–ø–æ–ª–Ω–∏–º –ø–æ–∑–∂–µ
                'time': min_time,
                'price': min_price,
                'fall_percent': fall_percent,
                'impulse_duration': min_idx - impulse_start_idx,
                'criteria': criteria,
                'future_profit_24h': future_profit,
                'is_profitable': future_profit > 2.0  # –ú–∏–Ω–∏–º—É–º 2% –ø—Ä–∏–±—ã–ª–∏
            }
            
            return minimum_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–∏–Ω–∏–º—É–º–∞: {e}")
            return None
    
    def find_minimums_in_symbol(self, symbol: str, start_date: datetime, end_date: datetime):
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –≤ —Å–∏–º–≤–æ–ª–µ"""
        print(f"\\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∏–Ω–∏–º—É–º—ã –≤ {symbol}")
        
        df = self.get_data(symbol, start_date, end_date)
        if df.empty:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏
        df = self.calculate_4_criteria(df)
        
        # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
        minimum_indices = self.find_local_minimums(df)
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(minimum_indices)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∏–Ω–∏–º—É–º
        valid_minimums = 0
        for min_idx in minimum_indices:
            minimum_data = self.analyze_minimum(df, min_idx)
            if minimum_data:
                minimum_data['symbol'] = symbol
                self.minimums_database.append(minimum_data)
                valid_minimums += 1
        
        print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {valid_minimums} –≤–∞–ª–∏–¥–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤")
    
    def collect_minimums(self, start_date: datetime, end_date: datetime):
        """–°–±–æ—Ä –≤—Å–µ—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º"""
        print("üîç –°–ë–û–† –ú–ò–ù–ò–ú–£–ú–û–í –î–õ–Ø LONG –ü–û–ó–ò–¶–ò–ô")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
        print("=" * 50)
        
        self.minimums_database = []
        
        for symbol in self.symbols:
            try:
                self.find_minimums_in_symbol(symbol, start_date, end_date)
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(start_date, end_date)
        self.print_statistics()
    
    def save_results(self, start_date: datetime, end_date: datetime):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –¥–ª—è JSON
            minimums_for_json = []
            for minimum in self.minimums_database:
                min_copy = minimum.copy()
                min_copy['time'] = minimum['time'].isoformat()
                minimums_for_json.append(min_copy)
            
            filename = f"minimums_{start_date.strftime('%Y%m')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(minimums_for_json, f, ensure_ascii=False, indent=2)
            
            print(f"\\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def print_statistics(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.minimums_database:
            print("‚ùå –ú–∏–Ω–∏–º—É–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return
        
        print(f"\\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ù–ò–ú–£–ú–û–í:")
        print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(self.minimums_database)}")
        
        # –ü–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_stats = {}
        for minimum in self.minimums_database:
            symbol = minimum['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = 0
            symbol_stats[symbol] += 1
        
        print(f"\\nüìà –ü–æ —Å–∏–º–≤–æ–ª–∞–º:")
        for symbol, count in symbol_stats.items():
            print(f"   {symbol}: {count} –º–∏–Ω–∏–º—É–º–æ–≤")
        
        # –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
        profitable = [m for m in self.minimums_database if m['is_profitable']]
        profit_rate = (len(profitable) / len(self.minimums_database)) * 100
        
        print(f"\\nüí∞ –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤: {len(profitable)}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profit_rate:.1f}%")
        
        if profitable:
            avg_profit = np.mean([m['future_profit_24h'] for m in profitable])
            print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        print(f"\\nüî¢ –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤ –º–∏–Ω–∏–º—É–º–∞—Ö:")
        criteria_stats = {}
        for criterion in ['price_velocity', 'ema20_velocity', 'ema20_angle', 'distance_to_ema20']:
            values = [m['criteria'][criterion] for m in self.minimums_database]
            criteria_stats[criterion] = {
                'mean': np.mean(values),
                'std': np.std(values),
                'min': np.min(values),
                'max': np.max(values)
            }
            
            print(f"   {criterion}:")
            print(f"     –°—Ä–µ–¥–Ω–µ–µ: {criteria_stats[criterion]['mean']:.3f}")
            print(f"     –ú–∏–Ω: {criteria_stats[criterion]['min']:.3f}")
            print(f"     –ú–∞–∫—Å: {criteria_stats[criterion]['max']:.3f}")

if __name__ == "__main__":
    detector = SimpleMinDetector()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è–Ω–≤–∞—Ä—å 2025
    start_date = datetime(2025, 1, 1)
    end_date = datetime(2025, 1, 31, 23, 59, 59)
    
    print("üéØ –î–ï–¢–ï–ö–¢–û–† –ú–ò–ù–ò–ú–£–ú–û–í - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("üìä 4 –∫—Ä–∏—Ç–µ—Ä–∏—è: —Å–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã, —Å–∫–æ—Ä–æ—Å—Ç—å EMA20, —É–≥–æ–ª EMA20, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    print("üéØ –¶–µ–ª—å: –Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º—ã –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π")
    
    detector.collect_minimums(start_date, end_date)




