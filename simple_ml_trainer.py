#!/usr/bin/env python3
"""
–ü–†–û–°–¢–û–ô –ò –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô ML –ü–û–î–•–û–î
–°–±–æ—Ä—â–∏–∫ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π
"""

import numpy as np
import pandas as pd
import logging
from typing import Dict, List, Tuple, Optional
import ccxt
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import joblib
import json

logger = logging.getLogger(__name__)

class SimpleLongTrainer:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π"""
    
    def __init__(self):
        self.features_data = []  # –í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        self.labels_data = []    # –í—Å–µ –º–µ—Ç–∫–∏ (–ø—Ä–∏–±—ã–ª—å–Ω–æ/–Ω–µ—Ç)
        self.scaler = StandardScaler()
        self.model = RandomForestClassifier(n_estimators=100, random_state=42)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        self.future_hours = 24      # –°–º–æ—Ç—Ä–∏–º –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
        self.min_profit = 0.02      # –ú–∏–Ω–∏–º—É–º 2% –ø—Ä–∏–±—ã–ª–∏
        self.max_loss = -0.05       # –ú–∞–∫—Å–∏–º—É–º -5% –ø–æ—Ç–µ—Ä—å (—Å—Ç–æ–ø-–ª–æ—Å—Å)
        
    def collect_training_data(self, symbols: List[str]) -> bool:
        """–°–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üîç –°–æ–±–∏—Ä–∞—é –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            for symbol in symbols:
                print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å 01.01.2025
                df = self._get_historical_data(symbol)
                if df is None or len(df) < 100:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                df = self._prepare_features(df)
                if df is None:
                    continue
                
                # –°–æ–±–∏—Ä–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã
                examples_count = self._extract_training_examples(df, symbol)
                print(f"‚úÖ {symbol}: —Å–æ–±—Ä–∞–Ω–æ {examples_count} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            total_examples = len(self.features_data)
            positive_examples = sum(self.labels_data)
            negative_examples = total_examples - positive_examples
            
            print(f"üìà –ò–¢–û–ì–û —Å–æ–±—Ä–∞–Ω–æ {total_examples} –ø—Ä–∏–º–µ—Ä–æ–≤:")
            print(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {positive_examples} ({positive_examples/total_examples*100:.1f}%)")
            print(f"   ‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {negative_examples} ({negative_examples/total_examples*100:.1f}%)")
            
            return total_examples > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

    def _extract_training_examples(self, df: pd.DataFrame, symbol: str) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            examples_count = 0
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å–≤–µ—á–µ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö future_hours)
            for i in range(len(df) - self.future_hours):
                current_row = df.iloc[i]
                current_price = current_row['close']
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (27 –∑–Ω–∞—á–µ–Ω–∏–π)
                features = self._extract_features_from_row(current_row)
                if features is None:
                    continue
                
                # –°–º–æ—Ç—Ä–∏–º –Ω–∞ –±—É–¥—É—â–µ–µ: –ø—Ä–∏–±—ã–ª—å–Ω–∞ –ª–∏ LONG –ø–æ–∑–∏—Ü–∏—è?
                future_slice = df.iloc[i:i + self.future_hours]
                is_profitable = self._is_long_profitable(current_price, future_slice)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –≤ –æ–±—É—á–∞—é—â—É—é –≤—ã–±–æ—Ä–∫—É
                self.features_data.append(features)
                self.labels_data.append(1 if is_profitable else 0)
                examples_count += 1
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 1000-–π –ø—Ä–∏–º–µ—Ä
                if examples_count % 1000 == 0:
                    print(f"üìä {symbol}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {examples_count} –ø—Ä–∏–º–µ—Ä–æ–≤")
            
            return examples_count
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤: {e}")
            return 0

    def _is_long_profitable(self, entry_price: float, future_data: pd.DataFrame) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø—Ä–∏–±—ã–ª—å–Ω–∞ –ª–∏ LONG –ø–æ–∑–∏—Ü–∏—è"""
        try:
            max_price = future_data['high'].max()
            min_price = future_data['low'].min()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫
            max_profit = (max_price - entry_price) / entry_price
            max_loss = (min_price - entry_price) / entry_price
            
            # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏:
            # 1. –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å —Ä–∞–Ω—å—à–µ –ø—Ä–∏–±—ã–ª–∏ - —É–±—ã—Ç–æ—á–Ω–æ
            # 2. –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø—Ä–∏–±—ã–ª—å —Ä–∞–Ω—å—à–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ - –ø—Ä–∏–±—ã–ª—å–Ω–æ
            
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é —Å–≤–µ—á—É, –≥–¥–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–±–æ —Å—Ç–æ–ø-–ª–æ—Å—Å, –ª–∏–±–æ –ø—Ä–∏–±—ã–ª—å
            for _, row in future_data.iterrows():
                high_profit = (row['high'] - entry_price) / entry_price
                low_loss = (row['low'] - entry_price) / entry_price
                
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–≤–µ—á–∏ —Ä–∞–Ω—å—à–µ)
                if low_loss <= self.max_loss:
                    return False  # –£–±—ã—Ç–æ—á–Ω–æ - —Å—Ä–∞–±–æ—Ç–∞–ª —Å—Ç–æ–ø-–ª–æ—Å—Å
                
                # –ü–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±—ã–ª—å
                if high_profit >= self.min_profit:
                    return True   # –ü—Ä–∏–±—ã–ª—å–Ω–æ - –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª—å
            
            # –ï—Å–ª–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∏ —Å—Ç–æ–ø–∞, –Ω–∏ —Ü–µ–ª–∏
            final_price = future_data['close'].iloc[-1]
            final_return = (final_price - entry_price) / entry_price
            
            return final_return >= self.min_profit
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False

    def _extract_features_from_row(self, row) -> Optional[List[float]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ 27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            features = []
            
            # 1. Velocities (4)
            features.extend([
                row['price_velocity'],
                row['ema20_velocity'],
                row['ema50_velocity'],
                row['ema100_velocity']
            ])
            
            # 2. Accelerations (4)
            features.extend([
                row['price_acceleration'],
                row['ema20_acceleration'],
                row['ema50_acceleration'],
                row['ema100_acceleration']
            ])
            
            # 3. Velocity ratios (3)
            features.extend([
                row['price_to_ema20_velocity_ratio'],
                row['price_to_ema50_velocity_ratio'],
                row['price_to_ema100_velocity_ratio']
            ])
            
            # 4. Distances (3)
            features.extend([
                row['price_to_ema20_distance'],
                row['price_to_ema50_distance'],
                row['price_to_ema100_distance']
            ])
            
            # 5. Distance changes (3)
            features.extend([
                row['price_to_ema20_distance_change'],
                row['price_to_ema50_distance_change'],
                row['price_to_ema100_distance_change']
            ])
            
            # 6. Angles (3)
            features.extend([
                row['ema20_angle'],
                row['ema50_angle'],
                row['ema100_angle']
            ])
            
            # 7. Angle changes (3)
            features.extend([
                row['ema20_angle_change'],
                row['ema50_angle_change'],
                row['ema100_angle_change']
            ])
            
            # 8. EMA relationships (3)
            features.extend([
                row['ema20_to_ema50'],
                row['ema20_to_ema100'],
                row['ema50_to_ema100']
            ])
            
            # 9. Synchronizations (3)
            features.extend([
                row['price_ema20_sync'],
                row['price_ema50_sync'],
                row['price_ema100_sync']
            ])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
            features = [0.0 if np.isnan(f) or np.isinf(f) else f for f in features]
            
            return features
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None

    def train_model(self) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–∏"""
        try:
            if len(self.features_data) == 0:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return False
            
            print(f"ü§ñ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ {len(self.features_data)} –ø—Ä–∏–º–µ—Ä–∞—Ö...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            X = np.array(self.features_data)
            y = np.array(self.labels_data)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=0.2, random_state=42, stratify=y
            )
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            print("üìä –ù–æ—Ä–º–∞–ª–∏–∑—É—é –ø—Ä–∏–∑–Ω–∞–∫–∏...")
            X_train_scaled = self.scaler.fit_transform(X_train)
            X_test_scaled = self.scaler.transform(X_test)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            print("üß† –û–±—É—á–∞—é Random Forest...")
            self.model.fit(X_train_scaled, y_train)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            train_score = self.model.score(X_train_scaled, y_train)
            test_score = self.model.score(X_test_scaled, y_test)
            
            print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ: {train_score:.3f}")
            print(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ: {test_score:.3f}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            y_pred = self.model.predict(X_test_scaled)
            print("\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç:")
            print(classification_report(y_test, y_pred, target_names=['–£–±—ã—Ç–æ—á–Ω–æ', '–ü—Ä–∏–±—ã–ª—å–Ω–æ']))
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False

    def save_model(self, model_name: str = "simple_long_model") -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ —Å–∫–∞–ª–µ—Ä
            joblib.dump(self.model, f'{model_name}.pkl')
            joblib.dump(self.scaler, f'{model_name}_scaler.pkl')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            params = {
                'future_hours': self.future_hours,
                'min_profit': self.min_profit,
                'max_loss': self.max_loss,
                'feature_count': 27
            }
            
            with open(f'{model_name}_params.json', 'w') as f:
                json.dump(params, f, indent=2)
            
            print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {model_name}.pkl")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False

    def predict_long_probability(self, features: List[float]) -> float:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π LONG –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if len(features) != 27:
                return 0.0
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_array = np.array(features).reshape(1, -1)
            features_scaled = self.scaler.transform(features_array)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            probability = self.model.predict_proba(features_scaled)[0][1]
            
            return probability
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return 0.0

    def _get_historical_data(self, symbol: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å 01.01.2025"""
        try:
            exchange = ccxt.binance({'enableRateLimit': True})
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞: 01.01.2025
            from datetime import datetime
            start_date = datetime(2025, 1, 1, 0, 0, 0)
            since = int(start_date.timestamp() * 1000)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
            all_ohlcv = []
            current_since = since
            max_per_request = 1000
            
            while True:
                ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=max_per_request)
                if not ohlcv or len(ohlcv) == 0:
                    break
                
                all_ohlcv.extend(ohlcv)
                current_since = ohlcv[-1][0] + 3600000
                
                if current_since >= exchange.milliseconds():
                    break
                
                if len(all_ohlcv) > 20000:
                    break
            
            if not all_ohlcv:
                return None
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return None

    def _prepare_features(self, df: pd.DataFrame) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Å–µ—Ö 27 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            # 1. Velocity (—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è)
            df['price_velocity'] = df['close'].pct_change()
            df['ema20_velocity'] = df['ema_20'].pct_change()
            df['ema50_velocity'] = df['ema_50'].pct_change()
            df['ema100_velocity'] = df['ema_100'].pct_change()
            
            # 2. Acceleration (—É—Å–∫–æ—Ä–µ–Ω–∏–µ)
            df['price_acceleration'] = df['price_velocity'].pct_change()
            df['ema20_acceleration'] = df['ema20_velocity'].pct_change()
            df['ema50_acceleration'] = df['ema50_velocity'].pct_change()
            df['ema100_acceleration'] = df['ema100_velocity'].pct_change()
            
            # 3. Velocity ratios
            df['price_to_ema20_velocity_ratio'] = df['price_velocity'] / (df['ema20_velocity'] + 1e-8)
            df['price_to_ema50_velocity_ratio'] = df['price_velocity'] / (df['ema50_velocity'] + 1e-8)
            df['price_to_ema100_velocity_ratio'] = df['price_velocity'] / (df['ema100_velocity'] + 1e-8)
            
            # 4. Distance to EMAs
            df['price_to_ema20_distance'] = (df['close'] - df['ema_20']) / df['close']
            df['price_to_ema50_distance'] = (df['close'] - df['ema_50']) / df['close']
            df['price_to_ema100_distance'] = (df['close'] - df['ema_100']) / df['close']
            
            # 5. Distance change
            df['price_to_ema20_distance_change'] = df['price_to_ema20_distance'].diff()
            df['price_to_ema50_distance_change'] = df['price_to_ema50_distance'].diff()
            df['price_to_ema100_distance_change'] = df['price_to_ema100_distance'].diff()
            
            # 6. EMA angles (–Ω–∞–∫–ª–æ–Ω)
            df['ema20_angle'] = np.arctan(df['ema20_velocity']) * 180 / np.pi
            df['ema50_angle'] = np.arctan(df['ema50_velocity']) * 180 / np.pi
            df['ema100_angle'] = np.arctan(df['ema100_velocity']) * 180 / np.pi
            
            # 7. Angle change
            df['ema20_angle_change'] = df['ema20_angle'].diff()
            df['ema50_angle_change'] = df['ema50_angle'].diff()
            df['ema100_angle_change'] = df['ema100_angle'].diff()
            
            # 8. EMA relationships
            df['ema20_to_ema50'] = df['ema_20'] / (df['ema_50'] + 1e-8)
            df['ema20_to_ema100'] = df['ema_20'] / (df['ema_100'] + 1e-8)
            df['ema50_to_ema100'] = df['ema_50'] / (df['ema_100'] + 1e-8)
            
            # 9. Price-EMA synchronization
            window_size = 20
            df['price_ema20_sync'] = df['close'].rolling(window_size).corr(df['ema_20'])
            df['price_ema50_sync'] = df['close'].rolling(window_size).corr(df['ema_50'])
            df['price_ema100_sync'] = df['close'].rolling(window_size).corr(df['ema_100'])
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.dropna()
            df = df.replace([np.inf, -np.inf], 0)
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return None

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    trainer = SimpleLongTrainer()
    
    print("üéØ –ü–†–û–°–¢–û–ô ML –¢–†–ï–ù–ï–† –î–õ–Ø LONG –ü–û–ó–ò–¶–ò–ô")
    print("=====================================")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'SOL/USDT', 'XRP/USDT']
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("üìä –®–ê–ì 1: –°–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    if trainer.collect_training_data(symbols):
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        print("\nü§ñ –®–ê–ì 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        if trainer.train_model():
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            print("\nüíæ –®–ê–ì 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            trainer.save_model("simple_long_model")
            
            print("\n‚úÖ –ì–û–¢–û–í–û! –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π LONG –ø–æ–∑–∏—Ü–∏–π.")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
