#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç
–ë–µ–∑ TensorFlow, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
"""
import asyncio
import json
import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import ccxt
import pandas as pd
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    try:
        with open('bot_config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

config = load_config()

class SimpleShootingStarPredictor:
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç –±–µ–∑ ML"""
    
    def __init__(self):
        self.exchange = ccxt.binance({
            'sandbox': False,
            'enableRateLimit': True,
            'options': {
                'adjustForTimeDifference': True
            }
        })
    
    def get_binance_data(self, symbol, timeframe='1h', limit=100):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Binance"""
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            server_time = self.exchange.fetch_time()
            local_time = self.exchange.milliseconds()
            time_diff = server_time - local_time
            
            if abs(time_diff) > 1000:
                self.exchange.options['timeDifference'] = time_diff
            
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            if not ohlcv:
                return None
            
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            return df
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
    
    def calculate_indicators(self, df):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        if df is None or df.empty:
            return None
        
        # RSI
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # EMA
        df['ema_20'] = df['close'].ewm(span=20).mean()
        df['ema_50'] = df['close'].ewm(span=50).mean()
        
        # Bollinger Bands
        df['bb_middle'] = df['close'].rolling(window=20).mean()
        bb_std = df['close'].rolling(window=20).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        
        # Volume
        df['volume_ma'] = df['volume'].rolling(window=20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_ma']
        
        # Price change
        df['price_change_1h'] = df['close'].pct_change(1)
        df['price_change_4h'] = df['close'].pct_change(4)
        df['price_change_24h'] = df['close'].pct_change(24)
        
        return df.dropna()
    
    def predict_shooting_star(self, df):
        """–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã"""
        if df is None or len(df) < 50:
            return None
        
        latest = df.iloc[-1]
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Å—Ç—Ä–µ–ª—è—é—â–µ–π –º–æ–Ω–µ—Ç—ã
        criteria = {
            'rsi_oversold': latest['rsi'] < 30,  # RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
            'price_above_ema20': latest['close'] > latest['ema_20'],  # –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
            'volume_surge': latest['volume_ratio'] > 2.0,  # –û–±—ä–µ–º –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
            'bb_squeeze': (latest['bb_upper'] - latest['bb_lower']) / latest['close'] < 0.05,  # –°–∂–∞—Ç–∏–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
            'recent_dip': latest['price_change_24h'] < -0.05,  # –ù–µ–¥–∞–≤–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ 5%+
            'momentum_building': latest['price_change_1h'] > 0 and latest['price_change_4h'] > 0  # –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–º–ø—É–ª—å—Å
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        score = sum(criteria.values())
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        if score >= 5:
            probability = 0.9
            category = "üöÄ –í–ó–†–´–í–ù–û–ô –†–û–°–¢"
        elif score >= 4:
            probability = 0.7
            category = "üìà –í–´–°–û–ö–ò–ô –†–û–°–¢"
        elif score >= 3:
            probability = 0.5
            category = "üìä –£–ú–ï–†–ï–ù–ù–´–ô –†–û–°–¢"
        else:
            probability = 0.2
            category = "üìâ –°–õ–ê–ë–´–ô –°–ò–ì–ù–ê–õ"
        
        return {
            'probability': probability,
            'category': category,
            'score': score,
            'criteria': criteria,
            'rsi': latest['rsi'],
            'volume_ratio': latest['volume_ratio'],
            'price_change_24h': latest['price_change_24h'],
            'bb_width': (latest['bb_upper'] - latest['bb_lower']) / latest['close']
        }
    
    def analyze_coin(self, symbol):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–Ω–µ—Ç—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.get_binance_data(symbol)
            if df is None:
                return None
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = self.calculate_indicators(df)
            if df is None:
                return None
            
            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            prediction = self.predict_shooting_star(df)
            if prediction is None:
                return None
            
            return {
                'symbol': symbol,
                'current_price': df['close'].iloc[-1],
                'prediction': prediction,
                'data_points': len(df)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
            return None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
predictor = SimpleShootingStarPredictor()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    keyboard = [
        [InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã", callback_data="analyze_coin")],
        [InlineKeyboardButton("üöÄ –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç", callback_data="find_shooting_stars")],
        [InlineKeyboardButton("üìä –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤", callback_data="top_signals")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéØ **–ë–û–¢ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –°–¢–†–ï–õ–Ø–Æ–©–ò–• –ú–û–ù–ï–¢**\n\n"
        "–Ø –ø–æ–º–æ–≥–∞—é –Ω–∞–π—Ç–∏ –º–æ–Ω–µ—Ç—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –≤–∑—Ä—ã–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "analyze_coin":
        await query.edit_message_text(
            "üîç **–ê–ù–ê–õ–ò–ó –ú–û–ù–ï–¢–´**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, BNB)\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "/analyze BTC"
        )
    
    elif query.data == "find_shooting_stars":
        await find_shooting_stars(update, context)
    
    elif query.data == "top_signals":
        await top_signals(update, context)
    
    elif query.data == "help":
        await help_command(update, context)
    
    elif query.data == "back_to_main":
        await start(update, context)

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /analyze"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç—ã!\n\n"
            "–ü—Ä–∏–º–µ—Ä: /analyze BTC"
        )
        return
    
    symbol = context.args[0].upper()
    if not symbol.endswith('USDT'):
        symbol += '/USDT'
    
    await update.message.reply_text(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—É
    result = predictor.analyze_coin(symbol)
    
    if result is None:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {symbol}")
        return
    
    prediction = result['prediction']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
üéØ **–ê–ù–ê–õ–ò–ó {symbol}**

üí∞ **–¶–µ–Ω–∞:** ${result['current_price']:.8f}
üìä **–î–∞–Ω–Ω—ã—Ö:** {result['data_points']} —Å–≤–µ—á–µ–π

üöÄ **–ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï:**
{prediction['category']}
üéØ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {prediction['probability']:.1%}
‚≠ê **–û—Ü–µ–Ω–∫–∞:** {prediction['score']}/6

üìà **–î–ï–¢–ê–õ–ò:**
‚Ä¢ RSI: {prediction['rsi']:.1f}
‚Ä¢ –û–±—ä–µ–º: {prediction['volume_ratio']:.1f}x —Å—Ä–µ–¥–Ω–µ–≥–æ
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {prediction['price_change_24h']:.1%}
‚Ä¢ –®–∏—Ä–∏–Ω–∞ BB: {prediction['bb_width']:.1%}

üîç **–ö–†–ò–¢–ï–†–ò–ò:**
{'‚úÖ' if prediction['criteria']['rsi_oversold'] else '‚ùå'} RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (<30)
{'‚úÖ' if prediction['criteria']['price_above_ema20'] else '‚ùå'} –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
{'‚úÖ' if prediction['criteria']['volume_surge'] else '‚ùå'} –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ (2x+)
{'‚úÖ' if prediction['criteria']['bb_squeeze'] else '‚ùå'} –°–∂–∞—Ç–∏–µ –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
{'‚úÖ' if prediction['criteria']['recent_dip'] else '‚ùå'} –ù–µ–¥–∞–≤–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ 5%+
{'‚úÖ' if prediction['criteria']['momentum_building'] else '‚ùå'} –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–º–ø—É–ª—å—Å
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def find_shooting_stars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç"""
    if update.callback_query:
        await update.callback_query.edit_message_text("üöÄ –ò—â—É —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã...")
        message_func = update.callback_query.edit_message_text
    else:
        await update.message.reply_text("üöÄ –ò—â—É —Å—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã...")
        message_func = update.message.reply_text
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        popular_coins = ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOT', 'DOGE', 'AVAX', 'MATIC']
        
        results = []
        for coin in popular_coins:
            symbol = f"{coin}/USDT"
            result = predictor.analyze_coin(symbol)
            if result and result['prediction']['probability'] > 0.3:
                results.append(result)
        
        if not results:
            await message_func("üòî –°—Ç—Ä–µ–ª—è—é—â–∏–µ –º–æ–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['prediction']['probability'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üöÄ **–ù–ê–ô–î–ï–ù–ù–´–ï –°–¢–†–ï–õ–Ø–Æ–©–ò–ï –ú–û–ù–ï–¢–´:**\n\n"
        
        for i, result in enumerate(results[:5], 1):
            pred = result['prediction']
            message += f"{i}. **{result['symbol']}**\n"
            message += f"   üí∞ ${result['current_price']:.8f}\n"
            message += f"   {pred['category']}\n"
            message += f"   üéØ {pred['probability']:.1%} ({pred['score']}/6)\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message_func(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç: {e}")
        await message_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç")

async def top_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤"""
    if update.callback_query:
        await update.callback_query.edit_message_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã...")
        message_func = update.callback_query.edit_message_text
    else:
        await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ø —Å–∏–≥–Ω–∞–ª—ã...")
        message_func = update.message.reply_text
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç
        popular_coins = ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOT', 'DOGE', 'AVAX', 'MATIC', 
                        'LINK', 'UNI', 'LTC', 'BCH', 'ATOM', 'NEAR', 'FTM', 'ALGO', 'VET', 'ICP']
        
        results = []
        for coin in popular_coins:
            symbol = f"{coin}/USDT"
            result = predictor.analyze_coin(symbol)
            if result:
                results.append(result)
        
        if not results:
            await message_func("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        results.sort(key=lambda x: x['prediction']['probability'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä **–¢–û–ü –°–ò–ì–ù–ê–õ–û–í:**\n\n"
        
        for i, result in enumerate(results[:10], 1):
            pred = result['prediction']
            emoji = "üöÄ" if pred['probability'] > 0.7 else "üìà" if pred['probability'] > 0.5 else "üìä"
            
            message += f"{emoji} {i}. **{result['symbol']}**\n"
            message += f"   üí∞ ${result['current_price']:.8f}\n"
            message += f"   üéØ {pred['probability']:.1%} - {pred['category']}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await message_func(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        await message_func("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
‚ÑπÔ∏è **–ü–û–ú–û–©–¨**

üéØ **–û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:**
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑ –º–æ–Ω–µ—Ç—ã - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ üöÄ –ü–æ–∏—Å–∫ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –º–æ–Ω–µ—Ç —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º —Ä–æ—Å—Ç–∞
‚Ä¢ üìä –¢–æ–ø —Å–∏–≥–Ω–∞–ª–æ–≤ - —Ä–µ–π—Ç–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç

üìã **–ö–û–ú–ê–ù–î–´:**
‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /analyze BTC - –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç **–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:**
‚Ä¢ RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (<30)
‚Ä¢ –¶–µ–Ω–∞ –≤—ã—à–µ EMA20
‚Ä¢ –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ (2x+ —Å—Ä–µ–¥–Ω–µ–≥–æ)
‚Ä¢ –°–∂–∞—Ç–∏–µ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞
‚Ä¢ –ù–µ–¥–∞–≤–Ω–µ–µ –ø–∞–¥–µ–Ω–∏–µ 5%+
‚Ä¢ –ù–∞—Ä–∞—Å—Ç–∞—é—â–∏–π –∏–º–ø—É–ª—å—Å

‚ö†Ô∏è **–í–ê–ñ–ù–û:**
–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç!
"""
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not config:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(config["telegram_token"]).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç...")
    application.run_polling()

if __name__ == "__main__":
    main()
