#!/usr/bin/env python3
"""
–£–ú–ù–´–ô ML –¢–†–ï–ù–ï–†
–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ 809 –¥–≤–∏–∂–µ–Ω–∏–π
"""

import json
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
import pickle

class SmartMLTrainer:
    def __init__(self):
        self.movements = []
        self.model = None
        self.feature_names = []
        
    def load_movements(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π"""
        try:
            with open('movements_database.json', 'r') as f:
                self.movements = json.load(f)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.movements)} –¥–≤–∏–∂–µ–Ω–∏–π")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def prepare_training_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüîÑ –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 35)
        
        features = []
        labels = []
        
        for movement in self.movements:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º 9 –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ MIN —Ç–æ—á–∫–∏
            min_f = movement['min_features']
            
            feature_vector = []
            
            # 1. –°–∫–æ—Ä–æ—Å—Ç–∏ (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'velocities' in min_f:
                feature_vector.extend([
                    min_f['velocities'].get('price', 0),
                    min_f['velocities'].get('ema20', 0),
                    min_f['velocities'].get('ema50', 0),
                    min_f['velocities'].get('ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0, 0])
            
            # 2. –£—Å–∫–æ—Ä–µ–Ω–∏—è (4 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'accelerations' in min_f:
                feature_vector.extend([
                    min_f['accelerations'].get('price', 0),
                    min_f['accelerations'].get('ema20', 0),
                    min_f['accelerations'].get('ema50', 0),
                    min_f['accelerations'].get('ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0, 0])
            
            # 3. –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'velocity_ratios' in min_f:
                feature_vector.extend([
                    min_f['velocity_ratios'].get('price_ema20', 0),
                    min_f['velocity_ratios'].get('price_ema50', 0),
                    min_f['velocity_ratios'].get('price_ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 4. –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'distances' in min_f:
                feature_vector.extend([
                    min_f['distances'].get('price_ema20', 0),
                    min_f['distances'].get('price_ema50', 0),
                    min_f['distances'].get('price_ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 5. –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'distance_changes' in min_f:
                feature_vector.extend([
                    min_f['distance_changes'].get('price_ema20', 0),
                    min_f['distance_changes'].get('price_ema50', 0),
                    min_f['distance_changes'].get('price_ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 6. –£–≥–ª—ã EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'angles' in min_f:
                feature_vector.extend([
                    min_f['angles'].get('ema20', 0),
                    min_f['angles'].get('ema50', 0),
                    min_f['angles'].get('ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 7. –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'angle_changes' in min_f:
                feature_vector.extend([
                    min_f['angle_changes'].get('ema20', 0),
                    min_f['angle_changes'].get('ema50', 0),
                    min_f['angle_changes'].get('ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 8. –í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è EMA (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'ema_relationships' in min_f:
                feature_vector.extend([
                    min_f['ema_relationships'].get('ema20_ema50', 0),
                    min_f['ema_relationships'].get('ema20_ema100', 0),
                    min_f['ema_relationships'].get('ema50_ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            # 9. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (3 –ø—Ä–∏–∑–Ω–∞–∫–∞)
            if 'synchronizations' in min_f:
                feature_vector.extend([
                    min_f['synchronizations'].get('price_ema20', 0),
                    min_f['synchronizations'].get('price_ema50', 0),
                    min_f['synchronizations'].get('price_ema100', 0)
                ])
            else:
                feature_vector.extend([0, 0, 0])
            
            features.append(feature_vector)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
            profit = movement['movement_percent']
            if profit >= 7:
                labels.append(2)  # –ö—Ä—É–ø–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            elif profit >= 3:
                labels.append(1)  # –°—Ä–µ–¥–Ω–µ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            else:
                labels.append(0)  # –ú–∞–ª–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.feature_names = [
            'vel_price', 'vel_ema20', 'vel_ema50', 'vel_ema100',
            'acc_price', 'acc_ema20', 'acc_ema50', 'acc_ema100',
            'ratio_p_e20', 'ratio_p_e50', 'ratio_p_e100',
            'dist_p_e20', 'dist_p_e50', 'dist_p_e100',
            'dist_ch_e20', 'dist_ch_e50', 'dist_ch_e100',
            'angle_e20', 'angle_e50', 'angle_e100',
            'angle_ch_e20', 'angle_ch_e50', 'angle_ch_e100',
            'rel_e20_e50', 'rel_e20_e100', 'rel_e50_e100',
            'sync_p_e20', 'sync_p_e50', 'sync_p_e100'
        ]
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(features)} –æ–±—Ä–∞–∑—Ü–æ–≤ —Å {len(feature_vector)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        print(f"üìä –ö–ª–∞—Å—Å—ã: 0=–º–∞–ª—ã–µ, 1=—Å—Ä–µ–¥–Ω–∏–µ, 2=–∫—Ä—É–ø–Ω—ã–µ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        unique, counts = np.unique(labels, return_counts=True)
        for cls, count in zip(unique, counts):
            cls_name = ['–ú–∞–ª—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–ö—Ä—É–ø–Ω—ã–µ'][cls]
            print(f"   {cls_name}: {count} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        return np.array(features), np.array(labels)
    
    def train_model(self, X, y):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        print("\nü§ñ –û–ë–£–ß–ï–ù–ò–ï ML –ú–û–î–ï–õ–ò")
        print("=" * 25)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/test
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42, stratify=y
        )
        
        print(f"üìö –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_train)} –æ–±—Ä–∞–∑—Ü–æ–≤")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {len(X_test)} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        self.model = RandomForestClassifier(
            n_estimators=100,
            max_depth=10,
            min_samples_split=5,
            random_state=42
        )
        
        print("üîÑ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        self.model.fit(X_train, y_train)
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        train_score = self.model.score(X_train, y_train)
        test_score = self.model.score(X_test, y_test)
        
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏: {train_score:.3f}")
        print(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {test_score:.3f}")
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        y_pred = self.model.predict(X_test)
        
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:")
        print(classification_report(y_test, y_pred, 
                                  target_names=['–ú–∞–ª—ã–µ', '–°—Ä–µ–¥–Ω–∏–µ', '–ö—Ä—É–ø–Ω—ã–µ']))
        
        # –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self._show_feature_importance()
        
        return True
    
    def _show_feature_importance(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if self.model is None:
            return
        
        print("\nüéØ –¢–û–ü-10 –í–ê–ñ–ù–´–• –ü–†–ò–ó–ù–ê–ö–û–í:")
        print("-" * 30)
        
        importances = self.model.feature_importances_
        indices = np.argsort(importances)[::-1]
        
        for i in range(min(10, len(importances))):
            idx = indices[i]
            print(f"{i+1:2d}. {self.feature_names[idx]:<15}: {importances[idx]:.3f}")
    
    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            with open('smart_predictor_model.pkl', 'wb') as f:
                pickle.dump(self.model, f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            with open('feature_names.pkl', 'wb') as f:
                pickle.dump(self.feature_names, f)
            
            print("\nüíæ –ú–û–î–ï–õ–¨ –°–û–•–†–ê–ù–ï–ù–ê:")
            print("   ‚Ä¢ smart_predictor_model.pkl")
            print("   ‚Ä¢ feature_names.pkl")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def create_predictor_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        predictor_code = '''#!/usr/bin/env python3
"""
–£–ú–ù–´–ô –ü–†–ï–î–ò–ö–¢–û–† –î–í–ò–ñ–ï–ù–ò–ô
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é ML –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
"""

import pickle
import numpy as np

class SmartPredictor:
    def __init__(self):
        self.model = None
        self.feature_names = []
        self.load_model()
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            with open('smart_predictor_model.pkl', 'rb') as f:
                self.model = pickle.load(f)
            
            with open('feature_names.pkl', 'rb') as f:
                self.feature_names = pickle.load(f)
            
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def predict_movement(self, features_dict):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        
        features_dict –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
        {
            'velocities': {'price': X, 'ema20': Y, ...},
            'accelerations': {...},
            'velocity_ratios': {...},
            'distances': {...},
            'distance_changes': {...},
            'angles': {...},
            'angle_changes': {...},
            'ema_relationships': {...},
            'synchronizations': {...}
        }
        
        Returns: (predicted_class, probabilities)
        """
        if self.model is None:
            return None, None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_vector = self._dict_to_vector(features_dict)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = self.model.predict([feature_vector])[0]
        probabilities = self.model.predict_proba([feature_vector])[0]
        
        class_names = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)']
        
        return class_names[prediction], probabilities
    
    def _dict_to_vector(self, features_dict):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä"""
        vector = []
        
        # –°–∫–æ—Ä–æ—Å—Ç–∏
        vel = features_dict.get('velocities', {})
        vector.extend([
            vel.get('price', 0), vel.get('ema20', 0),
            vel.get('ema50', 0), vel.get('ema100', 0)
        ])
        
        # –£—Å–∫–æ—Ä–µ–Ω–∏—è
        acc = features_dict.get('accelerations', {})
        vector.extend([
            acc.get('price', 0), acc.get('ema20', 0),
            acc.get('ema50', 0), acc.get('ema100', 0)
        ])
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        ratio = features_dict.get('velocity_ratios', {})
        vector.extend([
            ratio.get('price_ema20', 0), ratio.get('price_ema50', 0),
            ratio.get('price_ema100', 0)
        ])
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è
        dist = features_dict.get('distances', {})
        vector.extend([
            dist.get('price_ema20', 0), dist.get('price_ema50', 0),
            dist.get('price_ema100', 0)
        ])
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        dist_ch = features_dict.get('distance_changes', {})
        vector.extend([
            dist_ch.get('price_ema20', 0), dist_ch.get('price_ema50', 0),
            dist_ch.get('price_ema100', 0)
        ])
        
        # –£–≥–ª—ã
        angles = features_dict.get('angles', {})
        vector.extend([
            angles.get('ema20', 0), angles.get('ema50', 0),
            angles.get('ema100', 0)
        ])
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤
        angle_ch = features_dict.get('angle_changes', {})
        vector.extend([
            angle_ch.get('ema20', 0), angle_ch.get('ema50', 0),
            angle_ch.get('ema100', 0)
        ])
        
        # –í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è EMA
        rel = features_dict.get('ema_relationships', {})
        vector.extend([
            rel.get('ema20_ema50', 0), rel.get('ema20_ema100', 0),
            rel.get('ema50_ema100', 0)
        ])
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync = features_dict.get('synchronizations', {})
        vector.extend([
            sync.get('price_ema20', 0), sync.get('price_ema50', 0),
            sync.get('price_ema100', 0)
        ])
        
        return vector

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    predictor = SmartPredictor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
    test_features = {
        'velocities': {'price': -0.010411, 'ema20': 0.0001, 'ema50': 0.0001, 'ema100': 0.0001},
        'angles': {'ema20': -0.1, 'ema50': -0.05, 'ema100': 0},
        'synchronizations': {'price_ema20': 0.518, 'price_ema50': 0.5, 'price_ema100': 0.5}
    }
    
    prediction, probabilities = predictor.predict_movement(test_features)
    
    if prediction:
        print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}")
        print("üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        for i, prob in enumerate(probabilities):
            class_name = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)'][i]
            print(f"   {class_name}: {prob:.1%}")
'''
        
        with open('smart_predictor.py', 'w', encoding='utf-8') as f:
            f.write(predictor_code)
        
        print("üìÅ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: smart_predictor.py")

if __name__ == "__main__":
    trainer = SmartMLTrainer()
    
    print("ü§ñ –£–ú–ù–´–ô ML –¢–†–ï–ù–ï–†")
    print("=" * 20)
    
    if trainer.load_movements():
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        X, y = trainer.prepare_training_data()
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        if trainer.train_model(X, y):
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
            if trainer.save_model():
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä
                trainer.create_predictor_script()
                
                print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
                print("üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
                print("   ‚Ä¢ smart_predictor_model.pkl - –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å")
                print("   ‚Ä¢ feature_names.pkl - –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                print("   ‚Ä¢ smart_predictor.py - —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
                print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–π: python smart_predictor.py")
