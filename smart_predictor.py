#!/usr/bin/env python3
"""
–£–ú–ù–´–ô –ü–†–ï–î–ò–ö–¢–û–† –î–í–ò–ñ–ï–ù–ò–ô
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é ML –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
"""

import pickle
import numpy as np

class SmartPredictor:
    def __init__(self):
        self.model = None
        self.feature_names = []
        self.load_model()
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            with open('smart_predictor_model.pkl', 'rb') as f:
                self.model = pickle.load(f)
            
            with open('feature_names.pkl', 'rb') as f:
                self.feature_names = pickle.load(f)
            
            print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    def predict_movement(self, features_dict):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        
        features_dict –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 9 –≥—Ä—É–ø–ø –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:
        {
            'velocities': {'price': X, 'ema20': Y, ...},
            'accelerations': {...},
            'velocity_ratios': {...},
            'distances': {...},
            'distance_changes': {...},
            'angles': {...},
            'angle_changes': {...},
            'ema_relationships': {...},
            'synchronizations': {...}
        }
        
        Returns: (predicted_class, probabilities)
        """
        if self.model is None:
            return None, None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ–∫—Ç–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_vector = self._dict_to_vector(features_dict)
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = self.model.predict([feature_vector])[0]
        probabilities = self.model.predict_proba([feature_vector])[0]
        
        class_names = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)']
        
        return class_names[prediction], probabilities
    
    def _dict_to_vector(self, features_dict):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä"""
        vector = []
        
        # –°–∫–æ—Ä–æ—Å—Ç–∏
        vel = features_dict.get('velocities', {})
        vector.extend([
            vel.get('price', 0), vel.get('ema20', 0),
            vel.get('ema50', 0), vel.get('ema100', 0)
        ])
        
        # –£—Å–∫–æ—Ä–µ–Ω–∏—è
        acc = features_dict.get('accelerations', {})
        vector.extend([
            acc.get('price', 0), acc.get('ema20', 0),
            acc.get('ema50', 0), acc.get('ema100', 0)
        ])
        
        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        ratio = features_dict.get('velocity_ratios', {})
        vector.extend([
            ratio.get('price_ema20', 0), ratio.get('price_ema50', 0),
            ratio.get('price_ema100', 0)
        ])
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è
        dist = features_dict.get('distances', {})
        vector.extend([
            dist.get('price_ema20', 0), dist.get('price_ema50', 0),
            dist.get('price_ema100', 0)
        ])
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        dist_ch = features_dict.get('distance_changes', {})
        vector.extend([
            dist_ch.get('price_ema20', 0), dist_ch.get('price_ema50', 0),
            dist_ch.get('price_ema100', 0)
        ])
        
        # –£–≥–ª—ã
        angles = features_dict.get('angles', {})
        vector.extend([
            angles.get('ema20', 0), angles.get('ema50', 0),
            angles.get('ema100', 0)
        ])
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–æ–≤
        angle_ch = features_dict.get('angle_changes', {})
        vector.extend([
            angle_ch.get('ema20', 0), angle_ch.get('ema50', 0),
            angle_ch.get('ema100', 0)
        ])
        
        # –í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è EMA
        rel = features_dict.get('ema_relationships', {})
        vector.extend([
            rel.get('ema20_ema50', 0), rel.get('ema20_ema100', 0),
            rel.get('ema50_ema100', 0)
        ])
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        sync = features_dict.get('synchronizations', {})
        vector.extend([
            sync.get('price_ema20', 0), sync.get('price_ema50', 0),
            sync.get('price_ema100', 0)
        ])
        
        return vector

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    predictor = SmartPredictor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è)
    test_features = {
        'velocities': {'price': -0.010411, 'ema20': 0.0001, 'ema50': 0.0001, 'ema100': 0.0001},
        'angles': {'ema20': -0.1, 'ema50': -0.05, 'ema100': 0},
        'synchronizations': {'price_ema20': 0.518, 'price_ema50': 0.5, 'price_ema100': 0.5}
    }
    
    prediction, probabilities = predictor.predict_movement(test_features)
    
    if prediction:
        print(f"üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {prediction}")
        print("üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:")
        for i, prob in enumerate(probabilities):
            class_name = ['–ú–∞–ª–æ–µ (1-3%)', '–°—Ä–µ–¥–Ω–µ–µ (3-7%)', '–ö—Ä—É–ø–Ω–æ–µ (7%+)'][i]
            print(f"   {class_name}: {prob:.1%}")
