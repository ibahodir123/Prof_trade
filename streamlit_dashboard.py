#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Streamlit Dashboard –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–æ–≤
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏, –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.subplots as sp
from plotly.subplots import make_subplots
import ccxt
import json
import pickle
from datetime import datetime, timedelta
import time
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ç–æ—Ä –ú–∏–Ω–∏–º—É–º–æ–≤ - Dashboard",
    page_icon="üìä",
    layout="wide"
)

class MinimumDetectorDashboard:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        self.model = None
        self.feature_names = None
        self.feature_weights = None
        
    @st.cache_data
    def load_model(_self, model_filename: str = "minimum_detector_model.pkl"):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            with open(model_filename, 'rb') as f:
                model = pickle.load(f)
            
            metadata_filename = model_filename.replace('.pkl', '_metadata.json')
            with open(metadata_filename, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            return model, metadata['feature_names'], metadata['feature_weights']
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return None, None, None
    
    @st.cache_data
    def get_data(_self, symbol: str, hours: int = 168) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–Ω–∞ 5 –º–∏–Ω—É—Ç)"""
        try:
            exchange = ccxt.binance()
            end_time = datetime.now()
            start_time = end_time - timedelta(hours=hours)
            
            since = int(start_time.timestamp() * 1000)
            
            ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=since, limit=hours)
            
            if not ohlcv:
                return pd.DataFrame()
            
            df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            return df
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_4_criteria(self, df: pd.DataFrame) -> pd.DataFrame:
        """–†–∞—Å—á–µ—Ç 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"""
        try:
            # EMA20
            df['ema20'] = df['close'].ewm(span=20).mean()
            
            # 4 –∫—Ä–∏—Ç–µ—Ä–∏—è
            df['price_velocity'] = df['close'].pct_change() * 100
            df['ema20_velocity'] = df['ema20'].pct_change() * 100
            df['ema20_angle'] = ((df['ema20'] / df['ema20'].shift(10)) - 1) * 100
            df['distance_to_ema20'] = ((df['close'] - df['ema20']) / df['ema20']) * 100
            
            return df
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: {e}")
            return df
    
    def predict_minimum(self, criteria_values: dict):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞"""
        if not self.model:
            return None
        
        try:
            feature_vector = []
            for name in self.feature_names:
                value = criteria_values.get(name, 0.0)
                if np.isnan(value) or np.isinf(value):
                    value = 0.0
                feature_vector.append(value)
            
            feature_vector = np.array(feature_vector).reshape(1, -1)
            
            prediction = self.model.predict(feature_vector)[0]
            probabilities = self.model.predict_proba(feature_vector)[0]
            
            return {
                'is_minimum': bool(prediction),
                'probability': float(probabilities[1]),
                'criteria': criteria_values
            }
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            return None
    
    def create_main_chart(self, df: pd.DataFrame, symbol: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã + EMA20"""
        
        fig = make_subplots(
            rows=3, cols=1,
            shared_xaxes=True,
            vertical_spacing=0.05,
            subplot_titles=(
                f'{symbol} - –¶–µ–Ω–∞ –∏ EMA20',
                '–û–±—ä–µ–º',
                '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20'
            ),
            row_heights=[0.6, 0.2, 0.2]
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π
        fig.add_trace(
            go.Candlestick(
                x=df.index,
                open=df['open'],
                high=df['high'],
                low=df['low'],
                close=df['close'],
                name='–¶–µ–Ω–∞',
                increasing_line_color='green',
                decreasing_line_color='red'
            ),
            row=1, col=1
        )
        
        # EMA20
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['ema20'],
                mode='lines',
                name='EMA20',
                line=dict(color='blue', width=2)
            ),
            row=1, col=1
        )
        
        # –û–±—ä–µ–º
        colors = ['green' if close >= open else 'red' 
                 for close, open in zip(df['close'], df['open'])]
        
        fig.add_trace(
            go.Bar(
                x=df.index,
                y=df['volume'],
                name='–û–±—ä–µ–º',
                marker_color=colors,
                opacity=0.7
            ),
            row=2, col=1
        )
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['distance_to_ema20'],
                mode='lines',
                name='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20 (%)',
                line=dict(color='purple', width=2),
                fill='tonexty'
            ),
            row=3, col=1
        )
        
        # –õ–∏–Ω–∏—è –Ω—É–ª—è –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        fig.add_hline(y=0, line_dash="dash", line_color="gray", row=3, col=1)
        
        fig.update_layout(
            title=f"–ê–Ω–∞–ª–∏–∑ {symbol}",
            xaxis_title="–í—Ä–µ–º—è",
            height=800,
            showlegend=True
        )
        
        fig.update_xaxes(rangeslider_visible=False)
        
        return fig
    
    def create_criteria_chart(self, df: pd.DataFrame):
        """–ì—Ä–∞—Ñ–∏–∫ 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"""
        
        fig = make_subplots(
            rows=2, cols=2,
            subplot_titles=(
                '–°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã (%/—á–∞—Å)',
                '–°–∫–æ—Ä–æ—Å—Ç—å EMA20 (%/—á–∞—Å)', 
                '–£–≥–æ–ª EMA20 (%/10—á–∞—Å)',
                '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20 (%)'
            )
        )
        
        # –°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['price_velocity'],
                mode='lines',
                name='–°–∫–æ—Ä–æ—Å—Ç—å —Ü–µ–Ω—ã',
                line=dict(color='red')
            ),
            row=1, col=1
        )
        
        # –°–∫–æ—Ä–æ—Å—Ç—å EMA20
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['ema20_velocity'],
                mode='lines',
                name='–°–∫–æ—Ä–æ—Å—Ç—å EMA20',
                line=dict(color='blue')
            ),
            row=1, col=2
        )
        
        # –£–≥–æ–ª EMA20
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['ema20_angle'],
                mode='lines',
                name='–£–≥–æ–ª EMA20',
                line=dict(color='green')
            ),
            row=2, col=1
        )
        
        # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ EMA20
        fig.add_trace(
            go.Scatter(
                x=df.index,
                y=df['distance_to_ema20'],
                mode='lines',
                name='–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ',
                line=dict(color='purple')
            ),
            row=2, col=2
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ –Ω—É–ª—è
        for row in [1, 2]:
            for col in [1, 2]:
                fig.add_hline(y=0, line_dash="dash", line_color="gray", row=row, col=col)
        
        fig.update_layout(
            title="4 –ö—Ä–∏—Ç–µ—Ä–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –º–∏–Ω–∏–º—É–º–æ–≤",
            height=600,
            showlegend=False
        )
        
        return fig
    
    def run_dashboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.title("üìä –î–µ—Ç–µ–∫—Ç–æ—Ä –ú–∏–Ω–∏–º—É–º–æ–≤ - Dashboard")
        st.markdown("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–æ–≤ –¥–ª—è LONG –ø–æ–∑–∏—Ü–∏–π")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        if self.model is None:
            self.model, self.feature_names, self.feature_weights = self.load_model()
        
        if self.model is None:
            st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ weighted_ml_trainer.py")
            return
        
        # –°–∞–π–¥–±–∞—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        selected_symbol = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª:",
            self.symbols,
            index=0
        )
        
        hours_back = st.sidebar.slider(
            "–ß–∞—Å–æ–≤ –Ω–∞–∑–∞–¥:",
            min_value=24,
            max_value=720,
            value=168,
            step=24
        )
        
        auto_refresh = st.sidebar.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (30 —Å–µ–∫)", value=False)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
        st.sidebar.header("‚öñÔ∏è –í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤")
        if self.feature_weights:
            for feature, weight in self.feature_weights.items():
                st.sidebar.metric(
                    feature.replace('_', ' ').title(),
                    f"{weight:.1%}"
                )
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            with st.spinner(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ {selected_symbol}..."):
                df = self.get_data(selected_symbol, hours_back)
            
            if df.empty:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –†–∞—Å—á–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            df = self.calculate_4_criteria(df)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            main_chart = self.create_main_chart(df, selected_symbol)
            st.plotly_chart(main_chart, use_container_width=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            criteria_chart = self.create_criteria_chart(df)
            st.plotly_chart(criteria_chart, use_container_width=True)
        
        with col2:
            st.header("üéØ –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑")
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            current_data = df.iloc[-1]
            current_criteria = {
                'price_velocity': current_data['price_velocity'],
                'ema20_velocity': current_data['ema20_velocity'],
                'ema20_angle': current_data['ema20_angle'],
                'distance_to_ema20': current_data['distance_to_ema20']
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
            valid_criteria = True
            for key, value in current_criteria.items():
                if pd.isna(value) or np.isinf(value):
                    current_criteria[key] = 0.0
                    valid_criteria = False
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if valid_criteria:
                prediction = self.predict_minimum(current_criteria)
                
                if prediction:
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    if prediction['is_minimum']:
                        st.success("‚úÖ –ú–ò–ù–ò–ú–£–ú –û–ë–ù–ê–†–£–ñ–ï–ù!")
                        st.balloons()
                    else:
                        st.info("‚è≥ –ú–∏–Ω–∏–º—É–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                    
                    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    prob = prediction['probability']
                    st.metric(
                        "üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º—É–º–∞",
                        f"{prob:.1%}",
                        delta=f"{'–í—ã—Å–æ–∫–∞—è' if prob > 0.7 else '–°—Ä–µ–¥–Ω—è—è' if prob > 0.5 else '–ù–∏–∑–∫–∞—è'}"
                    )
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                    st.progress(prob)
                    
                    # –¢–æ—Ä–≥–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                    st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
                    if prob > 0.7 and current_criteria['distance_to_ema20'] < -1:
                        st.success("üöÄ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø LONG –ü–û–ó–ò–¶–ò–Ø")
                        st.markdown("**–£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:**")
                        st.markdown("- ‚úÖ –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –º–∏–Ω–∏–º—É–º–∞")
                        st.markdown("- ‚úÖ –¶–µ–Ω–∞ –Ω–∏–∂–µ EMA20")
                    elif prob > 0.5:
                        st.warning("‚ö†Ô∏è –í–û–ó–ú–û–ñ–ï–ù –ú–ò–ù–ò–ú–£–ú - –°–õ–ï–î–ò–¢–ï")
                    else:
                        st.info("üìä –û–ñ–ò–î–ê–ù–ò–ï")
            
            # –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
            st.header("üìä –¢–µ–∫—É—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏")
            
            for feature in self.feature_names:
                value = current_criteria[feature]
                weight = self.feature_weights.get(feature, 0.25)
                
                # –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                if feature == 'distance_to_ema20':
                    color = "normal" if value > -2 else "inverse"
                else:
                    color = "normal"
                
                st.metric(
                    feature.replace('_', ' ').title(),
                    f"{value:.3f}",
                    delta=f"–í–µ—Å: {weight:.1%}",
                    delta_color=color
                )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–µ
            st.header("üí∞ –¶–µ–Ω–∞")
            current_price = current_data['close']
            ema20 = current_data['ema20']
            
            st.metric(
                "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞",
                f"${current_price:.4f}",
                delta=f"EMA20: ${ema20:.4f}"
            )
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if auto_refresh:
            time.sleep(30)
            st.experimental_rerun()

def main():
    dashboard = MinimumDetectorDashboard()
    dashboard.run_dashboard()

if __name__ == "__main__":
    main()






