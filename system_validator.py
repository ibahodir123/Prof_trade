#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîç –í–ê–õ–ò–î–ê–¢–û–† –°–ò–°–¢–ï–ú–´ –ú–ò–ù–ò–ú–£–ú–û–í –ò –ú–ê–ö–°–ò–ú–£–ú–û–í
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–µ–Ω–¥–æ–≤
"""

import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import pickle
import warnings
warnings.filterwarnings('ignore')

class SystemValidator:
    def __init__(self):
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT']
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self.minimum_model = None
        self.maximum_model = None
        self.minimum_features = None
        self.maximum_features = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.validation_results = {
            'downtrend': {'minimums': [], 'maximums': []},
            'uptrend': {'minimums': [], 'maximums': []},
            'sideways': {'minimums': [], 'maximums': []},
            'insufficient_data': {'minimums': [], 'maximums': []},
            'unknown': {'minimums': [], 'maximums': []}
        }
        
        print("üîç –í–ê–õ–ò–î–ê–¢–û–† –°–ò–°–¢–ï–ú–´ –ú–ò–ù–ò–ú–£–ú–û–í –ò –ú–ê–ö–°–ò–ú–£–ú–û–í")
        print("=" * 50)
    
    def load_models(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üìÇ –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª–∏...")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∏—Å—Ç—É—é EMA –º–æ–¥–µ–ª—å –º–∞–∫—Å–∏–º—É–º–æ–≤
            with open('pure_ema_maximum_model_20250923_055329.pkl', 'rb') as f:
                self.maximum_model = pickle.load(f)
            
            with open('pure_ema_maximum_features_20250923_055329.pkl', 'rb') as f:
                self.maximum_features = pickle.load(f)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –º–∞–∫—Å–∏–º—É–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except FileNotFoundError:
            print("   ‚ùå –ú–æ–¥–µ–ª—å –º–∞–∫—Å–∏–º—É–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –º–∏–Ω–∏–º—É–º–æ–≤
            with open('practical_model_20250923_053051.pkl', 'rb') as f:
                self.minimum_model = pickle.load(f)
            
            with open('practical_features_20250923_053051.pkl', 'rb') as f:
                self.minimum_features = pickle.load(f)
            
            print("   ‚úÖ –ú–æ–¥–µ–ª—å –º–∏–Ω–∏–º—É–º–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except FileNotFoundError:
            print("   ‚ùå –ú–æ–¥–µ–ª—å –º–∏–Ω–∏–º—É–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        if not self.minimum_model or not self.maximum_model:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏!")
            return False
        
        return True
    
    def get_test_data(self, symbol: str, days: int = 15) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ {symbol} –∑–∞ {days} –¥–Ω–µ–π...")
            exchange = ccxt.binance()
            
            end_time = datetime.now()
            start_time = end_time - timedelta(days=days)
            
            since = int(start_time.timestamp() * 1000)
            end_ts = int(end_time.timestamp() * 1000)
            
            all_ohlcv = []
            current_since = since
            
            while current_since < end_ts:
                try:
                    ohlcv = exchange.fetch_ohlcv(symbol, '1h', since=current_since, limit=1000)
                    if not ohlcv:
                        break
                    
                    all_ohlcv.extend(ohlcv)
                    current_since = ohlcv[-1][0] + 1
                    
                    if current_since > end_ts:
                        break
                        
                    time.sleep(0.1)
                    
                except Exception as e:
                    break
            
            if not all_ohlcv:
                return pd.DataFrame()
            
            all_ohlcv = [candle for candle in all_ohlcv if candle[0] <= end_ts]
            
            df = pd.DataFrame(all_ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            # –î–æ–±–∞–≤–ª—è–µ–º EMA
            df['ema_20'] = df['close'].ewm(span=20).mean()
            df['ema_50'] = df['close'].ewm(span=50).mean()
            df['ema_100'] = df['close'].ewm(span=100).mean()
            
            print(f"   ‚úÖ {len(df)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return df
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            return pd.DataFrame()
    
    def determine_trend_type(self, df: pd.DataFrame, current_idx: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            if current_idx < 100:
                return "insufficient_data"
            
            current = df.iloc[current_idx]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ EMA
            if current['ema_20'] > current['ema_50'] > current['ema_100']:
                return "uptrend"
            elif current['ema_20'] < current['ema_50'] < current['ema_100']:
                return "downtrend"
            else:
                return "sideways"
                
        except Exception:
            return "unknown"
    
    def prepare_minimum_features(self, df: pd.DataFrame, idx: int) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∏–Ω–∏–º—É–º–æ–≤"""
        try:
            if idx < 50 or idx >= len(df) - 6:
                return None
            
            current = df.iloc[idx]
            prev = df.iloc[idx - 1]
            prev_2 = df.iloc[idx - 2]
            
            # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∏–Ω–∏–º—É–º–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            features = {
                'price_velocity': (current['close'] - prev['close']) / prev['close'],
                'ema20_velocity': (current['ema_20'] - prev['ema_20']) / prev['ema_20'],
                'ema50_velocity': (current['ema_50'] - prev['ema_50']) / prev['ema_50'],
                'ema100_velocity': (current['ema_100'] - prev['ema_100']) / prev['ema_100'],
                'price_acceleration': ((current['close'] - prev['close']) / prev['close']) - 
                                   ((prev['close'] - prev_2['close']) / prev_2['close']),
                'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean()
            }
            
            return features
            
        except Exception:
            return None
    
    def prepare_maximum_features(self, df: pd.DataFrame, idx: int) -> dict:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∞–∫—Å–∏–º—É–º–æ–≤"""
        try:
            if idx < 50 or idx >= len(df) - 6:
                return None
            
            current = df.iloc[idx]
            prev = df.iloc[idx - 1]
            prev_2 = df.iloc[idx - 2]
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –º–∞–∫—Å–∏–º—É–º–æ–≤
            price_velocity = (current['close'] - prev['close']) / prev['close']
            ema20_velocity = (current['ema_20'] - prev['ema_20']) / prev['ema_20']
            ema50_velocity = (current['ema_50'] - prev['ema_50']) / prev['ema_50']
            ema100_velocity = (current['ema_100'] - prev['ema_100']) / prev['ema_100']
            
            features = {
                'price_velocity': price_velocity,
                'ema20_velocity': ema20_velocity,
                'ema50_velocity': ema50_velocity,
                'ema100_velocity': ema100_velocity,
                'price_acceleration': price_velocity - ((prev['close'] - prev_2['close']) / prev_2['close']),
                'price_distance_ema20': (current['close'] - current['ema_20']) / current['ema_20'],
                'price_distance_ema50': (current['close'] - current['ema_50']) / current['ema_50'],
                'price_distance_ema100': (current['close'] - current['ema_100']) / current['ema_100'],
                'ema20_angle': ema20_velocity * 100,
                'ema50_angle': ema50_velocity * 100,
                'ema100_angle': ema100_velocity * 100,
                'volatility': df['close'].iloc[idx-20:idx].std() / df['close'].iloc[idx-20:idx].mean(),
                'distance_change_ema20': (current['close'] - current['ema_20']) / current['ema_20'] - 
                                       (prev['close'] - prev['ema_20']) / prev['ema_20'],
                'distance_change_ema50': (current['close'] - current['ema_50']) / current['ema_50'] - 
                                       (prev['close'] - prev['ema_50']) / prev['ema_50'],
                'velocity_ratio_price_ema20': price_velocity / ema20_velocity if ema20_velocity != 0 else 0,
                'velocity_ratio_ema20_ema50': ema20_velocity / ema50_velocity if ema50_velocity != 0 else 0,
                'velocity_ratio_ema50_ema100': ema50_velocity / ema100_velocity if ema100_velocity != 0 else 0,
                'ema20_to_ema50': (current['ema_20'] - current['ema_50']) / current['ema_50'],
                'ema50_to_ema100': (current['ema_50'] - current['ema_100']) / current['ema_100'],
                'ema20_to_ema100': (current['ema_20'] - current['ema_100']) / current['ema_100'],
                'ema20_slope': (current['ema_20'] - df.iloc[idx-5]['ema_20']) / 5,
                'ema50_slope': (current['ema_50'] - df.iloc[idx-5]['ema_50']) / 5,
                'ema100_slope': (current['ema_100'] - df.iloc[idx-5]['ema_100']) / 5,
                'ema20_ema50_ratio': current['ema_20'] / current['ema_50'],
                'ema50_ema100_ratio': current['ema_50'] / current['ema_100'],
                'ema20_ema100_ratio': current['ema_20'] / current['ema_100']
            }
            
            return features
            
        except Exception:
            return None
    
    def find_local_extremes(self, df: pd.DataFrame) -> tuple:
        """–ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤ –∏ –º–∞–∫—Å–∏–º—É–º–æ–≤"""
        minimums = []
        maximums = []
        
        for i in range(10, len(df) - 10):
            current_low = df.iloc[i]['low']
            current_high = df.iloc[i]['high']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            is_minimum = True
            for j in range(max(0, i-5), min(len(df), i+6)):
                if j != i and df.iloc[j]['low'] <= current_low:
                    is_minimum = False
                    break
            
            if is_minimum:
                minimums.append({
                    'idx': i,
                    'time': df.index[i],
                    'price': current_low,
                    'trend': self.determine_trend_type(df, i)
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            is_maximum = True
            for j in range(max(0, i-5), min(len(df), i+6)):
                if j != i and df.iloc[j]['high'] >= current_high:
                    is_maximum = False
                    break
            
            if is_maximum:
                maximums.append({
                    'idx': i,
                    'time': df.index[i],
                    'price': current_high,
                    'trend': self.determine_trend_type(df, i)
                })
        
        return minimums, maximums
    
    def test_models_on_symbol(self, symbol: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å–∏–º–≤–æ–ª–µ"""
        print(f"\nüß™ –¢–ï–°–¢–ò–†–£–Æ {symbol}")
        print("-" * 30)
        
        df = self.get_test_data(symbol, days=15)
        if df.empty:
            print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
        minimums, maximums = self.find_local_extremes(df)
        
        print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: {len(minimums)} –º–∏–Ω–∏–º—É–º–æ–≤, {len(maximums)} –º–∞–∫—Å–∏–º—É–º–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –º–∏–Ω–∏–º—É–º–æ–≤
        if self.minimum_model:
            print(f"\n   üéØ –¢–ï–°–¢ –ú–û–î–ï–õ–ò –ú–ò–ù–ò–ú–£–ú–û–í:")
            valid_minimums = [m for m in minimums[:10] if m['trend'] in ['downtrend', 'uptrend', 'sideways']]
            for minimum in valid_minimums:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
                features = self.prepare_minimum_features(df, minimum['idx'])
                if features:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
                    feature_list = [features.get(name, 0) for name in self.minimum_features]
                    prediction = self.minimum_model.predict([feature_list])[0]
                    probability = self.minimum_model.predict_proba([feature_list])[0]
                    
                    result = {
                        'time': minimum['time'],
                        'price': minimum['price'],
                        'trend': minimum['trend'],
                        'prediction': prediction,
                        'confidence': max(probability),
                        'is_good_entry': prediction == 1
                    }
                    
                    self.validation_results[minimum['trend']]['minimums'].append(result)
                    
                    trend_emoji = {"downtrend": "üìâ", "uptrend": "üìà", "sideways": "‚ÜîÔ∏è"}.get(minimum['trend'], "‚ùì")
                    print(f"     {trend_emoji} {minimum['trend']}: {minimum['price']:.4f} - {'‚úÖ' if prediction == 1 else '‚ùå'} ({max(probability):.2f})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –º–∞–∫—Å–∏–º—É–º–æ–≤
        if self.maximum_model:
            print(f"\n   üî∫ –¢–ï–°–¢ –ú–û–î–ï–õ–ò –ú–ê–ö–°–ò–ú–£–ú–û–í:")
            valid_maximums = [m for m in maximums[:10] if m['trend'] in ['downtrend', 'uptrend', 'sideways']]
            for maximum in valid_maximums:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
                features = self.prepare_maximum_features(df, maximum['idx'])
                if features:
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
                    feature_list = [features.get(name, 0) for name in self.maximum_features]
                    prediction = self.maximum_model.predict([feature_list])[0]
                    probability = self.maximum_model.predict_proba([feature_list])[0]
                    
                    result = {
                        'time': maximum['time'],
                        'price': maximum['price'],
                        'trend': maximum['trend'],
                        'prediction': prediction,
                        'confidence': max(probability),
                        'is_good_exit': prediction == 1
                    }
                    
                    self.validation_results[maximum['trend']]['maximums'].append(result)
                    
                    trend_emoji = {"downtrend": "üìâ", "uptrend": "üìà", "sideways": "‚ÜîÔ∏è"}.get(maximum['trend'], "‚ùì")
                    print(f"     {trend_emoji} {maximum['trend']}: {maximum['price']:.4f} - {'‚úÖ' if prediction == 1 else '‚ùå'} ({max(probability):.2f})")
    
    def analyze_validation_results(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–ê–õ–ò–î–ê–¶–ò–ò")
        print("=" * 50)
        
        for trend_type in ['downtrend', 'uptrend', 'sideways']:
            print(f"\n{trend_type.upper()}:")
            
            # –ê–Ω–∞–ª–∏–∑ –º–∏–Ω–∏–º—É–º–æ–≤
            minimums = self.validation_results[trend_type]['minimums']
            if minimums:
                good_entries = sum(1 for m in minimums if m['is_good_entry'])
                avg_confidence = np.mean([m['confidence'] for m in minimums])
                print(f"  üìâ –ú–∏–Ω–∏–º—É–º—ã: {len(minimums)} –Ω–∞–π–¥–µ–Ω–æ, {good_entries} —Ö–æ—Ä–æ—à–∏—Ö –≤—Ö–æ–¥–æ–≤ ({good_entries/len(minimums)*100:.1f}%), —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            else:
                print(f"  üìâ –ú–∏–Ω–∏–º—É–º—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ê–Ω–∞–ª–∏–∑ –º–∞–∫—Å–∏–º—É–º–æ–≤
            maximums = self.validation_results[trend_type]['maximums']
            if maximums:
                good_exits = sum(1 for m in maximums if m['is_good_exit'])
                avg_confidence = np.mean([m['confidence'] for m in maximums])
                print(f"  üìà –ú–∞–∫—Å–∏–º—É–º—ã: {len(maximums)} –Ω–∞–π–¥–µ–Ω–æ, {good_exits} —Ö–æ—Ä–æ—à–∏—Ö –≤—ã—Ö–æ–¥–æ–≤ ({good_exits/len(maximums)*100:.1f}%), —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2f}")
            else:
                print(f"  üìà –ú–∞–∫—Å–∏–º—É–º—ã: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def run_validation(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –í–ê–õ–ò–î–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        if not self.load_models():
            return
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º —Å–∏–º–≤–æ–ª–µ
        for symbol in self.symbols:
            self.test_models_on_symbol(symbol)
            time.sleep(1)
        
        # 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_validation_results()
        
        print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        
        # 4. –í—ã–≤–æ–¥—ã
        print(f"\nüéØ –í–´–í–û–î–´:")
        print(f"- –ú–æ–¥–µ–ª—å –º–∏–Ω–∏–º—É–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
        print(f"- –ú–æ–¥–µ–ª—å –º–∞–∫—Å–∏–º—É–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö —Ç—Ä–µ–Ω–¥–æ–≤")
        print(f"- –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–º—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")

if __name__ == "__main__":
    validator = SystemValidator()
    validator.run_validation()
