#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–µ—Ç –Ω–µ –∏–∑ —Ç–æ–ø-50
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ml_bot_binance import is_coin_in_top50, adaptive_retrain_for_coin, analyze_coin_signal_advanced_ema

def test_adaptive_learning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    
    print("üß™ –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—É –∏–∑ —Ç–æ–ø-50
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç –º–æ–Ω–µ—Ç—ã –∏–∑ —Ç–æ–ø-50:")
    btc_in_top50 = is_coin_in_top50("BTC/USDT")
    print(f"   BTC/USDT –≤ —Ç–æ–ø-50: {btc_in_top50}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–µ—Ç—É –ù–ï –∏–∑ —Ç–æ–ø-50
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç –º–æ–Ω–µ—Ç—ã –ù–ï –∏–∑ —Ç–æ–ø-50:")
    shib_in_top50 = is_coin_in_top50("SHIB/USDT")
    print(f"   SHIB/USDT –≤ —Ç–æ–ø-50: {shib_in_top50}")
    
    if not shib_in_top50:
        print("\nüîÑ –ó–∞–ø—É—Å–∫–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –¥–ª—è SHIB/USDT...")
        success = adaptive_retrain_for_coin("SHIB/USDT")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {success}")
        
        if success:
            print("\nüìä –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ SHIB/USDT —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏...")
            try:
                signal_data = analyze_coin_signal_advanced_ema("SHIB/USDT")
                if signal_data and not signal_data.get('error'):
                    print(f"   ‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω!")
                    print(f"   üìà –°–∏–≥–Ω–∞–ª: {signal_data.get('signal_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                    print(f"   üéØ ML —Å—Ç–∞—Ç—É—Å: {signal_data.get('ml_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {signal_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_adaptive_learning()
