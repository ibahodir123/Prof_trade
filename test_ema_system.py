#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞
"""

from ema_pattern_analyzer import EMAPatternAnalyzer
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

def test_ema_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2025-01-01', periods=200, freq='1H')
    trend_data = []
    
    base_price = 100
    for i in range(200):
        if i < 50:  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            price = base_price + i * 0.5 + np.random.normal(0, 1)
        elif i < 80:  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
            price = base_price + 50 * 0.5 - (i - 50) * 0.3 + np.random.normal(0, 1)
        elif i < 130:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
            price = base_price + 50 * 0.5 - 30 * 0.3 + (i - 80) * 0.4 + np.random.normal(0, 1)
        else:  # –§–ª–µ—Ç
            price = base_price + 50 * 0.5 - 30 * 0.3 + 50 * 0.4 + np.random.normal(0, 0.5)
        
        trend_data.append({
            'open': price + np.random.normal(0, 0.5),
            'high': price + abs(np.random.normal(0, 1)),
            'low': price - abs(np.random.normal(0, 1)),
            'close': price,
            'volume': np.random.uniform(1000, 10000)
        })
    
    df = pd.DataFrame(trend_data, index=dates)
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = EMAPatternAnalyzer()
    result = analyzer.analyze_ema_patterns(df)
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ EMA –ê–ù–ê–õ–ò–ó–ê:")
    print(f"–¢—Ä–µ–Ω–¥: {result['trend']}")
    print(f"–§–∞–∑–∞: {result['phase']}")
    print(f"–°–∏–≥–Ω–∞–ª: {result['signal']['type']}")
    print(f"–ü—Ä–∏—á–∏–Ω–∞: {result['signal']['reason']}")
    
    if 'entry_price' in result['signal']:
        print(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${result['signal']['entry_price']:.4f}")
        print(f"Take Profit: ${result['signal']['take_profit']:.4f}")
        print(f"Stop Loss: ${result['signal']['stop_loss']:.4f}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['signal']['confidence']:.2f}")
    
    print(f"\nüìä EMA –£–†–û–í–ù–ò:")
    levels = result['levels']
    print(f"EMA 20: ${levels['ema_20']:.4f}")
    print(f"EMA 50: ${levels['ema_50']:.4f}")
    print(f"EMA 100: ${levels['ema_100']:.4f}")
    
    print(f"\n‚úÖ EMA —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    return result

def test_ema_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
    
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range('2025-01-01', periods=100, freq='1H')
    data = []
    
    for i in range(100):
        price = 100 + i * 0.1 + np.random.normal(0, 0.5)
        data.append({
            'open': price,
            'high': price + 1,
            'low': price - 1,
            'close': price,
            'volume': 1000
        })
    
    df = pd.DataFrame(data, index=dates)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    analyzer = EMAPatternAnalyzer()
    features = analyzer.calculate_ema_features(df)
    
    print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ {len(features.columns)} EMA –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    key_features = [
        'ema_20', 'ema_50', 'ema_100',
        'ema_20_speed', 'ema_50_speed', 'ema_100_speed',
        'price_speed', 'trend_strength', 'ema_trend_direction'
    ]
    
    for feature in key_features:
        if feature in features.columns:
            value = features[feature].iloc[-1]
            print(f"  {feature}: {value:.4f}")
    
    print(f"\n‚úÖ EMA –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    
    return features

if __name__ == "__main__":
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º EMA –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        result = test_ema_analyzer()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º EMA –ø—Ä–∏–∑–Ω–∞–∫–∏
        features = test_ema_features()
        
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print(f"üìà EMA —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –±–æ—Ç–µ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()




