#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ML –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Ä–∞–±–æ—Ç—ã
"""

import logging
import numpy as np
import joblib
import json
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_ml_models():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö ML –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é ML –º–æ–¥–µ–ª–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        model_files = [
            'models/entry_model.pkl',
            'models/exit_model.pkl', 
            'models/ema_scaler.pkl',
            'models/feature_names.pkl'
        ]
        
        for file_path in model_files:
            if not os.path.exists(file_path):
                logger.error(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
            else:
                logger.info(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        entry_model = joblib.load('models/entry_model.pkl')
        exit_model = joblib.load('models/exit_model.pkl')
        scaler = joblib.load('models/ema_scaler.pkl')
        feature_names = joblib.load('models/feature_names.pkl')
        
        logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {scaler.n_features_in_}")
        logger.info(f"üìä –ò–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_names}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤)
        test_features = np.array([
            [50000.0, 49000.0, 48000.0,  # EMA 20, 50, 100
             0.02, 0.015,  # –°–∫–æ—Ä–æ—Å—Ç–∏ EMA
             -0.03, 0.02, -0.025,  # –û—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω—ã –∫ EMA
             15.5, 2.0]  # –£–≥–æ–ª —Ç—Ä–µ–Ω–¥–∞, —Ç–∏–ø —Ç—Ä–µ–Ω–¥–∞
        ])
        
        logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {test_features[0]}")
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        test_features_scaled = scaler.transform(test_features)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if hasattr(entry_model, 'predict_proba') and hasattr(exit_model, 'predict_proba'):
            entry_prob = entry_model.predict_proba(test_features_scaled)[0][1]
            exit_prob = exit_model.predict_proba(test_features_scaled)[0][1]
            
            logger.info(f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞: {entry_prob:.3f}")
            logger.info(f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞: {exit_prob:.3f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç (–Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 0.00)
            if entry_prob > 0 and exit_prob > 0:
                logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
                if entry_prob > 0.4:
                    logger.info("üü¢ –°–∏–≥–Ω–∞–ª LONG (–≤—Ö–æ–¥)")
                elif exit_prob > 0.4:
                    logger.info("üî¥ –°–∏–≥–Ω–∞–ª SHORT (–≤—ã—Ö–æ–¥)")
                else:
                    logger.info("‚ö™Ô∏è –°–∏–≥–Ω–∞–ª –û–ñ–ò–î–ê–ù–ò–ï")
                
                return True
            else:
                logger.error("‚ùå –ú–æ–¥–µ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 0.00 - –ø—Ä–æ–±–ª–µ–º–∞!")
                return False
        else:
            logger.error("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç predict_proba")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def show_training_metadata():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        metadata_file = 'models/training_metadata.json'
        if os.path.exists(metadata_file):
            with open(metadata_file, 'r', encoding='utf-8') as f:
                metadata = json.load(f)
            
            logger.info("üìÅ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:")
            logger.info(f"   –î–∞—Ç–∞: {metadata.get('training_date')}")
            logger.info(f"   –°–∏–º–≤–æ–ª—ã: {', '.join(metadata.get('symbols_used', []))}")
            logger.info(f"   –û–±—Ä–∞–∑—Ü–æ–≤: {metadata.get('samples_count')}")
            logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–∞: {metadata.get('entry_model_score', 0):.3f}")
            logger.info(f"   –ö–∞—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–∞: {metadata.get('exit_model_score', 0):.3f}")
            logger.info(f"   –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {metadata.get('data_source')}")
            
            if metadata.get('data_source') == 'real_binance_historical':
                logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö!")
            else:
                logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –ù–ï –æ–±—É—á–µ–Ω—ã –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    show_training_metadata()
    print()
    
    success = test_ml_models()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("ü§ñ ML –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")



