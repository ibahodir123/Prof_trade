#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

from ml_bot_binance import analyze_coin_signal_ema
import logging

def test_real_ema_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO)
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EMA –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö
    test_coins = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT']
    
    results = []
    
    for coin in test_coins:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {coin}...")
        try:
            result = analyze_coin_signal_ema(coin)
            
            if result.get('error'):
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                results.append({
                    'coin': coin,
                    'status': 'ERROR',
                    'error': result['error']
                })
            else:
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['signal_type']}")
                print(f"üìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {result['strength_text']}")
                print(f"üí∞ –¶–µ–Ω–∞: ${result['entry_price']:.8f}")
                
                if result.get('take_profit'):
                    print(f"üéØ TP: ${result['take_profit']:.8f}")
                if result.get('stop_loss'):
                    print(f"üõ°Ô∏è SL: ${result['stop_loss']:.8f}")
                    
                ema_analysis = result.get('ema_analysis', {})
                print(f"üìà –¢—Ä–µ–Ω–¥: {ema_analysis.get('trend', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                print(f"üîÑ –§–∞–∑–∞: {ema_analysis.get('phase', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}")
                print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ema_analysis.get('confidence', 0)*100:.1f}%")
                
                results.append({
                    'coin': coin,
                    'status': 'SUCCESS',
                    'signal': result['signal_type'],
                    'trend': ema_analysis.get('trend', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'),
                    'phase': ema_analysis.get('phase', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'),
                    'confidence': ema_analysis.get('confidence', 0)*100
                })
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {coin}: {e}")
            results.append({
                'coin': coin,
                'status': 'CRITICAL_ERROR',
                'error': str(e)
            })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –º–æ–Ω–µ—Ç")
    
    successful = [r for r in results if r['status'] == 'SUCCESS']
    errors = [r for r in results if r['status'] in ['ERROR', 'CRITICAL_ERROR']]
    
    print(f"–£—Å–ø–µ—à–Ω–æ: {len(successful)}")
    print(f"–û—à–∏–±–æ–∫: {len(errors)}")
    
    if successful:
        print(f"\nüéØ –°–ò–ì–ù–ê–õ–´:")
        for result in successful:
            print(f"  {result['coin']}: {result['signal']} ({result['trend']}, {result['confidence']:.1f}%)")
    
    if errors:
        print(f"\n‚ùå –û–®–ò–ë–ö–ò:")
        for result in errors:
            print(f"  {result['coin']}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    return results

if __name__ == "__main__":
    try:
        results = test_real_ema_analysis()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()




