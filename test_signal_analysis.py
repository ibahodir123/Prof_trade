#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
"""

import logging
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auto_signals_bot import AutoSignalsBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_signal_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = AutoSignalsBot()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if not bot.load_models():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Binance
        bot.initialize_binance()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        test_symbol = 'BTC/USDT'
        logger.info(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {test_symbol}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            ohlcv = bot.binance.fetch_ohlcv(test_symbol, '1h', limit=100)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {test_symbol}: {len(ohlcv)} —Å–≤–µ—á–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {test_symbol}: {e}")
            return False
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
        try:
            signal = await bot.analyze_coin_signal(test_symbol, ohlcv)
            if signal:
                logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ {test_symbol}:")
                logger.info(f"   –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞: {signal.get('signal_type', '–ù–ï–¢')}")
                logger.info(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {signal.get('probability', 0):.1f}%")
                logger.info(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.get('entry_price', 0):.8f}")
                logger.info(f"   ML –≤—Ö–æ–¥: {signal.get('ml_entry_prob', 0):.3f}")
                logger.info(f"   ML –≤—ã—Ö–æ–¥: {signal.get('ml_exit_prob', 0):.3f}")
                
                if signal.get('signal_type') != '‚ö™ –û–ñ–ò–î–ê–ù–ò–ï':
                    logger.info("‚úÖ –°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                    return True
                else:
                    logger.info("‚ö™Ô∏è –°–∏–≥–Ω–∞–ª –û–ñ–ò–î–ê–ù–ò–ï (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                    return True
            else:
                logger.error("‚ùå –°–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("=" * 50)
    
    success = await test_signal_analysis()
    
    print("\n" + "=" * 50)
    if success:
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("ü§ñ –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìä ML –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
    else:
        print("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

if __name__ == "__main__":
    asyncio.run(main())
