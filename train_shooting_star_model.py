#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö -> –æ–±—É—á–µ–Ω–∏–µ -> —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
import os
import sys
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('training.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ –ü–û–õ–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø –°–¢–†–ï–õ–Ø–Æ–©–ò–• –ú–û–ù–ï–¢")
    print("=" * 70)
    print(f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    start_time = time.time()
    
    try:
        # –®–∞–≥ 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –≠–¢–ê–ü 1: –°–ë–û–† –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•")
        print("-" * 50)
        
        from data_collector import HistoricalDataCollector
        
        collector = HistoricalDataCollector()
        data = collector.collect_all_data(max_pairs=100)  # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 100 –º–æ–Ω–µ—Ç
        
        if not data:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        collector.save_data(data, "historical_data_full.json")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_records = sum(len(df) for df in data.values())
        shooting_stars = sum(
            df['is_shooting_star'].sum() 
            for df in data.values() 
            if 'is_shooting_star' in df.columns
        )
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã:")
        print(f"   - –ú–æ–Ω–µ—Ç: {len(data)}")
        print(f"   - –ó–∞–ø–∏—Å–µ–π: {total_records:,}")
        print(f"   - –°—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {shooting_stars:,}")
        print(f"   - –ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö: {(shooting_stars/total_records*100):.2f}%")
        
        # –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        print("\nüß† –≠–¢–ê–ü 2: –û–ë–£–ß–ï–ù–ò–ï –ù–ï–ô–†–û–ù–ù–û–ô –°–ï–¢–ò")
        print("-" * 50)
        
        from neural_network_predictor import ShootingStarPredictor
        
        predictor = ShootingStarPredictor()
        
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
        success = predictor.train(data)
        
        if not success:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
            return False
        
        print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print("\nüß™ –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("-" * 50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö
        test_coins = list(data.keys())[:5]
        
        for coin in test_coins:
            try:
                df = data[coin]
                prediction = predictor.predict(df)
                
                if prediction:
                    print(f"üìä {coin}:")
                    print(f"   - –ö–ª–∞—Å—Å: {prediction['predicted_class']}")
                    print(f"   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—è—é—â–µ–π: {prediction['shooting_star_probability']:.1%}")
                    print(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['confidence']:.1%}")
                else:
                    print(f"‚ùå {coin}: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
                    
            except Exception as e:
                print(f"‚ùå {coin}: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - {e}")
        
        # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüíæ –≠–¢–ê–ü 4: –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("-" * 50)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        predictor.save_model("shooting_star_model_final")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = {
            'training_date': datetime.now().isoformat(),
            'training_duration_minutes': (time.time() - start_time) / 60,
            'coins_processed': len(data),
            'total_records': total_records,
            'shooting_stars_found': shooting_stars,
            'shooting_stars_percentage': shooting_stars / total_records * 100,
            'model_parameters': {
                'sequence_length': predictor.sequence_length,
                'prediction_horizon': predictor.prediction_horizon
            }
        }
        
        import json
        with open('training_report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print("   - –ú–æ–¥–µ–ª—å: shooting_star_model_final.h5")
        print("   - –°–∫–µ–π–ª–µ—Ä: shooting_star_model_final_scaler.pkl")
        print("   - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: shooting_star_model_final_metadata.json")
        print("   - –û—Ç—á–µ—Ç: training_report.json")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        end_time = time.time()
        duration = end_time - start_time
        
        print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 70)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration/60:.1f} –º–∏–Ω—É—Ç")
        print(f"üìä –ú–æ–Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(data)}")
        print(f"üß† –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: ‚úÖ")
        print(f"üéØ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º: ‚úÖ")
        print("=" * 70)
        
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ shooting_star_bot.py –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /shooting_stars –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–µ–ª—è—é—â–∏—Ö –º–æ–Ω–µ—Ç")
        print("3. –ú–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"\n‚ùå –û–ë–£–ß–ï–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: {e}")
        return False

def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ú–û–î–ï–õ–ò")
    print("=" * 40)
    
    try:
        from data_collector import HistoricalDataCollector
        from neural_network_predictor import ShootingStarPredictor
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è 10 –º–æ–Ω–µ—Ç
        collector = HistoricalDataCollector()
        data = collector.collect_all_data(max_pairs=10)
        
        if data:
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            predictor = ShootingStarPredictor()
            success = predictor.train(data)
            
            if success:
                print("‚úÖ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç–µ
                test_coin = list(data.keys())[0]
                prediction = predictor.predict(data[test_coin])
                
                if prediction:
                    print(f"üéØ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {test_coin}:")
                    print(f"   - –ö–ª–∞—Å—Å: {prediction['predicted_class']}")
                    print(f"   - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–µ–ª—è—é—â–µ–π: {prediction['shooting_star_probability']:.1%}")
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
                return False
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--quick":
        # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
        success = quick_test()
    else:
        # –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        success = main()
    
    sys.exit(0 if success else 1)


