#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä
"""

from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_socketio import SocketIO, emit
import json
import os
import sys
import threading
import time
import psutil
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import plotly
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import ccxt
import pickle
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from optimized_ml_bot import OptimizedMLBot
from bot_config import load_config

class WebTradingDashboard:
    def __init__(self):
        self.app = Flask(__name__)
        self.app.secret_key = 'your-secret-key-here'
        self.socketio = SocketIO(self.app)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        self.bot = None
        self.bot_thread = None
        self.bot_running = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config = load_config()
        self.symbols = ['BTC/USDT', 'ETH/USDT', 'ADA/USDT', 'XRP/USDT', 'SOL/USDT', 'BNB/USDT']
        self.update_interval = 5  # —Å–µ–∫—É–Ω–¥—ã

        self.setup_routes()
        self.setup_socket_events()

    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""

        @self.app.route('/')
        def index():
            return render_template('dashboard.html',
                                 symbols=self.symbols,
                                 config=self.config)

        @self.app.route('/api/bot/status')
        def bot_status():
            """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
            return jsonify({
                'running': self.bot_running,
                'uptime': self.get_bot_uptime() if self.bot_running else 0,
                'cpu_usage': psutil.cpu_percent(),
                'memory_usage': psutil.virtual_memory().percent,
                'timestamp': datetime.now().isoformat()
            })

        @self.app.route('/api/bot/start', methods=['POST'])
        def start_bot():
            """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
            if not self.bot_running:
                try:
                    self.start_bot_thread()
                    return jsonify({'success': True, 'message': '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'})
                except Exception as e:
                    return jsonify({'success': False, 'error': str(e)})
            return jsonify({'success': False, 'error': '–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'})

        @self.app.route('/api/bot/stop', methods=['POST'])
        def stop_bot():
            """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
            if self.bot_running:
                try:
                    self.stop_bot_thread()
                    return jsonify({'success': True, 'message': '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
                except Exception as e:
                    return jsonify({'success': False, 'error': str(e)})
            return jsonify({'success': False, 'error': '–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω'})

        @self.app.route('/api/market/data')
        def market_data():
            """–î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞"""
            try:
                exchange = ccxt.binance()
                symbol = request.args.get('symbol', 'BTC/USDT')
                timeframe = request.args.get('timeframe', '1h')
                limit = int(request.args.get('limit', 100))

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)

                if ohlcv:
                    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
                    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
                    df = df.set_index('timestamp')

                    # –†–∞—Å—á–µ—Ç EMA20
                    df['ema20'] = df['close'].ewm(span=20).mean()

                    return jsonify({
                        'success': True,
                        'data': df.to_dict('records'),
                        'symbol': symbol
                    })
                else:
                    return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'})

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)})

        @self.app.route('/api/signals/current')
        def current_signals():
            """–¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã"""
            try:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
                signals = {
                    'BTC/USDT': {
                        'signal': 'BUY',
                        'probability': 0.87,
                        'price': 45000,
                        'timestamp': datetime.now().isoformat()
                    },
                    'ETH/USDT': {
                        'signal': 'HOLD',
                        'probability': 0.45,
                        'price': 2500,
                        'timestamp': datetime.now().isoformat()
                    }
                }

                return jsonify({'success': True, 'signals': signals})

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)})

        @self.app.route('/api/statistics')
        def statistics():
            """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
            try:
                # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = {
                    'total_trades': 1250,
                    'win_rate': 87.2,
                    'total_profit': 132.85,
                    'max_drawdown': 0.4,
                    'current_positions': 3,
                    'daily_pnl': 2.34
                }

                return jsonify({'success': True, 'statistics': stats})

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)})

        @self.app.route('/api/risk/settings')
        def risk_settings():
            """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤"""
            try:
                risk_config = {
                    'max_drawdown': 20,
                    'max_position_size': 3,
                    'max_positions': 5,
                    'stop_loss_percent': 2,
                    'take_profit_percent': 5
                }

                return jsonify({'success': True, 'risk_settings': risk_config})

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)})

    def setup_socket_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO —Å–æ–±—ã—Ç–∏–π"""

        @self.socketio.on('connect')
        def handle_connect():
            print('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥—É')
            emit('status', {'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É –¥–∞—à–±–æ—Ä–¥—É'})

        @self.socketio.on('disconnect')
        def handle_disconnect():
            print('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω')

        @self.socketio.on('request_update')
        def handle_update_request(data):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
            self.emit_dashboard_update()

    def emit_dashboard_update(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            status = {
                'running': self.bot_running,
                'timestamp': datetime.now().isoformat(),
                'cpu_usage': psutil.cpu_percent(),
                'memory_usage': psutil.virtual_memory().percent
            }

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Socket.IO
            self.socketio.emit('dashboard_update', status)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

    def start_bot_thread(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.bot_thread and self.bot_thread.is_alive():
            return

        self.bot_running = True
        self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
        self.bot_thread.start()

    def stop_bot_thread(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.bot_running = False
        if self.bot_thread:
            self.bot_thread.join(timeout=5)

    def _run_bot(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
            self.bot = OptimizedMLBot()

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
            while self.bot_running:
                try:
                    # –ó–¥–µ—Å—å –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞
                    # self.bot.run_cycle()

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                    self.emit_dashboard_update()

                    # –ü–∞—É–∑–∞
                    time.sleep(self.update_interval)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
                    time.sleep(5)

            print("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.bot_running = False

    def get_bot_uptime(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        if self.bot_thread and self.bot_thread.is_alive():
            return time.time() - getattr(self.bot_thread, 'start_time', time.time())
        return 0

    def create_templates(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–æ–≤"""
        templates_dir = os.path.join(os.path.dirname(__file__), 'templates')
        static_dir = os.path.join(os.path.dirname(__file__), 'static')

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        os.makedirs(templates_dir, exist_ok=True)
        os.makedirs(static_dir, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        dashboard_html = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –ë–æ—Ç - Dashboard</title>
    <script src="https://cdn.socket.io/4.0.0/socket.io.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="#">ü§ñ Trading Bot Dashboard</a>
            <div class="navbar-nav">
                <a class="nav-link active" href="#dashboard">–î–∞—à–±–æ—Ä–¥</a>
                <a class="nav-link" href="#signals">–°–∏–≥–Ω–∞–ª—ã</a>
                <a class="nav-link" href="#statistics">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                <a class="nav-link" href="#risk">–†–∏—Å–∫–∏</a>
                <a class="nav-link" href="#settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-4">
        <!-- –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <button id="startBtn" class="btn btn-success btn-lg me-2" onclick="startBot()">
                                    ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
                                </button>
                                <button id="stopBtn" class="btn btn-danger btn-lg" onclick="stopBot()">
                                    ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
                                </button>
                            </div>
                            <div class="col-md-6">
                                <div id="botStatus" class="alert alert-secondary">
                                    üîÑ –°—Ç–∞—Ç—É—Å: <span id="statusText">–ü—Ä–æ–≤–µ—Ä–∫–∞...</span>
                                </div>
                                <div class="row">
                                    <div class="col-sm-6">
                                        <small>CPU: <span id="cpuUsage">0%</span></small>
                                    </div>
                                    <div class="col-sm-6">
                                        <small>RAM: <span id="memoryUsage">0%</span></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ -->
        <div class="row">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h5>üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã</h5>
                    </div>
                    <div class="card-body">
                        <div id="priceChart"></div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-header">
                        <h5>üéØ –¢–µ–∫—É—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã</h5>
                    </div>
                    <div class="card-body">
                        <div id="signalsList"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏</h5>
                    </div>
                    <div class="card-body">
                        <div class="row" id="statisticsContent">
                            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–¥–µ—Å—å -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();

        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        socket.on('connect', function() {
            console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            updateStatus();
            requestUpdate();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        socket.on('dashboard_update', function(data) {
            updateStatus();
            updateCharts();
        });

        function updateStatus() {
            fetch('/api/bot/status')
                .then(response => response.json())
                .then(data => {
                    const statusText = document.getElementById('statusText');
                    const cpuUsage = document.getElementById('cpuUsage');
                    const memoryUsage = document.getElementById('memoryUsage');
                    const startBtn = document.getElementById('startBtn');
                    const stopBtn = document.getElementById('stopBtn');
                    const botStatus = document.getElementById('botStatus');

                    if (data.running) {
                        statusText.textContent = '–ó–∞–ø—É—â–µ–Ω';
                        botStatus.className = 'alert alert-success';
                        startBtn.disabled = true;
                        stopBtn.disabled = false;
                    } else {
                        statusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω';
                        botStatus.className = 'alert alert-warning';
                        startBtn.disabled = false;
                        stopBtn.disabled = true;
                    }

                    cpuUsage.textContent = data.cpu_usage + '%';
                    memoryUsage.textContent = data.memory_usage + '%';
                });
        }

        function startBot() {
            fetch('/api/bot/start', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                        updateStatus();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.error);
                    }
                });
        }

        function stopBot() {
            fetch('/api/bot/stop', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                        updateStatus();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.error);
                    }
                });
        }

        function requestUpdate() {
            socket.emit('request_update', {});
            setTimeout(requestUpdate, 5000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        }

        function updateCharts() {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã
            fetch('/api/market/data?symbol=BTC/USDT&limit=100')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        createPriceChart(data.data, data.symbol);
                    }
                });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            fetch('/api/signals/current')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateSignals(data.signals);
                    }
                });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            fetch('/api/statistics')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateStatistics(data.statistics);
                    }
                });
        }

        function createPriceChart(data, symbol) {
            const timestamps = data.map(d => d.timestamp);
            const prices = data.map(d => d.close);
            const ema20 = data.map(d => d.ema20);

            const trace1 = {
                x: timestamps,
                y: prices,
                type: 'scatter',
                mode: 'lines',
                name: '–¶–µ–Ω–∞',
                line: { color: 'blue' }
            };

            const trace2 = {
                x: timestamps,
                y: ema20,
                type: 'scatter',
                mode: 'lines',
                name: 'EMA20',
                line: { color: 'red' }
            };

            const layout = {
                title: symbol + ' - –¶–µ–Ω–∞ –∏ EMA20',
                xaxis: { title: '–í—Ä–µ–º—è' },
                yaxis: { title: '–¶–µ–Ω–∞ (USDT)' },
                height: 400
            };

            Plotly.newPlot('priceChart', [trace1, trace2], layout);
        }

        function updateSignals(signals) {
            const signalsList = document.getElementById('signalsList');
            let html = '';

            for (const [symbol, signal] of Object.entries(signals)) {
                const signalClass = signal.signal === 'BUY' ? 'success' : signal.signal === 'SELL' ? 'danger' : 'warning';
                html += `
                    <div class="alert alert-${signalClass} mt-2">
                        <strong>${symbol}</strong>: ${signal.signal}<br>
                        <small>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${(signal.probability * 100).toFixed(1)}% | –¶–µ–Ω–∞: $${signal.price}</small>
                    </div>
                `;
            }

            signalsList.innerHTML = html;
        }

        function updateStatistics(stats) {
            const content = document.getElementById('statisticsContent');
            content.innerHTML = `
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <h5>–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫</h5>
                            <h3>${stats.total_trades}</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h5>Win Rate</h5>
                            <h3>${stats.win_rate}%</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h5>–ü—Ä–∏–±—ã–ª—å</h5>
                            <h3>${stats.total_profit}%</h3>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <h5>–ü–æ–∑–∏—Ü–∏–π</h5>
                            <h3>${stats.current_positions}</h3>
                        </div>
                    </div>
                </div>
            `;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        updateCharts();
    </script>
</body>
</html>
        """

        with open(os.path.join(templates_dir, 'dashboard.html'), 'w', encoding='utf-8') as f:
            f.write(dashboard_html)

    def run(self, host='0.0.0.0', port=5000, debug=False):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        self.create_templates()

        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        server_thread = threading.Thread(
            target=lambda: self.app.run(host=host, port=port, debug=debug),
            daemon=True
        )
        server_thread.start()

        print(f"‚úÖ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –≤—ã—à–µ")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while server_thread.is_alive():
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")

        return server_thread

def main():
    dashboard = WebTradingDashboard()
    dashboard.run()

if __name__ == "__main__":
    main()
